<cfcomponent output="false" extends="BaseHandler">		<cfproperty name="AssetPaths" inject="id:assetPaths" scope="variables" />	<cfproperty name="UserService" inject="id:UserService" />	<cfproperty name="SecurityService" inject="id:SecurityService" />	<cfproperty name="GeoService" inject="id:GeoService" />	<cfproperty name="CarrierService" inject="id:CarrierService" />	<cfproperty name="ValidateThis" inject="ocm:ValidateThis" />	<cfproperty name="ChannelConfig" inject="id:ChannelConfig" />	<cfproperty name="AddressValidationService" inject="id:AddressValidationService" />	<cfproperty name="USPS" inject="id:USPS" />		<!------------------------- Framework interception points ----------------------------->			<cffunction name="preHandler" access="public" returntype="void" output="false">		<cfargument name="event" required="true" type="coldbox.system.web.context.RequestContext" />		<cfargument name="action" required="true" type="string" />		<cfargument name="eventArguments" required="true" type="struct" />					<cfscript>			super.preHandler(argumentCollection=arguments);			event.setLayout('checkout');						event.setValue("formID",createUUID(),true);			event.setValue("assetPaths",assetPaths,true);			event.setValue('isSideBarIncluded',true);			event.setValue('message','');						// Check if OrderAssistance is enabled			if( StructKeyExists(session, 'CurrentUser') && isNumeric(session.CurrentUser.getUserID()) && UserService.isUserOrderAssistanceOn(session.CurrentUser.getUserID()))				event.setValue('orderAssistanceEnabled',true,true);			else				event.setValue('orderAssistanceEnabled',false,true);		</cfscript>			</cffunction>		<!------------------------------- Explicit actions --------------------------------->			<cffunction name="index" returntype="void" output="false">		<cfargument name="event" />		<cfargument name="rc" />		<cfargument name="prc" />				<cfset event.setView("main/sample") />	</cffunction>	<!---	  - Temporary redirect to error display page for cart validation errors. Will eventually move messages for validation errors to 	  - Cart Review page which will allow the user better options to act upon cart issues. 	  --->	<cffunction name="doStartCheckout" returntype="void" output="false">		<cfargument name="event" />		<cfargument name="rc" />		<cfargument name="prc" />				<cfscript>			var cartValidationResponse = '';			var isSoftReservationSuccessful = false;									//Update cart prices			session.cart.updateAllPrices();			session.cart.updateAllDiscounts();			session.cart.updateAllTaxes();						//Validate cart			cartValidationResponse = application.model.cartHelper.validateCartForCheckout();						if ( !cartValidationResponse.getIsCartValid() )			{				application.model.Log.logInvalidCart( cartValidationResponse.getInvalidCartTypeId(), session.cart.getActivationType(), session.cart.getCarrierId(), Trim(cartValidationResponse.renderErrorLIs()) ); //log for reporting				relocate( '/index.cfm/go/checkout/do/error/code/cartvalidation' );			}						//Reserve inventory			isSoftReservationSuccessful = application.model.CheckoutHelper.softReserveCartHardGoods();						if ( !isSoftReservationSuccessful )			{				local.MessageBox = "The device that you wish to purchase is no longer in stock and has been removed from your shopping cart. Please select another device.";				application.model.Checkouthelper.setCheckoutMessageBox( local.MessageBox );				relocate( '/index.cfm/go/cart/do/view/' );			}						application.model.checkoutHelper.generateReferenceNumber();						//TODO: Handle activation scenerios other than upgrade orders (New, AAL, Prepaid, Accesory, No-Contract)			setNextEvent(event="checkout.CarrierAccount");		</cfscript>	</cffunction>	<cffunction name="CarrierAccount" returntype="void" output="false">		<cfargument name="event" />		<cfargument name="rc" />		<cfargument name="prc" />				<cfscript>			var i = 0;						//Page set up			prc.pageHeading = 'Carrier Account';			prc.formID = "carrieraccount";			prc.CarrierCode = session.cart.getCarrierCode();			prc.CartLineCount = application.model.checkoutHelper.getNumberOfLines();									//Validation set up			event.paramValue("ValidationResult", ValidateThis.newResult(), true);			event.paramValue("WirelessAccount", CreateObject('component', 'cfc.model.WirelessAccount').init(), true);						for (i=1; i <= prc.CartLineCount; i++)			{				event.paramValue("WirelessLine" & i, CreateObject('component', 'cfc.model.WirelessLine').init(), true);			}						prc.validateContext = 'AccountLookup';			$htmlhead(ValidateThis.getInitializationScript(JSIncludes=false));			$htmlhead(ValidateThis.getValidationScript(objectType="WirelessAccount", context=prc.validateContext));			$htmlhead(ValidateThis.getValidationScript(objectType="WirelessLine", context=prc.validateContext));						//Validate form			prc.WirelessAccountValidator = ValidateThis.getValidator( objectType="WirelessAccount" );			prc.WirelessLineValidator = ValidateThis.getValidator( objectType="WirelessLine" );			//Set up carrier specific form fields			if ( prc.CarrierCode eq 'VZN' || prc.CarrierCode eq 'ATT' )			{				prc.DisplayPasswordField = true;								if (prc.CarrierCode eq 'VZN')				{					prc.PasswordField.Label = 'Password';					prc.PasswordField.MinLength = '';					prc.PasswordField.MaxLength = '5';				}				else if (prc.CarrierCode eq 'ATT')				{					prc.PasswordField.Label = 'Passcode';					prc.PasswordField.MinLength = '';					prc.PasswordField.MaxLength = '5';				}			}			else			{				prc.DisplayPasswordField = false;			}		</cfscript>	</cffunction>		<cffunction name="doCarrierAccount" returntype="void" output="false">		<cfargument name="event" />		<cfargument name="rc" />		<cfargument name="prc" />				<cfscript>			var boxMessage = '';			var boxMessages = [];			var i = 0;			var j = 0;						prc.CarrierCode = session.cart.getCarrierCode();			prc.CartLineCount = application.model.checkoutHelper.getNumberOfLines();			prc.validationContext = 'AccountLookup';			prc.ValidationResult = '';			//TODO: Check against duplicate MDN enteries			/*			//Check if duplicate MDN was entered			if ( prc.CartLineCount gte 2 )			{				for ( i=1; i <= prc.CartLineCount; i++ )				{					prc.baseMdn = REReplace(rc['mdn' & i ], '[^0-9]', '', 'all');										for ( j=i+1; j <= prc.CartLineCount; j++ )					{						prc.compareMdn = REReplace(rc['mdn' & j ], '[^0-9]', '', 'all');												if ( prc.baseMdn eq prc.compareMdn )						{							//variables.ValidateThis.setFailureMessage( 'Duplicate phone number entered.' );							break;						}					}				}			}			*/						//Clean and validate multiline MDN			for ( i=1; i <= prc.CartLineCount; i++ )			{				prc['mdn' & i] = REReplace(rc['mdn' & i ], '[^0-9]', '', 'all');				prc['WirelessLine' & i] = CreateObject('component', 'cfc.model.WirelessLine').init();				prc['WirelessLine' & i].setCurrentMDN( prc['mdn' & i] );				prc.ValidationResult = ValidateThis.validate(theObject = prc['WirelessLine' & i], context=prc.validationContext, result=prc.ValidationResult);			}						//dump(prc);			//dump(prc.ValidationResult.getFailureMessages(), 1);						//Populate Wireless account and validate			prc.WirelessAccount = CreateObject('component', 'cfc.model.WirelessAccount').init();			prc.WirelessAccount.setSsn( rc.ssn );			prc.WirelessAccount.setAccountZipCode( rc.AccountZipCode );			prc.ValidationResult = variables.ValidateThis.validate(theObject=prc.WirelessAccount, context=prc.validationContext, result=prc.ValidationResult);						if( prc.ValidationResult.hasErrors() ) 			{				//Validation has failed so redirect preserving the form and Validation result				Flash.put('WirelessAccount', prc.WirelessAccount);				Flash.put('ValidationResult', prc.ValidationResult);				getPlugin("MessageBox").setMessage(type="error", message="Oops! Please correct the errors below.");				setNextEvent("checkout.CarrierAccount");			}			else			{				//Set base account lookup args				prc.AccountArgs = {					CarrierId = session.cart.getCarrierId(),					Mdn = prc.Mdn1,					ZipCode = rc.AccountZipCode,					ReferenceNumber = Trim( application.model.checkoutHelper.getReferenceNumber() ),					ServiceZipCode = session.cart.getZipCode()				};								//Set Carrier specific account lookup args				switch( session.cart.getCarrierCode() )				{					case 'VZN':						prc.AccountArgs.Pin = rc.ssn;						prc.AccountArgs.AccountPassword = rc.AccountPassword;						break;					case 'ATT':						prc.AccountArgs.Pin = rc.ssn;						prc.AccountArgs.ActivationType = session.cart.getActivationType();						prc.AccountArgs.NumberOfLinesRequested = application.model.checkoutHelper.getNumberOfLines();						break;					case 'TMO':						throw('T-Mobile not yet implemented');						break;					case 'SPT':						throw('Sprint not yet implemented');						prc.AccountArgs.ActivationType = session.cart.getActivationType();						prc.AccountArgs.SecurityQuestionAnswer = rc.SecurityQuestionAnswer;						break;				}								try				{										if ( !StructKeyExists(rc, 'ResultCode') || rc.ResultCode eq '' )					{						prc.carrierAccount = variables.CarrierService.getCustomerAccount( argumentCollection = prc.AccountArgs );					}					else					{						prc.AccountArgs.ResultCode = rc.ResultCode;						prc.carrierAccount = variables.CarrierService.getMockCustomerAccount( argumentCollection = prc.AccountArgs );					}										//TODO: Check multiline eligibility					prc.accountLine = prc.carrierAccount.getAccountLineByMdn( prc.Mdn1 );										if ( prc.accountLine.getIsUpgradeEligible() )					{						setNextEvent(event="checkout.billing");					}					else					{						boxMessage = '<p>Based on the information provided, it appears that you are not eligible for a handset upgrade through Wireless Advocates at this time. Wireless 										Advocates can only process upgrades for lines of service that have fulfilled 22 months of the 24 month carrier agreement.</p>';												switch( session.cart.getCarrierCode() )						{							case 'VZN':								boxMessage &= "<p>Please ensure that the Verizon Wireless account credentials that you entered are correct (e.g. The mobile number entered is the wireless number 												eligible for upgrade, the secret pin entered is the last 4 digits of the primary account holder's social security number, and the 												billing zip code entered matches the zip code on file with your wireless provider). If you have a Verizon Billing Password on your 												account please enter the 4-5 digit password in the Account Password field.</p>";								break;							case 'ATT':								boxMessage &= "<p>Please ensure that the AT&T account credentials that you entered are correct (e.g. The mobile number entered is the wireless number eligible 												for upgrade, the secret pin entered is the last 4 digits of the primary account holder's social security number, and the billing zip code 												entered matches the zip code on file with your wireless provider).</p>";								break;							case 'TMO':								boxMessage &= "<p>Please ensure that the T-Mobile account credentials that you entered are correct (e.g. The mobile number entered is the wireless number eligible 												for upgrade, the secret pin entered is the last 4 digits of the primary account holder's social security number, and the billing zip code 												entered matches the zip code on file with your wireless provider).</p>";								break;							case 'SPT':								boxMessage &= "<p>Please ensure that the Sprint account credentials that you entered are correct (e.g. The mobile number entered is the wireless number 												eligible for upgrade, the secret pin entered is the 6-10 digit password assigned to your wireless account, and the billing zip code 												entered matches the zip code on file with your wireless provider).</p>";								break;						}						ArrayAppend(boxMessages, boxMessage);												getPlugin("MessageBox").error( messageArray=boxMessages );						Flash.put('WirelessAccount', prc.WirelessAccount);												for ( i=1; i <= prc.CartLineCount; i++ )						{							Flash.put('WirelessLine' & i, prc['WirelessLine' & i]);						}																		setNextEvent(event="checkout.CarrierAccount");					}				}				catch ( CustomerNotFound e )				{					boxMessage = '<p>We were unable to locate your account based on the mobile number and pin provided.</p>';					boxMessage &= '<p>Please verify you entered the correct information.</p>';					boxMessage &= '<p>If you are still receiving this error, please contact Customer Service at #request.config.customerServiceNumber# so we may assist you with your order.</p>';						ArrayAppend(boxMessages, boxMessage);						//TODO: Add configuration to supress details of error					if (1) {						ArrayAppend(boxMessages, '<br>-------- Debug Info --------<br>');						ArrayAppend(boxMessages, 'Error Type: ' & e.type);						ArrayAppend(boxMessages, 'Error Message: ' & e.message);						ArrayAppend(boxMessages, 'Error Detail: ' & e.detail);					}										getPlugin("MessageBox").error( messageArray=boxMessages );					Flash.put('WirelessAccount', prc.WirelessAccount);										for ( i=1; i <= prc.CartLineCount; i++ )					{						Flash.put('WirelessLine' & i, prc['WirelessLine' & i]);					}										setNextEvent(event="checkout.CarrierAccount");				}				catch ( RequestExecutionFailure e )				{					ArrayAppend(boxMessages, 'We are currently experiencing technical diffulties.');										//TODO: Add configuration to supress details of error					if (1) {						ArrayAppend(boxMessages, '<br>-------- Debug Info --------<br>');						ArrayAppend(boxMessages, 'Error Type: ' & e.type);						ArrayAppend(boxMessages, 'Error Message: ' & e.message);						ArrayAppend(boxMessages, 'Error Detail: ' & e.detail);					}										getPlugin("MessageBox").error( messageArray=boxMessages );					Flash.put('WirelessAccount', prc.WirelessAccount);										for ( i=1; i <= prc.CartLineCount; i++ )					{						Flash.put('WirelessLine' & i, prc['WirelessLine' & i]);					}										setNextEvent(event="checkout.CarrierAccount");				}				catch ( Any e )				{					ArrayAppend(boxMessages, 'We are currently experiencing technical diffulties.');										//TODO: Add configuration to supress details of error					if (1) {						ArrayAppend(boxMessages, '<br>-------- Debug Info --------<br>');						ArrayAppend(boxMessages, 'Error Type: ' & e.type);						ArrayAppend(boxMessages, 'Error Message: ' & e.message);						ArrayAppend(boxMessages, 'Error Detail: ' & e.detail);					}										getPlugin("MessageBox").error( messageArray=boxMessages );					Flash.put('WirelessAccount', prc.WirelessAccount);										for ( i=1; i <= prc.CartLineCount; i++ )					{						Flash.put('WirelessLine' & i, prc['WirelessLine' & i]);					}															setNextEvent(event="checkout.CarrierAccount");				}							}		</cfscript>	</cffunction>			<cffunction name="userExists" returntype="void" output="false">		<cfargument name="event" />		<cfargument name="rc" />		<cfargument name="prc" />				<cfscript>						if(!event.valueExists("username")) {				event.renderData('json','false');			} 						event.renderData('json', UserService.usernameExists(rc.username));		</cfscript>	</cffunction>	<cffunction name="billing" returntype="void" output="false">		<cfargument name="event" />		<cfargument name="rc" />		<cfargument name="prc" />				<cfscript>			prc.pageHeading = 'Billing and Shipping Information';			prc.formID = "billship";						event.paramValue("shipToBilling", true, true );			event.paramValue("User", UserService.newUser(), true);			event.paramValue("ValidationResult", ValidateThis.newResult(), true);						// Data for select boxes						prc.qStates = GeoService.getAllStates();			if( request.config.allowAPOFPO ) {				prc.qMilitaryBases = GeoService.getAllBases();			}			// If validation failed, we'll have a User object in RC. Else, use session User or new.			if( !event.valueExists("User") ) {				if( session.CurrentUser.isLoggedIn() ) {					prc.User = UserService.getUserByID( session.userID );				}			}			prc.UserValidator = ValidateThis.getValidator(objectType="User" );			prc.AddressValidator = ValidateThis.getValidator(objectType="Address");						// Load ValidateThis client-side assets			$htmlhead(ValidateThis.getInitializationScript(JSIncludes=false));						// Prepare validation for address			prc.billingAddressContext = 'Billing';			prc.shippingAddressContext = 'Shipping';						// If Care is completing this, allow PO Boxes regardless of any other condition			if( !prc.orderAssistanceEnabled ) {				// Customer is completing order, check if we prohibit PO Boxes				if(application.model.checkoutHelper.isWirelessOrder() && application.model.checkoutHelper.getCarrier() == 128 )					prc.shippingAddressContext = 'BillingNoPOBox';				if( !ChannelConfig.getAllowAPOFPO() && listFindNoCase("APO,FPO",prc.User.getBillingAddress().getCity()) )					prc.shippingAddressContext = 'BillingNoPOBox';			}			$htmlhead(ValidateThis.getValidationScript(objectType="Address", context=prc.shippingAddressContext));			$htmlhead(ValidateThis.getValidationScript(objectType="Address", context=prc.billingAddressContext));						// Prepare validation for user			prc.userContext = 'BillShip';			if( application.model.checkoutHelper.isPrepaidOrder() )				prc.userContext = 'BillShipPrepaid';			$htmlhead(ValidateThis.getValidationScript(objectType="User", context=prc.userContext));		</cfscript>	</cffunction>		<cffunction name="doBilling" returntype="void" output="false">		<cfargument name="event">		<cfargument name="rc">		<cfargument name="prc">		<cfscript>			var key = "";						event.paramValue("saveBillingToAccount",false);			event.paramValue("saveShippingToAccount",false);			// Fraud check			rc.ip = cgi.remote_addr;			if( SecurityService.isBannedUser(argumentCollection=rc) ) {				setNextEvent(url='/index.cfm/go/checkout/do/error/?code=AV999');			}						// Setup validation context for user			prc.userContext = 'BillShip';			// Require DOB for prepaid			if( application.model.checkoutHelper.isPrepaidOrder() )				prc.userContext = 'BillShipPrepaid';						// Populate User and validate basic input			prc.User = UserService.getUserByID(session.userID);			prc.User.populate(rc);			prc.ValidationResult = ValidateThis.validate(theObject=prc.User, context=prc.userContext);						// Prepare validation for address			prc.billingAddressContext = 'Billing';			prc.shippingAddressContext = 'Shipping';						// If Care is completing this, allow PO Boxes regardless of any other condition			if( !prc.orderAssistanceEnabled ) {				// Customer is completing order, check if we prohibit PO Boxes				if(application.model.checkoutHelper.isWirelessOrder() && application.model.checkoutHelper.getCarrier() == 128 )					prc.shippingAddressContext = 'ShippingNoPOBox';				if( !ChannelConfig.getAllowAPOFPO() && listFindNoCase("APO,FPO",prc.User.getBillingAddress().getCity()) )					prc.shippingAddressContext = 'ShippingNoPOBox';			}						// Populate BillingAddress and validate basic input			prc.BillingAddress = GeoService.newAddress();			prc.BillingAddress.populate(rc);			ValidateThis.validate(theObject=prc.BillingAddress, context=prc.billingAddressContext, result=prc.ValidationResult);						// Populate ShippingAddress and validate basic input			prc.ShippingAddress = GeoService.newAddress();			for(key in rc ) {				//Extract fields that begin with "ship_"				if( left(key,5) eq "ship_") {					prc.keyName = mid(key,6,len(key));					prc.shipArgs[prc.keyName] = rc[key];				}			}			prc.ShippingAddress.populate(prc.shipArgs);			ValidateThis.validate(theObject=prc.BillingAddress, context=prc.shippingAddressContext, result=prc.ValidationResult);						// BEGIN || Additional address validation from 3rd parties			if( application.model.checkoutHelper.isWirelessOrder() || application.model.checkoutHelper.isPrepaidOrder() ) {				// If this is a wireless order or prepaid, pass a carrier.				prc.billingCarrier = application.model.checkoutHelper.getCarrier();			} else {				// We don't need to validate against a carrier, there is none.				prc.billingCarrier = '';			}						if( !prc.orderAssistanceEnabled ) {				// Billing address verification (Carrier)				prc.billingResult = AddressValidationService.validateAddress(											address = prc.BillingAddress, 											addressType = 'Billing', 											referenceNumber = application.model.checkoutHelper.getReferenceNumber(), 											validateWithCarrier = prc.billingCarrier, 											resultCode = rc.resultCode, 											serviceZipCode = session.cart.getZipCode() 										);				application.model.checkoutHelper.setBillingResult(prc.billingResult);								switch( prc.billingResult.getResultCode() ) {					case "AV001" : {						prc.ValidationResult.addFailure(message="Your billing address could not be validated, but some alternatives are available. Select an alternative address or review and resubmit your billing address.");						break;					}					case "AV002" : {						prc.ValidationResult.addFailure(message="The billing address provided could not be validated. Please review and resubmit.");						break;					}					case "AV003" : {						// Address validated. Do nothing.;						break;					}					case "AV004" : {						prc.ValidationResult.addFailure(message="The billing address provided could not be validated. Please review and resubmit.");						break;					}					case "AV010" :					case "AV011" :					case "AV012" :					case "AV999" :					default : {						setNextEvent(url="/index.cfm/go/checkout/do/error/?code=#prc.billingResult.getResultCode()#");						break;					}				}								if( request.config.allowAPOFPO && listFindNoCase("APO,FPO",prc.ShippingAddress.getCity()) ) {					//Shipping address verification (USPS)						prc.USPSShippingResultCode = USPS.addressValidate(													address2 = prc.ShippingAddress.getAddress1(),													city = prc.ShippingAddress.getCity(),													state = prc.ShippingAddress.getState(),													zip5 = prc.ShippingAddress.getZipCode()												);										switch( prc.USPSShippingResultCode ) {						//Address failed third party address validation and returned alternates.						case "USPS001" : {							prc.ValidationResult.addFailure(message='Your shipping address could not be validated, but some alternatives are available. Select an alternative address or review and resubmit your shipping address.');							break;						}						case "USPS002" : {							prc.ValidationResult.addFailure(message="The shipping address provided could not be validated. Please review and resubmit.");							break;						}						case "USPS003" : 						case "USPS004" : {							//Do nothing							break;						}						case "USPS010" :						case "USPS011" :						case "USPS012" :						default : {							setNextEvent(url="/index.cfm/go/checkout/do/error/?code=#prc.USPSShippingResultCode#");							break;						}					}									} else {					//Shipping address verification (Carrier)					prc.shippingResult = AddressValidationService.validateAddress(											address = prc.ShippingAddress, 											addressType = 'Shipping', 											referenceNumber = application.model.checkoutHelper.getReferenceNumber(), 											validateWithCarrier = prc.billingCarrier, 											resultCode = rc.resultCode, 											serviceZipCode = session.cart.getZipCode() 										);					application.model.checkoutHelper.setShippingResult(prc.shippingResult);									switch( prc.shippingResult.getResultCode() ) {						case "AV001" : {							prc.ValidationResult.addFailure(message="Your shipping address could not be validated, but some alternatives are available. Select an alternative address or review and resubmit your billing address.");							break;						}						case "AV002" : {							prc.ValidationResult.addFailure(message="The shipping address provided could not be validated. Please review and resubmit.");							break;						}						case "AV003" : {							// Address validated. Do nothing.;							break;						}						case "AV004" : {							prc.ValidationResult.addFailure(message="The shipping address provided could not be validated. Please review and resubmit.");							break;						}						case "AV010" :						case "AV011" :						case "AV012" :						case "AV999" :						default : {							setNextEvent(url="/index.cfm/go/checkout/do/error/?code=#prc.billingResult.getResultCode()#");							break;						}					}				}			}						// END || Additional address validation from 3rd parties									if( prc.ValidationResult.hasErrors() ) {								// Validation has failed so redirect preserving the User and ValidationResult				Flash.put('User', prc.User);				Flash.put('ValidationResult', prc.ValidationResult);				getPlugin("MessageBox").setMessage(type="error", message="Oops! Please correct the errors below.");				setNextEvent("checkout.billing");							}						// Persist addresses to be later saved to order			session.checkout.billingAddress = prc.BillingAddress;			session.checkout.shippingAddress = prc.ShippingAddress;						// User has the option to save these addresses to their account			if( rc.saveBillingToAccount )				prc.User.setBillingAddress(prc.BillingAddress);			if( rc.saveShippingToAccount )				prc.User.setShippingAddress(prc.ShippingAddress);						UserService.saveUser(prc.User);						setNextEvent("checkout.carrierTerms");		</cfscript>	</cffunction>		<cffunction name="carrierTerms" returntype="void" output="false">		<cfargument name="event" />		<cfargument name="rc" />		<cfargument name="prc" />				<cfscript></cfscript>	</cffunction><!------------------------------------------- PRIVATE EVENTS ------------------------------------------></cfcomponent>