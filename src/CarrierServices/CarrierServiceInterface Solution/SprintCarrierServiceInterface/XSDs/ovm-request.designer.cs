// ------------------------------------------------------------------------------
//  <auto-generated>
//    Generated by Xsd2Code. Version 3.4.0.37595
//    <NameSpace>SprintCSI.Request</NameSpace><Collection>List</Collection><codeType>CSharp</codeType><EnableDataBinding>False</EnableDataBinding><EnableLazyLoading>False</EnableLazyLoading><TrackingChangesEnable>False</TrackingChangesEnable><GenTrackingClasses>False</GenTrackingClasses><HidePrivateFieldInIDE>False</HidePrivateFieldInIDE><EnableSummaryComment>True</EnableSummaryComment><VirtualProp>False</VirtualProp><IncludeSerializeMethod>True</IncludeSerializeMethod><UseBaseClass>False</UseBaseClass><GenBaseClass>False</GenBaseClass><GenerateCloneMethod>False</GenerateCloneMethod><GenerateDataContracts>False</GenerateDataContracts><CodeBaseTag>Net40</CodeBaseTag><SerializeMethodName>Serialize</SerializeMethodName><DeserializeMethodName>Deserialize</DeserializeMethodName><SaveToFileMethodName>SaveToFile</SaveToFileMethodName><LoadFromFileMethodName>LoadFromFile</LoadFromFileMethodName><GenerateXMLAttributes>True</GenerateXMLAttributes><EnableEncoding>True</EnableEncoding><AutomaticProperties>False</AutomaticProperties><GenerateShouldSerialize>False</GenerateShouldSerialize><DisableDebug>False</DisableDebug><PropNameSpecified>Default</PropNameSpecified><Encoder>UTF8</Encoder><CustomUsings></CustomUsings><ExcludeIncludedTypes>False</ExcludeIncludedTypes><EnableInitializeFields>True</EnableInitializeFields>
//  </auto-generated>
// ------------------------------------------------------------------------------
namespace SprintCSI.Request {
    using System;
    using System.Diagnostics;
    using System.Xml.Serialization;
    using System.Collections;
    using System.Xml.Schema;
    using System.ComponentModel;
    using System.IO;
    using System.Text;
    using System.Xml;
    using System.Collections.Generic;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("fault", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class OVMFault {
        
        private List<ErrorInfo> detailField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// OVMFault class constructor
        /// </summary>
        public OVMFault() {
            this.detailField = new List<ErrorInfo>();
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("errorInfo", IsNullable=false)]
        public List<ErrorInfo> detail {
            get {
                return this.detailField;
            }
            set {
                this.detailField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OVMFault));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OVMFault object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OVMFault object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OVMFault object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OVMFault obj, out System.Exception exception) {
            exception = null;
            obj = default(OVMFault);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OVMFault obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OVMFault Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OVMFault)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OVMFault object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OVMFault object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OVMFault object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OVMFault obj, out System.Exception exception) {
            exception = null;
            obj = default(OVMFault);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OVMFault obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OVMFault obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OVMFault LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static OVMFault LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ErrorInfo {
        
        private uint errortypeField;
        
        private string errorcodeField;
        
        private string errorsubnameField;
        
        private string errordetailsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("error-type", Order=0)]
        public uint errortype {
            get {
                return this.errortypeField;
            }
            set {
                this.errortypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("error-code", DataType="integer", Order=1)]
        public string errorcode {
            get {
                return this.errorcodeField;
            }
            set {
                this.errorcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("error-sub-name", Order=2)]
        public string errorsubname {
            get {
                return this.errorsubnameField;
            }
            set {
                this.errorsubnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("error-details", Order=3)]
        public string errordetails {
            get {
                return this.errordetailsField;
            }
            set {
                this.errordetailsField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ErrorInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ErrorInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ErrorInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ErrorInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ErrorInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ErrorInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ErrorInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ErrorInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ErrorInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ErrorInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ErrorInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ErrorInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ErrorInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ErrorInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ErrorInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ErrorInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ErrorInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ErrorInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("requestHeader", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class RequestMessageHeader {
        
        private string pinField;
        
        private string vendorcodeField;
        
        private string subvendorcodeField;
        
        private string vendorusernameField;
        
        private string vendorpasswordField;
        
        private string messageidField;
        
        private string orderidField;
        
        private RequestMessageType messagetypeField;
        
        private System.DateTime timestampField;
        
        private string returnurlField;
        
        private string resendnumberField;
        
        private BrandType brandtypeField;
        
        private bool brandtypeFieldSpecified;
        
        private string storeidField;
        
        private string associateidField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string pin {
            get {
                return this.pinField;
            }
            set {
                this.pinField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("vendor-code", Order=1)]
        public string vendorcode {
            get {
                return this.vendorcodeField;
            }
            set {
                this.vendorcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sub-vendor-code", Order=2)]
        public string subvendorcode {
            get {
                return this.subvendorcodeField;
            }
            set {
                this.subvendorcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("vendor-username", Order=3)]
        public string vendorusername {
            get {
                return this.vendorusernameField;
            }
            set {
                this.vendorusernameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("vendor-password", Order=4)]
        public string vendorpassword {
            get {
                return this.vendorpasswordField;
            }
            set {
                this.vendorpasswordField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("message-id", Order=5)]
        public string messageid {
            get {
                return this.messageidField;
            }
            set {
                this.messageidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-id", Order=6)]
        public string orderid {
            get {
                return this.orderidField;
            }
            set {
                this.orderidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("message-type", Order=7)]
        public RequestMessageType messagetype {
            get {
                return this.messagetypeField;
            }
            set {
                this.messagetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public System.DateTime timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("return-url", DataType="anyURI", Order=9)]
        public string returnurl {
            get {
                return this.returnurlField;
            }
            set {
                this.returnurlField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("resend-number", DataType="nonNegativeInteger", Order=10)]
        public string resendnumber {
            get {
                return this.resendnumberField;
            }
            set {
                this.resendnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("brand-type", Order=11)]
        public BrandType brandtype {
            get {
                return this.brandtypeField;
            }
            set {
                this.brandtypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool brandtypeSpecified {
            get {
                return this.brandtypeFieldSpecified;
            }
            set {
                this.brandtypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("store-id", Order=12)]
        public string storeid {
            get {
                return this.storeidField;
            }
            set {
                this.storeidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("associate-id", Order=13)]
        public string associateid {
            get {
                return this.associateidField;
            }
            set {
                this.associateidField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RequestMessageHeader));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RequestMessageHeader object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RequestMessageHeader object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RequestMessageHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RequestMessageHeader obj, out System.Exception exception) {
            exception = null;
            obj = default(RequestMessageHeader);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RequestMessageHeader obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RequestMessageHeader Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RequestMessageHeader)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current RequestMessageHeader object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an RequestMessageHeader object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RequestMessageHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out RequestMessageHeader obj, out System.Exception exception) {
            exception = null;
            obj = default(RequestMessageHeader);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out RequestMessageHeader obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out RequestMessageHeader obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static RequestMessageHeader LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static RequestMessageHeader LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum RequestMessageType {
        
        /// <remarks/>
        ACTIVATION_REQUEST,
        
        /// <remarks/>
        ACTIVATE_NOW_REQUEST,
        
        /// <remarks/>
        CREDIT_CHECK_REQUEST,
        
        /// <remarks/>
        PORT_ELIGIBILITY_REQUEST,
        
        /// <remarks/>
        VALIDATION_REQUEST,
        
        /// <remarks/>
        NPA_NXX_REQUEST,
        
        /// <remarks/>
        ACCOUNT_VALIDATION_REQUEST,
        
        /// <remarks/>
        PRE_AUTHORIZATION_REQUEST,
        
        /// <remarks/>
        PLANS_REQUEST,
        
        /// <remarks/>
        OPTIONS_REQUEST,
        
        /// <remarks/>
        BILL_SUMMARY_REQUEST,
        
        /// <remarks/>
        SERVICE_VALIDATION_REQUEST,
        
        /// <remarks/>
        INVENTORY_CHECK_REQUEST,
        
        /// <remarks/>
        AUTHENTICATE_RESEND_PIN_REQUEST,
        
        /// <remarks/>
        COVERAGE_CHECK_REQUEST,
        
        /// <remarks/>
        ADJUSTMENT_REQUEST,
        
        /// <remarks/>
        CORPORATE_DISCOUNT_REQUEST,
        
        /// <remarks/>
        ACTIVATE_RESERVED_DEVICE_REQUEST,
        
        /// <remarks/>
        CANCEL_SUBSCRIBER_REQUEST,
        
        /// <remarks/>
        DEVICE_INFO_REQUEST,
        
        /// <remarks/>
        CHECK_ACTIVATION_STATUS_REQUEST,
        
        /// <remarks/>
        ORDER_STATUS_REQUEST,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum BrandType {
        
        /// <remarks/>
        NX,
        
        /// <remarks/>
        SP,
        
        /// <remarks/>
        HB,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("responseHeader", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ResponseMessageHeader {
        
        private string vendorcodeField;
        
        private string messageidField;
        
        private string orderidField;
        
        private ResponseMessageType messagetypeField;
        
        private System.DateTime timestampField;
        
        private string resendnumberField;
        
        private ResponseMessageHeaderBrandtype brandtypeField;
        
        private bool brandtypeFieldSpecified;
        
        private string storeidField;
        
        private string associateidField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("vendor-code", Order=0)]
        public string vendorcode {
            get {
                return this.vendorcodeField;
            }
            set {
                this.vendorcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("message-id", Order=1)]
        public string messageid {
            get {
                return this.messageidField;
            }
            set {
                this.messageidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-id", Order=2)]
        public string orderid {
            get {
                return this.orderidField;
            }
            set {
                this.orderidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("message-type", Order=3)]
        public ResponseMessageType messagetype {
            get {
                return this.messagetypeField;
            }
            set {
                this.messagetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public System.DateTime timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("resend-number", DataType="nonNegativeInteger", Order=5)]
        public string resendnumber {
            get {
                return this.resendnumberField;
            }
            set {
                this.resendnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("brand-type", Order=6)]
        public ResponseMessageHeaderBrandtype brandtype {
            get {
                return this.brandtypeField;
            }
            set {
                this.brandtypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool brandtypeSpecified {
            get {
                return this.brandtypeFieldSpecified;
            }
            set {
                this.brandtypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("store-id", Order=7)]
        public string storeid {
            get {
                return this.storeidField;
            }
            set {
                this.storeidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("associate-id", Order=8)]
        public string associateid {
            get {
                return this.associateidField;
            }
            set {
                this.associateidField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ResponseMessageHeader));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ResponseMessageHeader object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ResponseMessageHeader object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ResponseMessageHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ResponseMessageHeader obj, out System.Exception exception) {
            exception = null;
            obj = default(ResponseMessageHeader);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ResponseMessageHeader obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ResponseMessageHeader Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ResponseMessageHeader)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ResponseMessageHeader object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ResponseMessageHeader object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ResponseMessageHeader object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ResponseMessageHeader obj, out System.Exception exception) {
            exception = null;
            obj = default(ResponseMessageHeader);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ResponseMessageHeader obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ResponseMessageHeader obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ResponseMessageHeader LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ResponseMessageHeader LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum ResponseMessageType {
        
        /// <remarks/>
        ACTIVATION_RESPONSE,
        
        /// <remarks/>
        ACTIVATE_NOW_RESPONSE,
        
        /// <remarks/>
        CREDIT_CHECK_RESPONSE,
        
        /// <remarks/>
        PARSE_RESPONSE,
        
        /// <remarks/>
        CANCELLED_RESPONSE,
        
        /// <remarks/>
        STATUS_RESPONSE,
        
        /// <remarks/>
        PORT_ELIGIBILITY_RESPONSE,
        
        /// <remarks/>
        VALIDATION_RESPONSE,
        
        /// <remarks/>
        NPA_NXX_RESPONSE,
        
        /// <remarks/>
        ACCOUNT_VALIDATION_RESPONSE,
        
        /// <remarks/>
        CREDIT_CANCEL_RESPONSE,
        
        /// <remarks/>
        PRE_AUTHORIZATION_RESPONSE,
        
        /// <remarks/>
        PLANS_RESPONSE,
        
        /// <remarks/>
        OPTIONS_RESPONSE,
        
        /// <remarks/>
        BILL_SUMMARY_RESPONSE,
        
        /// <remarks/>
        SERVICE_VALIDATION_RESPONSE,
        
        /// <remarks/>
        INVENTORY_CHECK_RESPONSE,
        
        /// <remarks/>
        AUTHENTICATE_RESEND_PIN_RESPONSE,
        
        /// <remarks/>
        COVERAGE_CHECK_RESPONSE,
        
        /// <remarks/>
        ADJUSTMENT_RESPONSE,
        
        /// <remarks/>
        CORPORATE_DISCOUNT_RESPONSE,
        
        /// <remarks/>
        ACTIVATE_RESERVED_DEVICE_RESPONSE,
        
        /// <remarks/>
        DEVICE_INFO_RESPONSE,
        
        /// <remarks/>
        CHECK_ACTIVATION_STATUS_RESPONSE,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public enum ResponseMessageHeaderBrandtype {
        
        /// <remarks/>
        NX,
        
        /// <remarks/>
        SP,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("ackResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ParseResponse {
        
        private ParseResponseType parseresultField;
        
        private string detailsField;
        
        private string sprintorderidField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("parse-result", Order=0)]
        public ParseResponseType parseresult {
            get {
                return this.parseresultField;
            }
            set {
                this.parseresultField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string details {
            get {
                return this.detailsField;
            }
            set {
                this.detailsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sprint-order-id", Order=2)]
        public string sprintorderid {
            get {
                return this.sprintorderidField;
            }
            set {
                this.sprintorderidField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ParseResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ParseResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ParseResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ParseResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ParseResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ParseResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ParseResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ParseResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ParseResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ParseResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ParseResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ParseResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ParseResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ParseResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ParseResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ParseResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ParseResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ParseResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum ParseResponseType {
        
        /// <remarks/>
        ACK,
        
        /// <remarks/>
        NACK,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doAccountValidation", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class AccountValidationRequest {
        
        private string lastnameField;
        
        private string itemField;
        
        private ItemChoiceType itemElementNameField;
        
        private List<string> requesteddevicesField;
        
        private bool singlesubscriberField;
        
        private bool singlesubscriberFieldSpecified;
        
        private string secpinField;
        
        private string secanswerField;
        
        private string item1Field;
        
        private Item1ChoiceType item1ElementNameField;
        
        private string billingzipField;
        
        private bool returnBogxIndField;
        
        private bool returnBogxIndFieldSpecified;
        
        private AccountValidationRequestUpgradedevice upgradedeviceField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AccountValidationRequest class constructor
        /// </summary>
        public AccountValidationRequest() {
            this.upgradedeviceField = new AccountValidationRequestUpgradedevice();
            this.requesteddevicesField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("last-name", Order=0)]
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("icc-id", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("mac-id", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("meid", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("sim", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("requested-devices", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("model-id", IsNullable=false)]
        public List<string> requesteddevices {
            get {
                return this.requesteddevicesField;
            }
            set {
                this.requesteddevicesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("single-subscriber", Order=4)]
        public bool singlesubscriber {
            get {
                return this.singlesubscriberField;
            }
            set {
                this.singlesubscriberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool singlesubscriberSpecified {
            get {
                return this.singlesubscriberFieldSpecified;
            }
            set {
                this.singlesubscriberFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-pin", Order=5)]
        public string secpin {
            get {
                return this.secpinField;
            }
            set {
                this.secpinField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-answer", Order=6)]
        public string secanswer {
            get {
                return this.secanswerField;
            }
            set {
                this.secanswerField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("federal-tax-id", typeof(string), Order=7)]
        [System.Xml.Serialization.XmlElementAttribute("ssn", typeof(string), Order=7)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("Item1ElementName")]
        public string Item1 {
            get {
                return this.item1Field;
            }
            set {
                this.item1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Item1ChoiceType Item1ElementName {
            get {
                return this.item1ElementNameField;
            }
            set {
                this.item1ElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("billing-zip", Order=9)]
        public string billingzip {
            get {
                return this.billingzipField;
            }
            set {
                this.billingzipField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public bool returnBogxInd {
            get {
                return this.returnBogxIndField;
            }
            set {
                this.returnBogxIndField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool returnBogxIndSpecified {
            get {
                return this.returnBogxIndFieldSpecified;
            }
            set {
                this.returnBogxIndFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("upgrade-device", Order=11)]
        public AccountValidationRequestUpgradedevice upgradedevice {
            get {
                return this.upgradedeviceField;
            }
            set {
                this.upgradedeviceField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AccountValidationRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AccountValidationRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AccountValidationRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AccountValidationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AccountValidationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountValidationRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AccountValidationRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AccountValidationRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AccountValidationRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AccountValidationRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AccountValidationRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AccountValidationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AccountValidationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountValidationRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AccountValidationRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AccountValidationRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AccountValidationRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AccountValidationRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-number")]
        accountnumber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("icc-id")]
        iccid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mac-id")]
        macid,
        
        /// <remarks/>
        meid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reference-ptn")]
        referenceptn,
        
        /// <remarks/>
        sim,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum Item1ChoiceType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("federal-tax-id")]
        federaltaxid,
        
        /// <remarks/>
        ssn,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class AccountValidationRequestUpgradedevice {
        
        private string itemField;
        
        private ItemChoiceType1 itemElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("hsn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("mac-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("meid", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("model-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType1 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AccountValidationRequestUpgradedevice));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AccountValidationRequestUpgradedevice object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AccountValidationRequestUpgradedevice object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AccountValidationRequestUpgradedevice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AccountValidationRequestUpgradedevice obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountValidationRequestUpgradedevice);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AccountValidationRequestUpgradedevice obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AccountValidationRequestUpgradedevice Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AccountValidationRequestUpgradedevice)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AccountValidationRequestUpgradedevice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AccountValidationRequestUpgradedevice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AccountValidationRequestUpgradedevice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AccountValidationRequestUpgradedevice obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountValidationRequestUpgradedevice);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AccountValidationRequestUpgradedevice obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AccountValidationRequestUpgradedevice obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AccountValidationRequestUpgradedevice LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AccountValidationRequestUpgradedevice LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType1 {
        
        /// <remarks/>
        hsn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mac-id")]
        macid,
        
        /// <remarks/>
        meid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("model-id")]
        modelid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doAccountValidationResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class AccountValidationResponse {
        
        private AccountStatus accountstatusField;
        
        private System.DateTime accountstatusdateField;
        
        private bool accountstatusdateFieldSpecified;
        
        private string accountnumberField;
        
        private uint numberhandsetsapprovedField;
        
        private bool numberhandsetsapprovedFieldSpecified;
        
        private AccountInfo accountinfoField;
        
        private RebateBogxInfoType rebateBogxInfoField;
        
        private BillingName billingnameField;
        
        private BillingAddress billingaddressField;
        
        private decimal accountbalanceField;
        
        private bool accountbalanceFieldSpecified;
        
        private System.DateTime paymentduedateField;
        
        private bool paymentduedateFieldSpecified;
        
        private System.DateTime balanceexpirationdateField;
        
        private bool balanceexpirationdateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AccountValidationResponse class constructor
        /// </summary>
        public AccountValidationResponse() {
            this.billingaddressField = new BillingAddress();
            this.billingnameField = new BillingName();
            this.rebateBogxInfoField = new RebateBogxInfoType();
            this.accountinfoField = new AccountInfo();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-status", Order=0)]
        public AccountStatus accountstatus {
            get {
                return this.accountstatusField;
            }
            set {
                this.accountstatusField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-status-date", Order=1)]
        public System.DateTime accountstatusdate {
            get {
                return this.accountstatusdateField;
            }
            set {
                this.accountstatusdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool accountstatusdateSpecified {
            get {
                return this.accountstatusdateFieldSpecified;
            }
            set {
                this.accountstatusdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", Order=2)]
        public string accountnumber {
            get {
                return this.accountnumberField;
            }
            set {
                this.accountnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("number-handsets-approved", Order=3)]
        public uint numberhandsetsapproved {
            get {
                return this.numberhandsetsapprovedField;
            }
            set {
                this.numberhandsetsapprovedField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberhandsetsapprovedSpecified {
            get {
                return this.numberhandsetsapprovedFieldSpecified;
            }
            set {
                this.numberhandsetsapprovedFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-info", Order=4)]
        public AccountInfo accountinfo {
            get {
                return this.accountinfoField;
            }
            set {
                this.accountinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public RebateBogxInfoType rebateBogxInfo {
            get {
                return this.rebateBogxInfoField;
            }
            set {
                this.rebateBogxInfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("billing-name", Order=6)]
        public BillingName billingname {
            get {
                return this.billingnameField;
            }
            set {
                this.billingnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("billing-address", Order=7)]
        public BillingAddress billingaddress {
            get {
                return this.billingaddressField;
            }
            set {
                this.billingaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-balance", Order=8)]
        public decimal accountbalance {
            get {
                return this.accountbalanceField;
            }
            set {
                this.accountbalanceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool accountbalanceSpecified {
            get {
                return this.accountbalanceFieldSpecified;
            }
            set {
                this.accountbalanceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("payment-due-date", DataType="date", Order=9)]
        public System.DateTime paymentduedate {
            get {
                return this.paymentduedateField;
            }
            set {
                this.paymentduedateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool paymentduedateSpecified {
            get {
                return this.paymentduedateFieldSpecified;
            }
            set {
                this.paymentduedateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("balance-expiration-date", DataType="date", Order=10)]
        public System.DateTime balanceexpirationdate {
            get {
                return this.balanceexpirationdateField;
            }
            set {
                this.balanceexpirationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool balanceexpirationdateSpecified {
            get {
                return this.balanceexpirationdateFieldSpecified;
            }
            set {
                this.balanceexpirationdateFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AccountValidationResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AccountValidationResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AccountValidationResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AccountValidationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AccountValidationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountValidationResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AccountValidationResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AccountValidationResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AccountValidationResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AccountValidationResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AccountValidationResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AccountValidationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AccountValidationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountValidationResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AccountValidationResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AccountValidationResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AccountValidationResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AccountValidationResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum AccountStatus {
        
        /// <remarks/>
        ACTIVE,
        
        /// <remarks/>
        TENTATIVE,
        
        /// <remarks/>
        CLOSED,
        
        /// <remarks/>
        CANCELLED,
        
        /// <remarks/>
        SUSPENDED,
        
        /// <remarks/>
        UNKNOWN,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class AccountInfo {
        
        private uint currentsubscribersField;
        
        private List<Subscriber> subscriberField;
        
        private int allowedloancountField;
        
        private bool allowedloancountFieldSpecified;
        
        private int studentlinemaxlimitField;
        
        private bool studentlinemaxlimitFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AccountInfo class constructor
        /// </summary>
        public AccountInfo() {
            this.subscriberField = new List<Subscriber>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("current-subscribers", Order=0)]
        public uint currentsubscribers {
            get {
                return this.currentsubscribersField;
            }
            set {
                this.currentsubscribersField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber", Order=1)]
        public List<Subscriber> subscriber {
            get {
                return this.subscriberField;
            }
            set {
                this.subscriberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("allowed-loan-count", Order=2)]
        public int allowedloancount {
            get {
                return this.allowedloancountField;
            }
            set {
                this.allowedloancountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool allowedloancountSpecified {
            get {
                return this.allowedloancountFieldSpecified;
            }
            set {
                this.allowedloancountFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("student-line-max-limit", Order=3)]
        public int studentlinemaxlimit {
            get {
                return this.studentlinemaxlimitField;
            }
            set {
                this.studentlinemaxlimitField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool studentlinemaxlimitSpecified {
            get {
                return this.studentlinemaxlimitFieldSpecified;
            }
            set {
                this.studentlinemaxlimitFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AccountInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AccountInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AccountInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AccountInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AccountInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AccountInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AccountInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AccountInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AccountInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AccountInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AccountInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AccountInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AccountInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AccountInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AccountInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AccountInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Subscriber {
        
        private string priceplancodeField;
        
        private string priceplannameField;
        
        private decimal priceplanpriceField;
        
        private PlanType plantypeField;
        
        private bool plantypeFieldSpecified;
        
        private bool legacyfamilyplanField;
        
        private bool legacyfamilyplanFieldSpecified;
        
        private bool hasfutureplanField;
        
        private bool hasfutureplanFieldSpecified;
        
        private BundleInfo bundleinfoField;
        
        private uint ltsrankField;
        
        private bool ltsrankFieldSpecified;
        
        private string sharinggroupidField;
        
        private uint familygroupField;
        
        private bool familygroupFieldSpecified;
        
        private string serialtypeField;
        
        private string serialnumberField;
        
        private string iccidField;
        
        private string phonemodelidField;
        
        private string phonenameField;
        
        private string ptnField;
        
        private PTNStatus ptnstatusField;
        
        private System.DateTime ptnstatusdateField;
        
        private bool ptnstatusdateFieldSpecified;
        
        private bool ptnportoutindField;
        
        private bool ptnportoutindFieldSpecified;
        
        private System.DateTime initactivationdateField;
        
        private bool initactivationdateFieldSpecified;
        
        private string etfnotesField;
        
        private string subscriberemailaddressField;
        
        private YesNoType multvbssocindField;
        
        private bool multvbssocindFieldSpecified;
        
        private List<ServiceDiscount> servicediscountField;
        
        private System.DateTime contractstartdateField;
        
        private bool contractstartdateFieldSpecified;
        
        private System.DateTime contractenddateField;
        
        private bool contractenddateFieldSpecified;
        
        private System.DateTime handsetactivationdateField;
        
        private bool handsetactivationdateFieldSpecified;
        
        private UpgradeData upgradeField;
        
        private bool planchangereqField;
        
        private bool planchangereqFieldSpecified;
        
        private YesNoType existingcommittedorderField;
        
        private bool existingcommittedorderFieldSpecified;
        
        private List<AddOnOptionType> optionField;
        
        private List<SubscriberDataallowances> dataallowancesField;
        
        private bool eligiblecheckerrorField;
        
        private bool eligiblecheckerrorFieldSpecified;
        
        private RebateBogxInfoType rebateBogxInfoField;
        
        private List<SubscriberFuturedated> futuredatedField;
        
        private string musmilestonelevelField;
        
        private string subscriberidField;
        
        private bool loanexistindField;
        
        private bool loanexistindFieldSpecified;
        
        private bool studentlineindField;
        
        private bool studentlineindFieldSpecified;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Subscriber class constructor
        /// </summary>
        public Subscriber() {
            this.futuredatedField = new List<SubscriberFuturedated>();
            this.rebateBogxInfoField = new RebateBogxInfoType();
            this.dataallowancesField = new List<SubscriberDataallowances>();
            this.optionField = new List<AddOnOptionType>();
            this.upgradeField = new UpgradeData();
            this.servicediscountField = new List<ServiceDiscount>();
            this.bundleinfoField = new BundleInfo();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("price-plan-code", Order=0)]
        public string priceplancode {
            get {
                return this.priceplancodeField;
            }
            set {
                this.priceplancodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("price-plan-name", Order=1)]
        public string priceplanname {
            get {
                return this.priceplannameField;
            }
            set {
                this.priceplannameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("price-plan-price", Order=2)]
        public decimal priceplanprice {
            get {
                return this.priceplanpriceField;
            }
            set {
                this.priceplanpriceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-type", Order=3)]
        public PlanType plantype {
            get {
                return this.plantypeField;
            }
            set {
                this.plantypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool plantypeSpecified {
            get {
                return this.plantypeFieldSpecified;
            }
            set {
                this.plantypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("legacy-family-plan", Order=4)]
        public bool legacyfamilyplan {
            get {
                return this.legacyfamilyplanField;
            }
            set {
                this.legacyfamilyplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool legacyfamilyplanSpecified {
            get {
                return this.legacyfamilyplanFieldSpecified;
            }
            set {
                this.legacyfamilyplanFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("has-future-plan", Order=5)]
        public bool hasfutureplan {
            get {
                return this.hasfutureplanField;
            }
            set {
                this.hasfutureplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool hasfutureplanSpecified {
            get {
                return this.hasfutureplanFieldSpecified;
            }
            set {
                this.hasfutureplanFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bundle-info", Order=6)]
        public BundleInfo bundleinfo {
            get {
                return this.bundleinfoField;
            }
            set {
                this.bundleinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("lts-rank", Order=7)]
        public uint ltsrank {
            get {
                return this.ltsrankField;
            }
            set {
                this.ltsrankField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ltsrankSpecified {
            get {
                return this.ltsrankFieldSpecified;
            }
            set {
                this.ltsrankFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sharing-group-id", Order=8)]
        public string sharinggroupid {
            get {
                return this.sharinggroupidField;
            }
            set {
                this.sharinggroupidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("family-group", Order=9)]
        public uint familygroup {
            get {
                return this.familygroupField;
            }
            set {
                this.familygroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool familygroupSpecified {
            get {
                return this.familygroupFieldSpecified;
            }
            set {
                this.familygroupFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("serial-type", Order=10)]
        public string serialtype {
            get {
                return this.serialtypeField;
            }
            set {
                this.serialtypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("serial-number", Order=11)]
        public string serialnumber {
            get {
                return this.serialnumberField;
            }
            set {
                this.serialnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("icc-id", Order=12)]
        public string iccid {
            get {
                return this.iccidField;
            }
            set {
                this.iccidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone-model-id", Order=13)]
        public string phonemodelid {
            get {
                return this.phonemodelidField;
            }
            set {
                this.phonemodelidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone-name", Order=14)]
        public string phonename {
            get {
                return this.phonenameField;
            }
            set {
                this.phonenameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public string ptn {
            get {
                return this.ptnField;
            }
            set {
                this.ptnField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ptn-status", Order=16)]
        public PTNStatus ptnstatus {
            get {
                return this.ptnstatusField;
            }
            set {
                this.ptnstatusField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ptn-status-date", Order=17)]
        public System.DateTime ptnstatusdate {
            get {
                return this.ptnstatusdateField;
            }
            set {
                this.ptnstatusdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ptnstatusdateSpecified {
            get {
                return this.ptnstatusdateFieldSpecified;
            }
            set {
                this.ptnstatusdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ptn-port-out-ind", Order=18)]
        public bool ptnportoutind {
            get {
                return this.ptnportoutindField;
            }
            set {
                this.ptnportoutindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ptnportoutindSpecified {
            get {
                return this.ptnportoutindFieldSpecified;
            }
            set {
                this.ptnportoutindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("init-activation-date", DataType="date", Order=19)]
        public System.DateTime initactivationdate {
            get {
                return this.initactivationdateField;
            }
            set {
                this.initactivationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool initactivationdateSpecified {
            get {
                return this.initactivationdateFieldSpecified;
            }
            set {
                this.initactivationdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("etf-notes", Order=20)]
        public string etfnotes {
            get {
                return this.etfnotesField;
            }
            set {
                this.etfnotesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-email-address", Order=21)]
        public string subscriberemailaddress {
            get {
                return this.subscriberemailaddressField;
            }
            set {
                this.subscriberemailaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("mult-vbs-soc-ind", Order=22)]
        public YesNoType multvbssocind {
            get {
                return this.multvbssocindField;
            }
            set {
                this.multvbssocindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool multvbssocindSpecified {
            get {
                return this.multvbssocindFieldSpecified;
            }
            set {
                this.multvbssocindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-discount", Order=23)]
        public List<ServiceDiscount> servicediscount {
            get {
                return this.servicediscountField;
            }
            set {
                this.servicediscountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("contract-start-date", DataType="date", Order=24)]
        public System.DateTime contractstartdate {
            get {
                return this.contractstartdateField;
            }
            set {
                this.contractstartdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool contractstartdateSpecified {
            get {
                return this.contractstartdateFieldSpecified;
            }
            set {
                this.contractstartdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("contract-end-date", DataType="date", Order=25)]
        public System.DateTime contractenddate {
            get {
                return this.contractenddateField;
            }
            set {
                this.contractenddateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool contractenddateSpecified {
            get {
                return this.contractenddateFieldSpecified;
            }
            set {
                this.contractenddateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("handset-activation-date", DataType="date", Order=26)]
        public System.DateTime handsetactivationdate {
            get {
                return this.handsetactivationdateField;
            }
            set {
                this.handsetactivationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool handsetactivationdateSpecified {
            get {
                return this.handsetactivationdateFieldSpecified;
            }
            set {
                this.handsetactivationdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=27)]
        public UpgradeData upgrade {
            get {
                return this.upgradeField;
            }
            set {
                this.upgradeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-change-req", Order=28)]
        public bool planchangereq {
            get {
                return this.planchangereqField;
            }
            set {
                this.planchangereqField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool planchangereqSpecified {
            get {
                return this.planchangereqFieldSpecified;
            }
            set {
                this.planchangereqFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("existing-committed-order", Order=29)]
        public YesNoType existingcommittedorder {
            get {
                return this.existingcommittedorderField;
            }
            set {
                this.existingcommittedorderField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool existingcommittedorderSpecified {
            get {
                return this.existingcommittedorderFieldSpecified;
            }
            set {
                this.existingcommittedorderFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option", Order=30)]
        public List<AddOnOptionType> option {
            get {
                return this.optionField;
            }
            set {
                this.optionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("data-allowances", Order=31)]
        public List<SubscriberDataallowances> dataallowances {
            get {
                return this.dataallowancesField;
            }
            set {
                this.dataallowancesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("eligible-check-error", Order=32)]
        public bool eligiblecheckerror {
            get {
                return this.eligiblecheckerrorField;
            }
            set {
                this.eligiblecheckerrorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eligiblecheckerrorSpecified {
            get {
                return this.eligiblecheckerrorFieldSpecified;
            }
            set {
                this.eligiblecheckerrorFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=33)]
        public RebateBogxInfoType rebateBogxInfo {
            get {
                return this.rebateBogxInfoField;
            }
            set {
                this.rebateBogxInfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("future-dated", Order=34)]
        public List<SubscriberFuturedated> futuredated {
            get {
                return this.futuredatedField;
            }
            set {
                this.futuredatedField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("mus-milestone-level", DataType="integer", Order=35)]
        public string musmilestonelevel {
            get {
                return this.musmilestonelevelField;
            }
            set {
                this.musmilestonelevelField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-id", Order=36)]
        public string subscriberid {
            get {
                return this.subscriberidField;
            }
            set {
                this.subscriberidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("loan-exist-ind", Order=37)]
        public bool loanexistind {
            get {
                return this.loanexistindField;
            }
            set {
                this.loanexistindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loanexistindSpecified {
            get {
                return this.loanexistindFieldSpecified;
            }
            set {
                this.loanexistindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("student-line-ind", Order=38)]
        public bool studentlineind {
            get {
                return this.studentlineindField;
            }
            set {
                this.studentlineindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool studentlineindSpecified {
            get {
                return this.studentlineindFieldSpecified;
            }
            set {
                this.studentlineindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Subscriber));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Subscriber object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Subscriber object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Subscriber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Subscriber obj, out System.Exception exception) {
            exception = null;
            obj = default(Subscriber);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Subscriber obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Subscriber Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Subscriber)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Subscriber object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Subscriber object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Subscriber object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Subscriber obj, out System.Exception exception) {
            exception = null;
            obj = default(Subscriber);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Subscriber obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Subscriber obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Subscriber LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Subscriber LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum PlanType {
        
        /// <remarks/>
        fam,
        
        /// <remarks/>
        ind,
        
        /// <remarks/>
        mbp,
        
        /// <remarks/>
        pgo,
        
        /// <remarks/>
        all,
        
        /// <remarks/>
        dly,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class BundleInfo {
        
        private string bundletypeField;
        
        private List<BundleGroup> bundlegroupField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// BundleInfo class constructor
        /// </summary>
        public BundleInfo() {
            this.bundlegroupField = new List<BundleGroup>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bundle-type", Order=0)]
        public string bundletype {
            get {
                return this.bundletypeField;
            }
            set {
                this.bundletypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bundle-group", Order=1)]
        public List<BundleGroup> bundlegroup {
            get {
                return this.bundlegroupField;
            }
            set {
                this.bundlegroupField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BundleInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BundleInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BundleInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BundleInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BundleInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(BundleInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BundleInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BundleInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BundleInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BundleInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BundleInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BundleInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BundleInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(BundleInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BundleInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BundleInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BundleInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BundleInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class BundleGroup {
        
        private uint groupnumberField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("group-number", Order=0)]
        public uint groupnumber {
            get {
                return this.groupnumberField;
            }
            set {
                this.groupnumberField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BundleGroup));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BundleGroup object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BundleGroup object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BundleGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BundleGroup obj, out System.Exception exception) {
            exception = null;
            obj = default(BundleGroup);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BundleGroup obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BundleGroup Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BundleGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BundleGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BundleGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BundleGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BundleGroup obj, out System.Exception exception) {
            exception = null;
            obj = default(BundleGroup);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BundleGroup obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BundleGroup obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BundleGroup LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BundleGroup LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum PTNStatus {
        
        /// <remarks/>
        ACTIVE,
        
        /// <remarks/>
        RESERVED,
        
        /// <remarks/>
        CANCELLED,
        
        /// <remarks/>
        SUSPENDED,
        
        /// <remarks/>
        UNKNOWN,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum YesNoType {
        
        /// <remarks/>
        Y,
        
        /// <remarks/>
        N,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ServiceDiscount {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ServiceDiscount class constructor
        /// </summary>
        public ServiceDiscount() {
            this.itemsElementNameField = new List<ItemsChoiceType>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discount-monthly-price", typeof(decimal), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("discount-option-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("discount-option-name", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("discount-option-price", typeof(decimal), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("discount-plan-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("discount-plan-name", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceDiscount));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceDiscount object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceDiscount object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceDiscount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceDiscount obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceDiscount);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceDiscount obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceDiscount Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceDiscount)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceDiscount object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceDiscount object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceDiscount object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceDiscount obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceDiscount);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceDiscount obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceDiscount obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceDiscount LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceDiscount LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("discount-monthly-price")]
        discountmonthlyprice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("discount-option-id")]
        discountoptionid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("discount-option-name")]
        discountoptionname,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("discount-option-price")]
        discountoptionprice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("discount-plan-id")]
        discountplanid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("discount-plan-name")]
        discountplanname,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class UpgradeData {
        
        private bool eligibleField;
        
        private System.DateTime eligibledateField;
        
        private bool eligibledateFieldSpecified;
        
        private string eligibilitycodeField;
        
        private string currenttierField;
        
        private List<EligibleTierData> eligibletierField;
        
        private List<CurrentEligibilityDesc> currenteligibilitydescField;
        
        private List<SubscriberDevicePricing> subscriberdevicepricingField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// UpgradeData class constructor
        /// </summary>
        public UpgradeData() {
            this.subscriberdevicepricingField = new List<SubscriberDevicePricing>();
            this.currenteligibilitydescField = new List<CurrentEligibilityDesc>();
            this.eligibletierField = new List<EligibleTierData>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool eligible {
            get {
                return this.eligibleField;
            }
            set {
                this.eligibleField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("eligible-date", DataType="date", Order=1)]
        public System.DateTime eligibledate {
            get {
                return this.eligibledateField;
            }
            set {
                this.eligibledateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool eligibledateSpecified {
            get {
                return this.eligibledateFieldSpecified;
            }
            set {
                this.eligibledateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("eligibility-code", Order=2)]
        public string eligibilitycode {
            get {
                return this.eligibilitycodeField;
            }
            set {
                this.eligibilitycodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("current-tier", DataType="integer", Order=3)]
        public string currenttier {
            get {
                return this.currenttierField;
            }
            set {
                this.currenttierField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("eligible-tier", Order=4)]
        public List<EligibleTierData> eligibletier {
            get {
                return this.eligibletierField;
            }
            set {
                this.eligibletierField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("current-eligibility-desc", Order=5)]
        public List<CurrentEligibilityDesc> currenteligibilitydesc {
            get {
                return this.currenteligibilitydescField;
            }
            set {
                this.currenteligibilitydescField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-device-pricing", Order=6)]
        public List<SubscriberDevicePricing> subscriberdevicepricing {
            get {
                return this.subscriberdevicepricingField;
            }
            set {
                this.subscriberdevicepricingField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(UpgradeData));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current UpgradeData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an UpgradeData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output UpgradeData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out UpgradeData obj, out System.Exception exception) {
            exception = null;
            obj = default(UpgradeData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out UpgradeData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static UpgradeData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((UpgradeData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current UpgradeData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an UpgradeData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output UpgradeData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out UpgradeData obj, out System.Exception exception) {
            exception = null;
            obj = default(UpgradeData);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out UpgradeData obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out UpgradeData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static UpgradeData LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static UpgradeData LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class EligibleTierData {
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private string tierlevelField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date", Order=0)]
        public System.DateTime date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("tier-level", DataType="integer", Order=1)]
        public string tierlevel {
            get {
                return this.tierlevelField;
            }
            set {
                this.tierlevelField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(EligibleTierData));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EligibleTierData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an EligibleTierData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output EligibleTierData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out EligibleTierData obj, out System.Exception exception) {
            exception = null;
            obj = default(EligibleTierData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out EligibleTierData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static EligibleTierData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((EligibleTierData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current EligibleTierData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an EligibleTierData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EligibleTierData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out EligibleTierData obj, out System.Exception exception) {
            exception = null;
            obj = default(EligibleTierData);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out EligibleTierData obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out EligibleTierData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static EligibleTierData LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static EligibleTierData LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class CurrentEligibilityDesc {
        
        private string eligibilitydescField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("eligibility-desc", Order=0)]
        public string eligibilitydesc {
            get {
                return this.eligibilitydescField;
            }
            set {
                this.eligibilitydescField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CurrentEligibilityDesc));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CurrentEligibilityDesc object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CurrentEligibilityDesc object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CurrentEligibilityDesc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CurrentEligibilityDesc obj, out System.Exception exception) {
            exception = null;
            obj = default(CurrentEligibilityDesc);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CurrentEligibilityDesc obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CurrentEligibilityDesc Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CurrentEligibilityDesc)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CurrentEligibilityDesc object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CurrentEligibilityDesc object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CurrentEligibilityDesc object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CurrentEligibilityDesc obj, out System.Exception exception) {
            exception = null;
            obj = default(CurrentEligibilityDesc);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CurrentEligibilityDesc obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CurrentEligibilityDesc obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CurrentEligibilityDesc LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CurrentEligibilityDesc LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class SubscriberDevicePricing {
        
        private string modelidField;
        
        private decimal modelpriceField;
        
        private byte contracttermField;
        
        private bool contracttermFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("model-id", Order=0)]
        public string modelid {
            get {
                return this.modelidField;
            }
            set {
                this.modelidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("model-price", Order=1)]
        public decimal modelprice {
            get {
                return this.modelpriceField;
            }
            set {
                this.modelpriceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("contract-term", Order=2)]
        public byte contractterm {
            get {
                return this.contracttermField;
            }
            set {
                this.contracttermField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool contracttermSpecified {
            get {
                return this.contracttermFieldSpecified;
            }
            set {
                this.contracttermFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubscriberDevicePricing));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubscriberDevicePricing object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubscriberDevicePricing object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubscriberDevicePricing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubscriberDevicePricing obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberDevicePricing);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubscriberDevicePricing obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubscriberDevicePricing Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubscriberDevicePricing)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubscriberDevicePricing object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubscriberDevicePricing object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubscriberDevicePricing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SubscriberDevicePricing obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberDevicePricing);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberDevicePricing obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberDevicePricing obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubscriberDevicePricing LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SubscriberDevicePricing LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class AddOnOptionType {
        
        private string optionidField;
        
        private string optionnameField;
        
        private string optioncodeField;
        
        private string optiondescField;
        
        private string optiondetailField;
        
        private string optionlearnmoreField;
        
        private string productdisclosureField;
        
        private string ivrsocdescField;
        
        private bool servicemanagementindField;
        
        private bool servicemanagementindFieldSpecified;
        
        private bool banleveloptionField;
        
        private bool banleveloptionFieldSpecified;
        
        private bool cellindField;
        
        private bool cellindFieldSpecified;
        
        private bool dcindField;
        
        private bool dcindFieldSpecified;
        
        private string pdsindField;
        
        private string cdmapdsindField;
        
        private List<object> itemsField;
        
        private decimal onetimechargeField;
        
        private bool onetimechargeFieldSpecified;
        
        private string maxltssubscribersField;
        
        private string sharinggroupidField;
        
        private string optionpriorityField;
        
        private string sequencenumberField;
        
        private YesNoType mutuallyexclusiveField;
        
        private bool mutuallyexclusiveFieldSpecified;
        
        private string contracttermField;
        
        private uint allowednumberrangesField;
        
        private bool allowednumberrangesFieldSpecified;
        
        private uint numberrangesizeField;
        
        private bool numberrangesizeFieldSpecified;
        
        private List<ProductType> productdefinitionField;
        
        private YesNoType corpgovreqField;
        
        private bool corpgovreqFieldSpecified;
        
        private YesNoType optionequivalentField;
        
        private bool optionequivalentFieldSpecified;
        
        private string sourceoptionField;
        
        private string affinitysoclinkField;
        
        private AffinityType affinityField;
        
        private BundleInfo bundleinfoField;
        
        private string reqprimarybundleField;
        
        private string maxsecbundleField;
        
        private string optioncategoryField;
        
        private YesNoType categoryrequiredField;
        
        private bool categoryrequiredFieldSpecified;
        
        private bool airavemrcField;
        
        private bool airavemrcFieldSpecified;
        
        private List<FeatureType> featureField;
        
        private PrepaidSocAttributeInfoType prepaidsocattributeinfoField;
        
        private string soctypeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AddOnOptionType class constructor
        /// </summary>
        public AddOnOptionType() {
            this.prepaidsocattributeinfoField = new PrepaidSocAttributeInfoType();
            this.featureField = new List<FeatureType>();
            this.bundleinfoField = new BundleInfo();
            this.affinityField = new AffinityType();
            this.productdefinitionField = new List<ProductType>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-id", Order=0)]
        public string optionid {
            get {
                return this.optionidField;
            }
            set {
                this.optionidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-name", Order=1)]
        public string optionname {
            get {
                return this.optionnameField;
            }
            set {
                this.optionnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-code", Order=2)]
        public string optioncode {
            get {
                return this.optioncodeField;
            }
            set {
                this.optioncodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-desc", Order=3)]
        public string optiondesc {
            get {
                return this.optiondescField;
            }
            set {
                this.optiondescField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-detail", Order=4)]
        public string optiondetail {
            get {
                return this.optiondetailField;
            }
            set {
                this.optiondetailField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-learn-more", Order=5)]
        public string optionlearnmore {
            get {
                return this.optionlearnmoreField;
            }
            set {
                this.optionlearnmoreField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("product-disclosure", Order=6)]
        public string productdisclosure {
            get {
                return this.productdisclosureField;
            }
            set {
                this.productdisclosureField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ivr-soc-desc", Order=7)]
        public string ivrsocdesc {
            get {
                return this.ivrsocdescField;
            }
            set {
                this.ivrsocdescField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-management-ind", Order=8)]
        public bool servicemanagementind {
            get {
                return this.servicemanagementindField;
            }
            set {
                this.servicemanagementindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool servicemanagementindSpecified {
            get {
                return this.servicemanagementindFieldSpecified;
            }
            set {
                this.servicemanagementindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ban-level-option", Order=9)]
        public bool banleveloption {
            get {
                return this.banleveloptionField;
            }
            set {
                this.banleveloptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool banleveloptionSpecified {
            get {
                return this.banleveloptionFieldSpecified;
            }
            set {
                this.banleveloptionFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cell-ind", Order=10)]
        public bool cellind {
            get {
                return this.cellindField;
            }
            set {
                this.cellindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cellindSpecified {
            get {
                return this.cellindFieldSpecified;
            }
            set {
                this.cellindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("dc-ind", Order=11)]
        public bool dcind {
            get {
                return this.dcindField;
            }
            set {
                this.dcindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dcindSpecified {
            get {
                return this.dcindFieldSpecified;
            }
            set {
                this.dcindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pds-ind", Order=12)]
        public string pdsind {
            get {
                return this.pdsindField;
            }
            set {
                this.pdsindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cdma-pds-ind", Order=13)]
        public string cdmapdsind {
            get {
                return this.cdmapdsindField;
            }
            set {
                this.cdmapdsindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("lts-monthly-price", typeof(AddOnOptionTypeLtsmonthlyprice), Order=14)]
        [System.Xml.Serialization.XmlElementAttribute("option-price", typeof(string), Order=14)]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("one-time-charge", Order=15)]
        public decimal onetimecharge {
            get {
                return this.onetimechargeField;
            }
            set {
                this.onetimechargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool onetimechargeSpecified {
            get {
                return this.onetimechargeFieldSpecified;
            }
            set {
                this.onetimechargeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("max-lts-subscribers", DataType="positiveInteger", Order=16)]
        public string maxltssubscribers {
            get {
                return this.maxltssubscribersField;
            }
            set {
                this.maxltssubscribersField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sharing-group-id", Order=17)]
        public string sharinggroupid {
            get {
                return this.sharinggroupidField;
            }
            set {
                this.sharinggroupidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-priority", DataType="nonNegativeInteger", Order=18)]
        public string optionpriority {
            get {
                return this.optionpriorityField;
            }
            set {
                this.optionpriorityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sequence-number", DataType="positiveInteger", Order=19)]
        public string sequencenumber {
            get {
                return this.sequencenumberField;
            }
            set {
                this.sequencenumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("mutually-exclusive", Order=20)]
        public YesNoType mutuallyexclusive {
            get {
                return this.mutuallyexclusiveField;
            }
            set {
                this.mutuallyexclusiveField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mutuallyexclusiveSpecified {
            get {
                return this.mutuallyexclusiveFieldSpecified;
            }
            set {
                this.mutuallyexclusiveFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("contract-term", Order=21)]
        public string contractterm {
            get {
                return this.contracttermField;
            }
            set {
                this.contracttermField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("allowed-number-ranges", Order=22)]
        public uint allowednumberranges {
            get {
                return this.allowednumberrangesField;
            }
            set {
                this.allowednumberrangesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool allowednumberrangesSpecified {
            get {
                return this.allowednumberrangesFieldSpecified;
            }
            set {
                this.allowednumberrangesFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("number-range-size", Order=23)]
        public uint numberrangesize {
            get {
                return this.numberrangesizeField;
            }
            set {
                this.numberrangesizeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberrangesizeSpecified {
            get {
                return this.numberrangesizeFieldSpecified;
            }
            set {
                this.numberrangesizeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("product-definition", Order=24)]
        [System.Xml.Serialization.XmlArrayItemAttribute("product-indicator", typeof(ProductType), IsNullable=false)]
        public List<ProductType> productdefinition {
            get {
                return this.productdefinitionField;
            }
            set {
                this.productdefinitionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-req", Order=25)]
        public YesNoType corpgovreq {
            get {
                return this.corpgovreqField;
            }
            set {
                this.corpgovreqField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool corpgovreqSpecified {
            get {
                return this.corpgovreqFieldSpecified;
            }
            set {
                this.corpgovreqFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-equivalent", Order=26)]
        public YesNoType optionequivalent {
            get {
                return this.optionequivalentField;
            }
            set {
                this.optionequivalentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool optionequivalentSpecified {
            get {
                return this.optionequivalentFieldSpecified;
            }
            set {
                this.optionequivalentFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("source-option", Order=27)]
        public string sourceoption {
            get {
                return this.sourceoptionField;
            }
            set {
                this.sourceoptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("affinity-soc-link", Order=28)]
        public string affinitysoclink {
            get {
                return this.affinitysoclinkField;
            }
            set {
                this.affinitysoclinkField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=29)]
        public AffinityType affinity {
            get {
                return this.affinityField;
            }
            set {
                this.affinityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bundle-info", Order=30)]
        public BundleInfo bundleinfo {
            get {
                return this.bundleinfoField;
            }
            set {
                this.bundleinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("req-primary-bundle", Order=31)]
        public string reqprimarybundle {
            get {
                return this.reqprimarybundleField;
            }
            set {
                this.reqprimarybundleField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("max-sec-bundle", DataType="positiveInteger", Order=32)]
        public string maxsecbundle {
            get {
                return this.maxsecbundleField;
            }
            set {
                this.maxsecbundleField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-category", Order=33)]
        public string optioncategory {
            get {
                return this.optioncategoryField;
            }
            set {
                this.optioncategoryField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("category-required", Order=34)]
        public YesNoType categoryrequired {
            get {
                return this.categoryrequiredField;
            }
            set {
                this.categoryrequiredField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool categoryrequiredSpecified {
            get {
                return this.categoryrequiredFieldSpecified;
            }
            set {
                this.categoryrequiredFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("airave-mrc", Order=35)]
        public bool airavemrc {
            get {
                return this.airavemrcField;
            }
            set {
                this.airavemrcField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool airavemrcSpecified {
            get {
                return this.airavemrcFieldSpecified;
            }
            set {
                this.airavemrcFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature", Order=36)]
        public List<FeatureType> feature {
            get {
                return this.featureField;
            }
            set {
                this.featureField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("prepaid-soc-attribute-info", Order=37)]
        public PrepaidSocAttributeInfoType prepaidsocattributeinfo {
            get {
                return this.prepaidsocattributeinfoField;
            }
            set {
                this.prepaidsocattributeinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("soc-type", Order=38)]
        public string soctype {
            get {
                return this.soctypeField;
            }
            set {
                this.soctypeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddOnOptionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddOnOptionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddOnOptionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddOnOptionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddOnOptionType obj, out System.Exception exception) {
            exception = null;
            obj = default(AddOnOptionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddOnOptionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddOnOptionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddOnOptionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddOnOptionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddOnOptionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddOnOptionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AddOnOptionType obj, out System.Exception exception) {
            exception = null;
            obj = default(AddOnOptionType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddOnOptionType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AddOnOptionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddOnOptionType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AddOnOptionType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class AddOnOptionTypeLtsmonthlyprice {
        
        private string rankField;
        
        private double valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="positiveInteger")]
        public string rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AddOnOptionTypeLtsmonthlyprice));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AddOnOptionTypeLtsmonthlyprice object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AddOnOptionTypeLtsmonthlyprice object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AddOnOptionTypeLtsmonthlyprice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AddOnOptionTypeLtsmonthlyprice obj, out System.Exception exception) {
            exception = null;
            obj = default(AddOnOptionTypeLtsmonthlyprice);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AddOnOptionTypeLtsmonthlyprice obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AddOnOptionTypeLtsmonthlyprice Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AddOnOptionTypeLtsmonthlyprice)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AddOnOptionTypeLtsmonthlyprice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AddOnOptionTypeLtsmonthlyprice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AddOnOptionTypeLtsmonthlyprice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AddOnOptionTypeLtsmonthlyprice obj, out System.Exception exception) {
            exception = null;
            obj = default(AddOnOptionTypeLtsmonthlyprice);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AddOnOptionTypeLtsmonthlyprice obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AddOnOptionTypeLtsmonthlyprice obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AddOnOptionTypeLtsmonthlyprice LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AddOnOptionTypeLtsmonthlyprice LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum ProductType {
        
        /// <remarks/>
        LTS,
        
        /// <remarks/>
        M2H,
        
        /// <remarks/>
        M2O,
        
        /// <remarks/>
        AFR,
        
        /// <remarks/>
        AFB,
        
        /// <remarks/>
        AIR,
        
        /// <remarks/>
        HPP,
        
        /// <remarks/>
        HPR,
        
        /// <remarks/>
        HPB,
        
        /// <remarks/>
        HPC,
        
        /// <remarks/>
        WEL,
        
        /// <remarks/>
        VBS,
        
        /// <remarks/>
        ACV,
        
        /// <remarks/>
        HP1,
        
        /// <remarks/>
        HP2,
        
        /// <remarks/>
        WMX,
        
        /// <remarks/>
        PBD,
        
        /// <remarks/>
        SBD,
        
        /// <remarks/>
        ATA,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4GC")]
        Item4GC,
        
        /// <remarks/>
        UNI,
        
        /// <remarks/>
        VCF,
        
        /// <remarks/>
        BSF,
        
        /// <remarks/>
        INS,
        
        /// <remarks/>
        TEP,
        
        /// <remarks/>
        ESR,
        
        /// <remarks/>
        EIP,
        
        /// <remarks/>
        AAP,
        
        /// <remarks/>
        ADI,
        
        /// <remarks/>
        ADS,
        
        /// <remarks/>
        MBB,
        
        /// <remarks/>
        PRD,
        
        /// <remarks/>
        LDS,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class AffinityType {
        
        private string affinitynameField;
        
        private List<AffinityAttributeType> affinityattributeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AffinityType class constructor
        /// </summary>
        public AffinityType() {
            this.affinityattributeField = new List<AffinityAttributeType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("affinity-name", Order=0)]
        public string affinityname {
            get {
                return this.affinitynameField;
            }
            set {
                this.affinitynameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("affinity-attribute", Order=1)]
        public List<AffinityAttributeType> affinityattribute {
            get {
                return this.affinityattributeField;
            }
            set {
                this.affinityattributeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AffinityType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AffinityType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AffinityType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AffinityType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AffinityType obj, out System.Exception exception) {
            exception = null;
            obj = default(AffinityType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AffinityType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AffinityType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AffinityType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AffinityType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AffinityType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AffinityType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AffinityType obj, out System.Exception exception) {
            exception = null;
            obj = default(AffinityType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AffinityType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AffinityType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AffinityType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AffinityType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class AffinityAttributeType {
        
        private string nameField;
        
        private string codeField;
        
        private string typeField;
        
        private string lengthField;
        
        private YesNoType requiredField;
        
        private bool requiredFieldSpecified;
        
        private string maskField;
        
        private string patternField;
        
        private string valueField;
        
        private YesNoType editableField;
        
        private bool editableFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="integer", Order=3)]
        public string length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public YesNoType required {
            get {
                return this.requiredField;
            }
            set {
                this.requiredField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool requiredSpecified {
            get {
                return this.requiredFieldSpecified;
            }
            set {
                this.requiredFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string mask {
            get {
                return this.maskField;
            }
            set {
                this.maskField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string pattern {
            get {
                return this.patternField;
            }
            set {
                this.patternField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public YesNoType editable {
            get {
                return this.editableField;
            }
            set {
                this.editableField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool editableSpecified {
            get {
                return this.editableFieldSpecified;
            }
            set {
                this.editableFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AffinityAttributeType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AffinityAttributeType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AffinityAttributeType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AffinityAttributeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AffinityAttributeType obj, out System.Exception exception) {
            exception = null;
            obj = default(AffinityAttributeType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AffinityAttributeType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AffinityAttributeType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AffinityAttributeType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AffinityAttributeType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AffinityAttributeType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AffinityAttributeType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AffinityAttributeType obj, out System.Exception exception) {
            exception = null;
            obj = default(AffinityAttributeType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AffinityAttributeType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AffinityAttributeType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AffinityAttributeType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AffinityAttributeType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class FeatureType {
        
        private string featureidField;
        
        private string featurecodeField;
        
        private string featurenameField;
        
        private string featuredescField;
        
        private uint allowednumberrangesField;
        
        private bool allowednumberrangesFieldSpecified;
        
        private uint numberrangesizeField;
        
        private bool numberrangesizeFieldSpecified;
        
        private bool msisdnindField;
        
        private bool msisdnindFieldSpecified;
        
        private System.DateTime effectivedateField;
        
        private bool effectivedateFieldSpecified;
        
        private System.DateTime expirationdateField;
        
        private bool expirationdateFieldSpecified;
        
        private List<ProductType> productdefinitionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// FeatureType class constructor
        /// </summary>
        public FeatureType() {
            this.productdefinitionField = new List<ProductType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature-id", Order=0)]
        public string featureid {
            get {
                return this.featureidField;
            }
            set {
                this.featureidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature-code", Order=1)]
        public string featurecode {
            get {
                return this.featurecodeField;
            }
            set {
                this.featurecodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature-name", Order=2)]
        public string featurename {
            get {
                return this.featurenameField;
            }
            set {
                this.featurenameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature-desc", Order=3)]
        public string featuredesc {
            get {
                return this.featuredescField;
            }
            set {
                this.featuredescField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("allowed-number-ranges", Order=4)]
        public uint allowednumberranges {
            get {
                return this.allowednumberrangesField;
            }
            set {
                this.allowednumberrangesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool allowednumberrangesSpecified {
            get {
                return this.allowednumberrangesFieldSpecified;
            }
            set {
                this.allowednumberrangesFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("number-range-size", Order=5)]
        public uint numberrangesize {
            get {
                return this.numberrangesizeField;
            }
            set {
                this.numberrangesizeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberrangesizeSpecified {
            get {
                return this.numberrangesizeFieldSpecified;
            }
            set {
                this.numberrangesizeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("msisdn-ind", Order=6)]
        public bool msisdnind {
            get {
                return this.msisdnindField;
            }
            set {
                this.msisdnindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool msisdnindSpecified {
            get {
                return this.msisdnindFieldSpecified;
            }
            set {
                this.msisdnindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("effective-date", Order=7)]
        public System.DateTime effectivedate {
            get {
                return this.effectivedateField;
            }
            set {
                this.effectivedateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool effectivedateSpecified {
            get {
                return this.effectivedateFieldSpecified;
            }
            set {
                this.effectivedateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("expiration-date", Order=8)]
        public System.DateTime expirationdate {
            get {
                return this.expirationdateField;
            }
            set {
                this.expirationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationdateSpecified {
            get {
                return this.expirationdateFieldSpecified;
            }
            set {
                this.expirationdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("product-definition", Order=9)]
        [System.Xml.Serialization.XmlArrayItemAttribute("product-indicator", typeof(ProductType), IsNullable=false)]
        public List<ProductType> productdefinition {
            get {
                return this.productdefinitionField;
            }
            set {
                this.productdefinitionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FeatureType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FeatureType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FeatureType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FeatureType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FeatureType obj, out System.Exception exception) {
            exception = null;
            obj = default(FeatureType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FeatureType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FeatureType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FeatureType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FeatureType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FeatureType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FeatureType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out FeatureType obj, out System.Exception exception) {
            exception = null;
            obj = default(FeatureType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FeatureType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out FeatureType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FeatureType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static FeatureType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class PrepaidSocAttributeInfoType {
        
        private YesNoType socstackableindField;
        
        private bool socstackableindFieldSpecified;
        
        private YesNoType socrenewableindField;
        
        private bool socrenewableindFieldSpecified;
        
        private YesNoType socdropindField;
        
        private bool socdropindFieldSpecified;
        
        private YesNoType socvxlindField;
        
        private bool socvxlindFieldSpecified;
        
        private string socpacktypeField;
        
        private string durationField;
        
        private UnitOfDuration unitofdurationField;
        
        private bool unitofdurationFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("soc-stackable-ind", Order=0)]
        public YesNoType socstackableind {
            get {
                return this.socstackableindField;
            }
            set {
                this.socstackableindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool socstackableindSpecified {
            get {
                return this.socstackableindFieldSpecified;
            }
            set {
                this.socstackableindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("soc-renewable-ind", Order=1)]
        public YesNoType socrenewableind {
            get {
                return this.socrenewableindField;
            }
            set {
                this.socrenewableindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool socrenewableindSpecified {
            get {
                return this.socrenewableindFieldSpecified;
            }
            set {
                this.socrenewableindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("soc-drop-ind", Order=2)]
        public YesNoType socdropind {
            get {
                return this.socdropindField;
            }
            set {
                this.socdropindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool socdropindSpecified {
            get {
                return this.socdropindFieldSpecified;
            }
            set {
                this.socdropindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("soc-vxl-ind", Order=3)]
        public YesNoType socvxlind {
            get {
                return this.socvxlindField;
            }
            set {
                this.socvxlindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool socvxlindSpecified {
            get {
                return this.socvxlindFieldSpecified;
            }
            set {
                this.socvxlindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("soc-pack-type", Order=4)]
        public string socpacktype {
            get {
                return this.socpacktypeField;
            }
            set {
                this.socpacktypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="positiveInteger", Order=5)]
        public string duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("unit-of-duration", Order=6)]
        public UnitOfDuration unitofduration {
            get {
                return this.unitofdurationField;
            }
            set {
                this.unitofdurationField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool unitofdurationSpecified {
            get {
                return this.unitofdurationFieldSpecified;
            }
            set {
                this.unitofdurationFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PrepaidSocAttributeInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PrepaidSocAttributeInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PrepaidSocAttributeInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PrepaidSocAttributeInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PrepaidSocAttributeInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(PrepaidSocAttributeInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PrepaidSocAttributeInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PrepaidSocAttributeInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PrepaidSocAttributeInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PrepaidSocAttributeInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PrepaidSocAttributeInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PrepaidSocAttributeInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PrepaidSocAttributeInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(PrepaidSocAttributeInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PrepaidSocAttributeInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PrepaidSocAttributeInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PrepaidSocAttributeInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PrepaidSocAttributeInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum UnitOfDuration {
        
        /// <remarks/>
        M,
        
        /// <remarks/>
        D,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class SubscriberDataallowances {
        
        private string dataallowancetypeField;
        
        private SubscriberDataallowancesDataallowance dataallowanceField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SubscriberDataallowances class constructor
        /// </summary>
        public SubscriberDataallowances() {
            this.dataallowanceField = new SubscriberDataallowancesDataallowance();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("data-allowance-type", Order=0)]
        public string dataallowancetype {
            get {
                return this.dataallowancetypeField;
            }
            set {
                this.dataallowancetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("data-allowance", Order=1)]
        public SubscriberDataallowancesDataallowance dataallowance {
            get {
                return this.dataallowanceField;
            }
            set {
                this.dataallowanceField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubscriberDataallowances));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubscriberDataallowances object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubscriberDataallowances object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubscriberDataallowances object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubscriberDataallowances obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberDataallowances);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubscriberDataallowances obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubscriberDataallowances Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubscriberDataallowances)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubscriberDataallowances object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubscriberDataallowances object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubscriberDataallowances object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SubscriberDataallowances obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberDataallowances);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberDataallowances obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberDataallowances obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubscriberDataallowances LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SubscriberDataallowances LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class SubscriberDataallowancesDataallowance {
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubscriberDataallowancesDataallowance));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubscriberDataallowancesDataallowance object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubscriberDataallowancesDataallowance object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubscriberDataallowancesDataallowance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubscriberDataallowancesDataallowance obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberDataallowancesDataallowance);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubscriberDataallowancesDataallowance obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubscriberDataallowancesDataallowance Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubscriberDataallowancesDataallowance)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubscriberDataallowancesDataallowance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubscriberDataallowancesDataallowance object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubscriberDataallowancesDataallowance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SubscriberDataallowancesDataallowance obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberDataallowancesDataallowance);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberDataallowancesDataallowance obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberDataallowancesDataallowance obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubscriberDataallowancesDataallowance LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SubscriberDataallowancesDataallowance LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class RebateBogxInfoType {
        
        private List<RebateBogxPlanInfoType> rebateBogxPlanInfoListField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// RebateBogxInfoType class constructor
        /// </summary>
        public RebateBogxInfoType() {
            this.rebateBogxPlanInfoListField = new List<RebateBogxPlanInfoType>();
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("rebateBogxPlanInfo", IsNullable=false)]
        public List<RebateBogxPlanInfoType> rebateBogxPlanInfoList {
            get {
                return this.rebateBogxPlanInfoListField;
            }
            set {
                this.rebateBogxPlanInfoListField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RebateBogxInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RebateBogxInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RebateBogxInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RebateBogxInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RebateBogxInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(RebateBogxInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RebateBogxInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RebateBogxInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RebateBogxInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current RebateBogxInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an RebateBogxInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RebateBogxInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out RebateBogxInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(RebateBogxInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out RebateBogxInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out RebateBogxInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static RebateBogxInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static RebateBogxInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class RebateBogxPlanInfoType {
        
        private string offerCodeField;
        
        private string offerDescriptionField;
        
        private System.DateTime effectiveDateField;
        
        private System.DateTime expirationDateField;
        
        private bool expirationDateFieldSpecified;
        
        private int buyQuantityField;
        
        private int getQuantityField;
        
        private string offerEquipmentTypeField;
        
        private bool ignoreUfpIndField;
        
        private int limitField;
        
        private List<EquipmentGroupInfoType> equipmentGroupInfoListField;
        
        private bool flexibleMixMatchIndField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// RebateBogxPlanInfoType class constructor
        /// </summary>
        public RebateBogxPlanInfoType() {
            this.equipmentGroupInfoListField = new List<EquipmentGroupInfoType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string offerCode {
            get {
                return this.offerCodeField;
            }
            set {
                this.offerCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string offerDescription {
            get {
                return this.offerDescriptionField;
            }
            set {
                this.offerDescriptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date", Order=2)]
        public System.DateTime effectiveDate {
            get {
                return this.effectiveDateField;
            }
            set {
                this.effectiveDateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(DataType="date", Order=3)]
        public System.DateTime expirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationDateSpecified {
            get {
                return this.expirationDateFieldSpecified;
            }
            set {
                this.expirationDateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int buyQuantity {
            get {
                return this.buyQuantityField;
            }
            set {
                this.buyQuantityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public int getQuantity {
            get {
                return this.getQuantityField;
            }
            set {
                this.getQuantityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string offerEquipmentType {
            get {
                return this.offerEquipmentTypeField;
            }
            set {
                this.offerEquipmentTypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public bool ignoreUfpInd {
            get {
                return this.ignoreUfpIndField;
            }
            set {
                this.ignoreUfpIndField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public int limit {
            get {
                return this.limitField;
            }
            set {
                this.limitField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=9)]
        [System.Xml.Serialization.XmlArrayItemAttribute("equipmentGroupInfo", IsNullable=false)]
        public List<EquipmentGroupInfoType> equipmentGroupInfoList {
            get {
                return this.equipmentGroupInfoListField;
            }
            set {
                this.equipmentGroupInfoListField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public bool flexibleMixMatchInd {
            get {
                return this.flexibleMixMatchIndField;
            }
            set {
                this.flexibleMixMatchIndField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(RebateBogxPlanInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current RebateBogxPlanInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an RebateBogxPlanInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output RebateBogxPlanInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out RebateBogxPlanInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(RebateBogxPlanInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out RebateBogxPlanInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static RebateBogxPlanInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((RebateBogxPlanInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current RebateBogxPlanInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an RebateBogxPlanInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output RebateBogxPlanInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out RebateBogxPlanInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(RebateBogxPlanInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out RebateBogxPlanInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out RebateBogxPlanInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static RebateBogxPlanInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static RebateBogxPlanInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class EquipmentGroupInfoType {
        
        private string groupDescriptionField;
        
        private string groupIdField;
        
        private List<ItemInfoType> itemInfoListField;
        
        private string actionField;
        
        private int quantityField;
        
        private bool quantityFieldSpecified;
        
        private string offerLineCodeField;
        
        private decimal priceField;
        
        private decimal additionalDiscountField;
        
        private int commitmentTermField;
        
        private string subGroupField;
        
        private int subGroupQuantityField;
        
        private bool subGroupQuantityFieldSpecified;
        
        private decimal buyPriceField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// EquipmentGroupInfoType class constructor
        /// </summary>
        public EquipmentGroupInfoType() {
            this.itemInfoListField = new List<ItemInfoType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string groupDescription {
            get {
                return this.groupDescriptionField;
            }
            set {
                this.groupDescriptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string groupId {
            get {
                return this.groupIdField;
            }
            set {
                this.groupIdField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("itemInfo", IsNullable=false)]
        public List<ItemInfoType> itemInfoList {
            get {
                return this.itemInfoListField;
            }
            set {
                this.itemInfoListField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public int quantity {
            get {
                return this.quantityField;
            }
            set {
                this.quantityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool quantitySpecified {
            get {
                return this.quantityFieldSpecified;
            }
            set {
                this.quantityFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string offerLineCode {
            get {
                return this.offerLineCodeField;
            }
            set {
                this.offerLineCodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public decimal price {
            get {
                return this.priceField;
            }
            set {
                this.priceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public decimal additionalDiscount {
            get {
                return this.additionalDiscountField;
            }
            set {
                this.additionalDiscountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public int commitmentTerm {
            get {
                return this.commitmentTermField;
            }
            set {
                this.commitmentTermField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string subGroup {
            get {
                return this.subGroupField;
            }
            set {
                this.subGroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public int subGroupQuantity {
            get {
                return this.subGroupQuantityField;
            }
            set {
                this.subGroupQuantityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool subGroupQuantitySpecified {
            get {
                return this.subGroupQuantityFieldSpecified;
            }
            set {
                this.subGroupQuantityFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public decimal buyPrice {
            get {
                return this.buyPriceField;
            }
            set {
                this.buyPriceField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(EquipmentGroupInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current EquipmentGroupInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an EquipmentGroupInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output EquipmentGroupInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out EquipmentGroupInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(EquipmentGroupInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out EquipmentGroupInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static EquipmentGroupInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((EquipmentGroupInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current EquipmentGroupInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an EquipmentGroupInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output EquipmentGroupInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out EquipmentGroupInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(EquipmentGroupInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out EquipmentGroupInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out EquipmentGroupInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static EquipmentGroupInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static EquipmentGroupInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ItemInfoType {
        
        private string itemIdField;
        
        private string itemDescriptionField;
        
        private decimal srpField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string itemId {
            get {
                return this.itemIdField;
            }
            set {
                this.itemIdField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string itemDescription {
            get {
                return this.itemDescriptionField;
            }
            set {
                this.itemDescriptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public decimal srp {
            get {
                return this.srpField;
            }
            set {
                this.srpField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ItemInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ItemInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ItemInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ItemInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ItemInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(ItemInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ItemInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ItemInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ItemInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ItemInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ItemInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ItemInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ItemInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(ItemInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ItemInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ItemInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ItemInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ItemInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class SubscriberFuturedated {
        
        private SubscriberFuturedatedPendingfuturedatedsoc pendingfuturedatedsocField;
        
        private bool pendingfuturedatedsocFieldSpecified;
        
        private string futuredatedsocnameField;
        
        private string futuredatedsoccodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("pending-future-dated-soc", Order=0)]
        public SubscriberFuturedatedPendingfuturedatedsoc pendingfuturedatedsoc {
            get {
                return this.pendingfuturedatedsocField;
            }
            set {
                this.pendingfuturedatedsocField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pendingfuturedatedsocSpecified {
            get {
                return this.pendingfuturedatedsocFieldSpecified;
            }
            set {
                this.pendingfuturedatedsocFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("future-dated-soc-name", Order=1)]
        public string futuredatedsocname {
            get {
                return this.futuredatedsocnameField;
            }
            set {
                this.futuredatedsocnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("future-dated-soc-code", Order=2)]
        public string futuredatedsoccode {
            get {
                return this.futuredatedsoccodeField;
            }
            set {
                this.futuredatedsoccodeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubscriberFuturedated));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubscriberFuturedated object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubscriberFuturedated object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubscriberFuturedated object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubscriberFuturedated obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberFuturedated);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubscriberFuturedated obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubscriberFuturedated Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubscriberFuturedated)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubscriberFuturedated object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubscriberFuturedated object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubscriberFuturedated object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SubscriberFuturedated obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberFuturedated);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberFuturedated obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberFuturedated obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubscriberFuturedated LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SubscriberFuturedated LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public enum SubscriberFuturedatedPendingfuturedatedsoc {
        
        /// <remarks/>
        Plan,
        
        /// <remarks/>
        Option,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class BillingName {
        
        private string firstnameField;
        
        private string lastbusinessnameField;
        
        private string additionaltitleField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("first-name", Order=0)]
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                this.firstnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("last-business-name", Order=1)]
        public string lastbusinessname {
            get {
                return this.lastbusinessnameField;
            }
            set {
                this.lastbusinessnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("additional-title", Order=2)]
        public string additionaltitle {
            get {
                return this.additionaltitleField;
            }
            set {
                this.additionaltitleField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BillingName));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BillingName object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BillingName object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BillingName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BillingName obj, out System.Exception exception) {
            exception = null;
            obj = default(BillingName);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BillingName obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BillingName Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BillingName)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BillingName object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BillingName object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BillingName object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BillingName obj, out System.Exception exception) {
            exception = null;
            obj = default(BillingName);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BillingName obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BillingName obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BillingName LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BillingName LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class BillingAddress {
        
        private string streetaddress1Field;
        
        private string streetaddress2Field;
        
        private string cityField;
        
        private string statecodeField;
        
        private string zipcodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("street-address-1", Order=0)]
        public string streetaddress1 {
            get {
                return this.streetaddress1Field;
            }
            set {
                this.streetaddress1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("street-address-2", Order=1)]
        public string streetaddress2 {
            get {
                return this.streetaddress2Field;
            }
            set {
                this.streetaddress2Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state-code", Order=3)]
        public string statecode {
            get {
                return this.statecodeField;
            }
            set {
                this.statecodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("zip-code", Order=4)]
        public string zipcode {
            get {
                return this.zipcodeField;
            }
            set {
                this.zipcodeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BillingAddress));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BillingAddress object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BillingAddress object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BillingAddress object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BillingAddress obj, out System.Exception exception) {
            exception = null;
            obj = default(BillingAddress);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BillingAddress obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BillingAddress Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BillingAddress)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BillingAddress object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BillingAddress object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BillingAddress object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BillingAddress obj, out System.Exception exception) {
            exception = null;
            obj = default(BillingAddress);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BillingAddress obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BillingAddress obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BillingAddress LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BillingAddress LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doActivation", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ActivationRequest {
        
        private OrderInfoType orderField;
        
        private System.DateTime orderdateField;
        
        private bool orderdateFieldSpecified;
        
        private ActivationRequestAccounttype accounttypeField;
        
        private ActivationRequestSecurityinfo securityinfoField;
        
        private ActivationRequestCreditcheckinfo creditcheckinfoField;
        
        private ActivationRequestCustomerinfo customerinfoField;
        
        private bool nextelfulfilledField;
        
        private bool nextelfulfilledFieldSpecified;
        
        private string secpinField;
        
        private bool rccpwantedField;
        
        private bool rccpwantedFieldSpecified;
        
        private string statusurlField;
        
        private string affiliatenameField;
        
        private string agentcodeField;
        
        private bool reservesubscriberField;
        
        private bool reservesubscriberFieldSpecified;
        
        private string orderreferraldcnumberField;
        
        private ShippingType shippingField;
        
        private WebToRetailOrderInfoType webtoretailorderinfoField;
        
        private CreditCard depositpaymentField;
        
        private EquipmentPaymentType equipmentpaymenttypeField;
        
        private bool equipmentpaymenttypeFieldSpecified;
        
        private CreditCard equipmentpaymentField;
        
        private decimal equipmentestimatedtaxField;
        
        private bool equipmentestimatedtaxFieldSpecified;
        
        private CreditCard rccppaymentField;
        
        private string saleschannelField;
        
        private ServiceType serviceField;
        
        private OrderShippingType ordershippingField;
        
        private bool defaultservicechangeField;
        
        private bool defaultservicechangeFieldSpecified;
        
        private object itemField;
        
        private bool summarybillField;
        
        private bool summarybillFieldSpecified;
        
        private string ebillemailField;
        
        private string emailaddressField;
        
        private List<ActivationRequestBuyback> buybackField;
        
        private List<SiebelOfferInfoType> siebelofferlistField;
        
        private bool accessoryonlyindField;
        
        private bool accessoryonlyindFieldSpecified;
        
        private string repidField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivationRequest class constructor
        /// </summary>
        public ActivationRequest() {
            this.siebelofferlistField = new List<SiebelOfferInfoType>();
            this.buybackField = new List<ActivationRequestBuyback>();
            this.ordershippingField = new OrderShippingType();
            this.serviceField = new ServiceType();
            this.rccppaymentField = new CreditCard();
            this.equipmentpaymentField = new CreditCard();
            this.depositpaymentField = new CreditCard();
            this.webtoretailorderinfoField = new WebToRetailOrderInfoType();
            this.shippingField = new ShippingType();
            this.customerinfoField = new ActivationRequestCustomerinfo();
            this.creditcheckinfoField = new ActivationRequestCreditcheckinfo();
            this.securityinfoField = new ActivationRequestSecurityinfo();
            this.accounttypeField = new ActivationRequestAccounttype();
            this.orderField = new OrderInfoType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OrderInfoType order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-date", Order=1)]
        public System.DateTime orderdate {
            get {
                return this.orderdateField;
            }
            set {
                this.orderdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool orderdateSpecified {
            get {
                return this.orderdateFieldSpecified;
            }
            set {
                this.orderdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-type", Order=2)]
        public ActivationRequestAccounttype accounttype {
            get {
                return this.accounttypeField;
            }
            set {
                this.accounttypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("security-info", Order=3)]
        public ActivationRequestSecurityinfo securityinfo {
            get {
                return this.securityinfoField;
            }
            set {
                this.securityinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("credit-check-info", Order=4)]
        public ActivationRequestCreditcheckinfo creditcheckinfo {
            get {
                return this.creditcheckinfoField;
            }
            set {
                this.creditcheckinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("customer-info", Order=5)]
        public ActivationRequestCustomerinfo customerinfo {
            get {
                return this.customerinfoField;
            }
            set {
                this.customerinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("nextel-fulfilled", Order=6)]
        public bool nextelfulfilled {
            get {
                return this.nextelfulfilledField;
            }
            set {
                this.nextelfulfilledField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nextelfulfilledSpecified {
            get {
                return this.nextelfulfilledFieldSpecified;
            }
            set {
                this.nextelfulfilledFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-pin", Order=7)]
        public string secpin {
            get {
                return this.secpinField;
            }
            set {
                this.secpinField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("rccp-wanted", Order=8)]
        public bool rccpwanted {
            get {
                return this.rccpwantedField;
            }
            set {
                this.rccpwantedField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rccpwantedSpecified {
            get {
                return this.rccpwantedFieldSpecified;
            }
            set {
                this.rccpwantedFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("status-url", DataType="anyURI", Order=9)]
        public string statusurl {
            get {
                return this.statusurlField;
            }
            set {
                this.statusurlField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("affiliate-name", Order=10)]
        public string affiliatename {
            get {
                return this.affiliatenameField;
            }
            set {
                this.affiliatenameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("agent-code", Order=11)]
        public string agentcode {
            get {
                return this.agentcodeField;
            }
            set {
                this.agentcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("reserve-subscriber", Order=12)]
        public bool reservesubscriber {
            get {
                return this.reservesubscriberField;
            }
            set {
                this.reservesubscriberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool reservesubscriberSpecified {
            get {
                return this.reservesubscriberFieldSpecified;
            }
            set {
                this.reservesubscriberFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-referral-dc-number", Order=13)]
        public string orderreferraldcnumber {
            get {
                return this.orderreferraldcnumberField;
            }
            set {
                this.orderreferraldcnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public ShippingType shipping {
            get {
                return this.shippingField;
            }
            set {
                this.shippingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("web-to-retail-order-info", Order=15)]
        public WebToRetailOrderInfoType webtoretailorderinfo {
            get {
                return this.webtoretailorderinfoField;
            }
            set {
                this.webtoretailorderinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("deposit-payment", Order=16)]
        public CreditCard depositpayment {
            get {
                return this.depositpaymentField;
            }
            set {
                this.depositpaymentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("equipment-payment-type", Order=17)]
        public EquipmentPaymentType equipmentpaymenttype {
            get {
                return this.equipmentpaymenttypeField;
            }
            set {
                this.equipmentpaymenttypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool equipmentpaymenttypeSpecified {
            get {
                return this.equipmentpaymenttypeFieldSpecified;
            }
            set {
                this.equipmentpaymenttypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("equipment-payment", Order=18)]
        public CreditCard equipmentpayment {
            get {
                return this.equipmentpaymentField;
            }
            set {
                this.equipmentpaymentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("equipment-estimated-tax", Order=19)]
        public decimal equipmentestimatedtax {
            get {
                return this.equipmentestimatedtaxField;
            }
            set {
                this.equipmentestimatedtaxField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool equipmentestimatedtaxSpecified {
            get {
                return this.equipmentestimatedtaxFieldSpecified;
            }
            set {
                this.equipmentestimatedtaxFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("rccp-payment", Order=20)]
        public CreditCard rccppayment {
            get {
                return this.rccppaymentField;
            }
            set {
                this.rccppaymentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sales-channel", Order=21)]
        public string saleschannel {
            get {
                return this.saleschannelField;
            }
            set {
                this.saleschannelField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=22)]
        public ServiceType service {
            get {
                return this.serviceField;
            }
            set {
                this.serviceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-shipping", Order=23)]
        public OrderShippingType ordershipping {
            get {
                return this.ordershippingField;
            }
            set {
                this.ordershippingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("default-service-change", Order=24)]
        public bool defaultservicechange {
            get {
                return this.defaultservicechangeField;
            }
            set {
                this.defaultservicechangeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool defaultservicechangeSpecified {
            get {
                return this.defaultservicechangeFieldSpecified;
            }
            set {
                this.defaultservicechangeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-zip-code", typeof(string), Order=25)]
        [System.Xml.Serialization.XmlElementAttribute("service-area-address", typeof(Address), Order=25)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("summary-bill", Order=26)]
        public bool summarybill {
            get {
                return this.summarybillField;
            }
            set {
                this.summarybillField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool summarybillSpecified {
            get {
                return this.summarybillFieldSpecified;
            }
            set {
                this.summarybillFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ebill-email", Order=27)]
        public string ebillemail {
            get {
                return this.ebillemailField;
            }
            set {
                this.ebillemailField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("email-address", Order=28)]
        public string emailaddress {
            get {
                return this.emailaddressField;
            }
            set {
                this.emailaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("buy-back", Order=29)]
        public List<ActivationRequestBuyback> buyback {
            get {
                return this.buybackField;
            }
            set {
                this.buybackField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("siebel-offer-list", Order=30)]
        [System.Xml.Serialization.XmlArrayItemAttribute("siebel-offer-info", IsNullable=false)]
        public List<SiebelOfferInfoType> siebelofferlist {
            get {
                return this.siebelofferlistField;
            }
            set {
                this.siebelofferlistField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("accessory-only-ind", Order=31)]
        public bool accessoryonlyind {
            get {
                return this.accessoryonlyindField;
            }
            set {
                this.accessoryonlyindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool accessoryonlyindSpecified {
            get {
                return this.accessoryonlyindFieldSpecified;
            }
            set {
                this.accessoryonlyindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("rep-id", Order=32)]
        public string repid {
            get {
                return this.repidField;
            }
            set {
                this.repidField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivationRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivationRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivationRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivationRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class OrderInfoType {
        
        private string itemField;
        
        private ItemChoiceType2 itemElementNameField;
        
        private string webprofileidField;
        
        private string ipaddressField;
        
        private OrderType typeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("subscriber-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType2 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("web-profile-id", Order=2)]
        public string webprofileid {
            get {
                return this.webprofileidField;
            }
            set {
                this.webprofileidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ip-address", Order=3)]
        public string ipaddress {
            get {
                return this.ipaddressField;
            }
            set {
                this.ipaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public OrderType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OrderInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrderInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OrderInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrderInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OrderInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OrderInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OrderInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OrderInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OrderInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OrderInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrderInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OrderInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OrderInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OrderInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OrderInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static OrderInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType2 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-number")]
        accountnumber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reference-ptn")]
        referenceptn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("subscriber-id")]
        subscriberid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum OrderType {
        
        /// <remarks/>
        NEW,
        
        /// <remarks/>
        ADD_ON,
        
        /// <remarks/>
        UPGRADE,
        
        /// <remarks/>
        REPLACE,
        
        /// <remarks/>
        BOOST,
        
        /// <remarks/>
        FAC,
        
        /// <remarks/>
        SERVICE_ONLY,
        
        /// <remarks/>
        ADDON_PPTOFAMILY,
        
        /// <remarks/>
        PREPAID,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ActivationRequestAccounttype {
        
        private List<object> itemsField;
        
        private string languageField;
        
        private CorporateGovernmentInfo corpgovinfoField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivationRequestAccounttype class constructor
        /// </summary>
        public ActivationRequestAccounttype() {
            this.corpgovinfoField = new CorporateGovernmentInfo();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-sub-type", typeof(AccountSubType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("account-type", typeof(AccountType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("customer-type", typeof(CustomerType), Order=0)]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-info", Order=2)]
        public CorporateGovernmentInfo corpgovinfo {
            get {
                return this.corpgovinfoField;
            }
            set {
                this.corpgovinfoField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationRequestAccounttype));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationRequestAccounttype object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationRequestAccounttype object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationRequestAccounttype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationRequestAccounttype obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequestAccounttype);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationRequestAccounttype obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationRequestAccounttype Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationRequestAccounttype)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivationRequestAccounttype object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivationRequestAccounttype object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivationRequestAccounttype object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivationRequestAccounttype obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequestAccounttype);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequestAccounttype obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequestAccounttype obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivationRequestAccounttype LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivationRequestAccounttype LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum AccountSubType {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("0")]
        Item0,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("1")]
        Item1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("2")]
        Item2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("3")]
        Item3,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("4")]
        Item4,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("5")]
        Item5,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("6")]
        Item6,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("7")]
        Item7,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("8")]
        Item8,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("9")]
        Item9,
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        E,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        G,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        I,
        
        /// <remarks/>
        J,
        
        /// <remarks/>
        K,
        
        /// <remarks/>
        L,
        
        /// <remarks/>
        M,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        O,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        Q,
        
        /// <remarks/>
        R,
        
        /// <remarks/>
        S,
        
        /// <remarks/>
        T,
        
        /// <remarks/>
        U,
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        W,
        
        /// <remarks/>
        X,
        
        /// <remarks/>
        Y,
        
        /// <remarks/>
        Z,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum AccountType {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        C,
        
        /// <remarks/>
        F,
        
        /// <remarks/>
        G,
        
        /// <remarks/>
        I,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        E,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum CustomerType {
        
        /// <remarks/>
        BUSINESS,
        
        /// <remarks/>
        INDIVIDUAL,
        
        /// <remarks/>
        CORPORATE_BUSINESS,
        
        /// <remarks/>
        CORPORATE_INDIVIDUAL,
        
        /// <remarks/>
        GOVERNMENT_INDIVIDUAL,
        
        /// <remarks/>
        GOVERNMENT_BUSINESS,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class CorporateGovernmentInfo {
        
        private string corpgovidField;
        
        private string servicepoField;
        
        private string servicecostcenterField;
        
        private string equipmentpoField;
        
        private string employeeidField;
        
        private string taxexemptidField;
        
        private uint nodeidField;
        
        private bool nodeidFieldSpecified;
        
        private uint dacidField;
        
        private bool dacidFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-id", Order=0)]
        public string corpgovid {
            get {
                return this.corpgovidField;
            }
            set {
                this.corpgovidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-po", Order=1)]
        public string servicepo {
            get {
                return this.servicepoField;
            }
            set {
                this.servicepoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-cost-center", Order=2)]
        public string servicecostcenter {
            get {
                return this.servicecostcenterField;
            }
            set {
                this.servicecostcenterField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("equipment-po", Order=3)]
        public string equipmentpo {
            get {
                return this.equipmentpoField;
            }
            set {
                this.equipmentpoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("employee-id", Order=4)]
        public string employeeid {
            get {
                return this.employeeidField;
            }
            set {
                this.employeeidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("tax-exempt-id", Order=5)]
        public string taxexemptid {
            get {
                return this.taxexemptidField;
            }
            set {
                this.taxexemptidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("node-id", Order=6)]
        public uint nodeid {
            get {
                return this.nodeidField;
            }
            set {
                this.nodeidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool nodeidSpecified {
            get {
                return this.nodeidFieldSpecified;
            }
            set {
                this.nodeidFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("dac-id", Order=7)]
        public uint dacid {
            get {
                return this.dacidField;
            }
            set {
                this.dacidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dacidSpecified {
            get {
                return this.dacidFieldSpecified;
            }
            set {
                this.dacidFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CorporateGovernmentInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CorporateGovernmentInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CorporateGovernmentInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CorporateGovernmentInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CorporateGovernmentInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateGovernmentInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CorporateGovernmentInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CorporateGovernmentInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CorporateGovernmentInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CorporateGovernmentInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CorporateGovernmentInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CorporateGovernmentInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CorporateGovernmentInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateGovernmentInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CorporateGovernmentInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CorporateGovernmentInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CorporateGovernmentInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CorporateGovernmentInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ActivationRequestSecurityinfo {
        
        private string secpinField;
        
        private string secquestioncodeField;
        
        private string secanswerField;
        
        private string secemailField;
        
        private Address secaddressField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivationRequestSecurityinfo class constructor
        /// </summary>
        public ActivationRequestSecurityinfo() {
            this.secaddressField = new Address();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-pin", Order=0)]
        public string secpin {
            get {
                return this.secpinField;
            }
            set {
                this.secpinField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-question-code", Order=1)]
        public string secquestioncode {
            get {
                return this.secquestioncodeField;
            }
            set {
                this.secquestioncodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-answer", Order=2)]
        public string secanswer {
            get {
                return this.secanswerField;
            }
            set {
                this.secanswerField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-email", Order=3)]
        public string secemail {
            get {
                return this.secemailField;
            }
            set {
                this.secemailField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-address", Order=4)]
        public Address secaddress {
            get {
                return this.secaddressField;
            }
            set {
                this.secaddressField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationRequestSecurityinfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationRequestSecurityinfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationRequestSecurityinfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationRequestSecurityinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationRequestSecurityinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequestSecurityinfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationRequestSecurityinfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationRequestSecurityinfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationRequestSecurityinfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivationRequestSecurityinfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivationRequestSecurityinfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivationRequestSecurityinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivationRequestSecurityinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequestSecurityinfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequestSecurityinfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequestSecurityinfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivationRequestSecurityinfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivationRequestSecurityinfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Address {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType1> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Address class constructor
        /// </summary>
        public Address() {
            this.itemsElementNameField = new List<ItemsChoiceType1>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("city", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("clone-address", typeof(CloneAddressType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("country-code", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("state-code", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("street-address-1", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("street-address-2", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("update-address", typeof(bool), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("zip-code", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType1> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Address));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Address object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Address object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Address object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Address obj, out System.Exception exception) {
            exception = null;
            obj = default(Address);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Address obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Address Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Address)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Address object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Address object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Address object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Address obj, out System.Exception exception) {
            exception = null;
            obj = default(Address);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Address obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Address obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Address LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Address LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum CloneAddressType {
        
        /// <remarks/>
        SAME_AS_BILLING,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType1 {
        
        /// <remarks/>
        city,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("clone-address")]
        cloneaddress,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("country-code")]
        countrycode,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("state-code")]
        statecode,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("street-address-1")]
        streetaddress1,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("street-address-2")]
        streetaddress2,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("update-address")]
        updateaddress,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("zip-code")]
        zipcode,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ActivationRequestCreditcheckinfo {
        
        private string itemField;
        
        private ItemChoiceType3 itemElementNameField;
        
        private string creditappnumberField;
        
        private DriversLicense driverslicenseField;
        
        private System.DateTime dateofbirthField;
        
        private bool dateofbirthFieldSpecified;
        
        private IdentificationMethod identificationmethodField;
        
        private CreditCheckStatus creditcheckstatusField;
        
        private bool creditcheckstatusFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivationRequestCreditcheckinfo class constructor
        /// </summary>
        public ActivationRequestCreditcheckinfo() {
            this.identificationmethodField = new IdentificationMethod();
            this.driverslicenseField = new DriversLicense();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("federal-tax-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ssn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType3 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("credit-app-number", Order=2)]
        public string creditappnumber {
            get {
                return this.creditappnumberField;
            }
            set {
                this.creditappnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("drivers-license", Order=3)]
        public DriversLicense driverslicense {
            get {
                return this.driverslicenseField;
            }
            set {
                this.driverslicenseField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("date-of-birth", DataType="date", Order=4)]
        public System.DateTime dateofbirth {
            get {
                return this.dateofbirthField;
            }
            set {
                this.dateofbirthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateofbirthSpecified {
            get {
                return this.dateofbirthFieldSpecified;
            }
            set {
                this.dateofbirthFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("identification-method", Order=5)]
        public IdentificationMethod identificationmethod {
            get {
                return this.identificationmethodField;
            }
            set {
                this.identificationmethodField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("credit-check-status", Order=6)]
        public CreditCheckStatus creditcheckstatus {
            get {
                return this.creditcheckstatusField;
            }
            set {
                this.creditcheckstatusField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool creditcheckstatusSpecified {
            get {
                return this.creditcheckstatusFieldSpecified;
            }
            set {
                this.creditcheckstatusFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationRequestCreditcheckinfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationRequestCreditcheckinfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationRequestCreditcheckinfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationRequestCreditcheckinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationRequestCreditcheckinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequestCreditcheckinfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationRequestCreditcheckinfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationRequestCreditcheckinfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationRequestCreditcheckinfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivationRequestCreditcheckinfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivationRequestCreditcheckinfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivationRequestCreditcheckinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivationRequestCreditcheckinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequestCreditcheckinfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequestCreditcheckinfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequestCreditcheckinfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivationRequestCreditcheckinfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivationRequestCreditcheckinfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType3 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("federal-tax-id")]
        federaltaxid,
        
        /// <remarks/>
        ssn,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class DriversLicense {
        
        private string idField;
        
        private string stateField;
        
        private System.DateTime expirationdateField;
        
        private bool expirationdateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("expiration-date", DataType="date", Order=2)]
        public System.DateTime expirationdate {
            get {
                return this.expirationdateField;
            }
            set {
                this.expirationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationdateSpecified {
            get {
                return this.expirationdateFieldSpecified;
            }
            set {
                this.expirationdateFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DriversLicense));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DriversLicense object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DriversLicense object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DriversLicense object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DriversLicense obj, out System.Exception exception) {
            exception = null;
            obj = default(DriversLicense);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DriversLicense obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DriversLicense Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DriversLicense)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DriversLicense object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DriversLicense object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DriversLicense object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DriversLicense obj, out System.Exception exception) {
            exception = null;
            obj = default(DriversLicense);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DriversLicense obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DriversLicense obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DriversLicense LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DriversLicense LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class IdentificationMethod {
        
        private IdentificationData primaryidField;
        
        private IdentificationData secondaryidField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// IdentificationMethod class constructor
        /// </summary>
        public IdentificationMethod() {
            this.secondaryidField = new IdentificationData();
            this.primaryidField = new IdentificationData();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("primary-id", Order=0)]
        public IdentificationData primaryid {
            get {
                return this.primaryidField;
            }
            set {
                this.primaryidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("secondary-id", Order=1)]
        public IdentificationData secondaryid {
            get {
                return this.secondaryidField;
            }
            set {
                this.secondaryidField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IdentificationMethod));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IdentificationMethod object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an IdentificationMethod object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IdentificationMethod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IdentificationMethod obj, out System.Exception exception) {
            exception = null;
            obj = default(IdentificationMethod);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out IdentificationMethod obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static IdentificationMethod Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((IdentificationMethod)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current IdentificationMethod object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an IdentificationMethod object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IdentificationMethod object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out IdentificationMethod obj, out System.Exception exception) {
            exception = null;
            obj = default(IdentificationMethod);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out IdentificationMethod obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out IdentificationMethod obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static IdentificationMethod LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static IdentificationMethod LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class IdentificationData {
        
        private string idcodeField;
        
        private string idtext1Field;
        
        private string idtext2Field;
        
        private System.DateTime idexpdtField;
        
        private bool idexpdtFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("id-code", Order=0)]
        public string idcode {
            get {
                return this.idcodeField;
            }
            set {
                this.idcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("id-text1", Order=1)]
        public string idtext1 {
            get {
                return this.idtext1Field;
            }
            set {
                this.idtext1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("id-text2", Order=2)]
        public string idtext2 {
            get {
                return this.idtext2Field;
            }
            set {
                this.idtext2Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("id-exp-dt", DataType="date", Order=3)]
        public System.DateTime idexpdt {
            get {
                return this.idexpdtField;
            }
            set {
                this.idexpdtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool idexpdtSpecified {
            get {
                return this.idexpdtFieldSpecified;
            }
            set {
                this.idexpdtFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IdentificationData));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IdentificationData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an IdentificationData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IdentificationData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IdentificationData obj, out System.Exception exception) {
            exception = null;
            obj = default(IdentificationData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out IdentificationData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static IdentificationData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((IdentificationData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current IdentificationData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an IdentificationData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IdentificationData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out IdentificationData obj, out System.Exception exception) {
            exception = null;
            obj = default(IdentificationData);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out IdentificationData obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out IdentificationData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static IdentificationData LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static IdentificationData LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum CreditCheckStatus {
        
        /// <remarks/>
        M,
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        E,
        
        /// <remarks/>
        T,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ActivationRequestCustomerinfo {
        
        private ExtBillingInfoType billingField;
        
        private PhysicalInfoType physicalField;
        
        private ExtContactType contactField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivationRequestCustomerinfo class constructor
        /// </summary>
        public ActivationRequestCustomerinfo() {
            this.contactField = new ExtContactType();
            this.physicalField = new PhysicalInfoType();
            this.billingField = new ExtBillingInfoType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ExtBillingInfoType billing {
            get {
                return this.billingField;
            }
            set {
                this.billingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public PhysicalInfoType physical {
            get {
                return this.physicalField;
            }
            set {
                this.physicalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ExtContactType contact {
            get {
                return this.contactField;
            }
            set {
                this.contactField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationRequestCustomerinfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationRequestCustomerinfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationRequestCustomerinfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationRequestCustomerinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationRequestCustomerinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequestCustomerinfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationRequestCustomerinfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationRequestCustomerinfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationRequestCustomerinfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivationRequestCustomerinfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivationRequestCustomerinfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivationRequestCustomerinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivationRequestCustomerinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequestCustomerinfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequestCustomerinfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequestCustomerinfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivationRequestCustomerinfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivationRequestCustomerinfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ExtBillingInfoType {
        
        private string companynameField;
        
        private Name nameField;
        
        private string emailaddressField;
        
        private EmailAction accountemailactionField;
        
        private bool accountemailactionFieldSpecified;
        
        private string ebillField;
        
        private Address addressField;
        
        private string homephoneField;
        
        private PhoneExtType workphoneField;
        
        private string alternatephoneField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ExtBillingInfoType class constructor
        /// </summary>
        public ExtBillingInfoType() {
            this.workphoneField = new PhoneExtType();
            this.addressField = new Address();
            this.nameField = new Name();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("company-name", Order=0)]
        public string companyname {
            get {
                return this.companynameField;
            }
            set {
                this.companynameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Name name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("email-address", Order=2)]
        public string emailaddress {
            get {
                return this.emailaddressField;
            }
            set {
                this.emailaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-email-action", Order=3)]
        public EmailAction accountemailaction {
            get {
                return this.accountemailactionField;
            }
            set {
                this.accountemailactionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool accountemailactionSpecified {
            get {
                return this.accountemailactionFieldSpecified;
            }
            set {
                this.accountemailactionFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("e-bill", Order=4)]
        public string ebill {
            get {
                return this.ebillField;
            }
            set {
                this.ebillField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public Address address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("home-phone", Order=6)]
        public string homephone {
            get {
                return this.homephoneField;
            }
            set {
                this.homephoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("work-phone", Order=7)]
        public PhoneExtType workphone {
            get {
                return this.workphoneField;
            }
            set {
                this.workphoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("alternate-phone", Order=8)]
        public string alternatephone {
            get {
                return this.alternatephoneField;
            }
            set {
                this.alternatephoneField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ExtBillingInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ExtBillingInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ExtBillingInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ExtBillingInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ExtBillingInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(ExtBillingInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ExtBillingInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ExtBillingInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ExtBillingInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ExtBillingInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ExtBillingInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ExtBillingInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ExtBillingInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(ExtBillingInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ExtBillingInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ExtBillingInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ExtBillingInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ExtBillingInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Name {
        
        private string sirnameField;
        
        private string firstnameField;
        
        private string middleinitialField;
        
        private string lastnameField;
        
        private string suffixField;
        
        private string additionallineField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("sir-name", Order=0)]
        public string sirname {
            get {
                return this.sirnameField;
            }
            set {
                this.sirnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("first-name", Order=1)]
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                this.firstnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("middle-initial", Order=2)]
        public string middleinitial {
            get {
                return this.middleinitialField;
            }
            set {
                this.middleinitialField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("last-name", Order=3)]
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string suffix {
            get {
                return this.suffixField;
            }
            set {
                this.suffixField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("additional-line", Order=5)]
        public string additionalline {
            get {
                return this.additionallineField;
            }
            set {
                this.additionallineField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Name));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Name object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Name object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Name object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Name obj, out System.Exception exception) {
            exception = null;
            obj = default(Name);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Name obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Name Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Name)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Name object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Name object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Name object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Name obj, out System.Exception exception) {
            exception = null;
            obj = default(Name);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Name obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Name obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Name LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Name LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum EmailAction {
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        M,
        
        /// <remarks/>
        D,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class PhoneExtType {
        
        private string extField;
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string ext {
            get {
                return this.extField;
            }
            set {
                this.extField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PhoneExtType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PhoneExtType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PhoneExtType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PhoneExtType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PhoneExtType obj, out System.Exception exception) {
            exception = null;
            obj = default(PhoneExtType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PhoneExtType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PhoneExtType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PhoneExtType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PhoneExtType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PhoneExtType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PhoneExtType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PhoneExtType obj, out System.Exception exception) {
            exception = null;
            obj = default(PhoneExtType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PhoneExtType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PhoneExtType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PhoneExtType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PhoneExtType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class PhysicalInfoType {
        
        private Address addressField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PhysicalInfoType class constructor
        /// </summary>
        public PhysicalInfoType() {
            this.addressField = new Address();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Address address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PhysicalInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PhysicalInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PhysicalInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PhysicalInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PhysicalInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(PhysicalInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PhysicalInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PhysicalInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PhysicalInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PhysicalInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PhysicalInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PhysicalInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PhysicalInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(PhysicalInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PhysicalInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PhysicalInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PhysicalInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PhysicalInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ExtContactType {
        
        private Name nameField;
        
        private string homephoneField;
        
        private PhoneExtType workphoneField;
        
        private string alternatephoneField;
        
        private BestTimeToCall besttimetocallhomeField;
        
        private bool besttimetocallhomeFieldSpecified;
        
        private BestTimeToCall besttimetocallworkField;
        
        private bool besttimetocallworkFieldSpecified;
        
        private BestTimeToCall besttimetocallalternateField;
        
        private bool besttimetocallalternateFieldSpecified;
        
        private string emailaddressField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ExtContactType class constructor
        /// </summary>
        public ExtContactType() {
            this.workphoneField = new PhoneExtType();
            this.nameField = new Name();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Name name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("home-phone", Order=1)]
        public string homephone {
            get {
                return this.homephoneField;
            }
            set {
                this.homephoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("work-phone", Order=2)]
        public PhoneExtType workphone {
            get {
                return this.workphoneField;
            }
            set {
                this.workphoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("alternate-phone", Order=3)]
        public string alternatephone {
            get {
                return this.alternatephoneField;
            }
            set {
                this.alternatephoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("best-time-to-call-home", Order=4)]
        public BestTimeToCall besttimetocallhome {
            get {
                return this.besttimetocallhomeField;
            }
            set {
                this.besttimetocallhomeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool besttimetocallhomeSpecified {
            get {
                return this.besttimetocallhomeFieldSpecified;
            }
            set {
                this.besttimetocallhomeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("best-time-to-call-work", Order=5)]
        public BestTimeToCall besttimetocallwork {
            get {
                return this.besttimetocallworkField;
            }
            set {
                this.besttimetocallworkField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool besttimetocallworkSpecified {
            get {
                return this.besttimetocallworkFieldSpecified;
            }
            set {
                this.besttimetocallworkFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("best-time-to-call-alternate", Order=6)]
        public BestTimeToCall besttimetocallalternate {
            get {
                return this.besttimetocallalternateField;
            }
            set {
                this.besttimetocallalternateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool besttimetocallalternateSpecified {
            get {
                return this.besttimetocallalternateFieldSpecified;
            }
            set {
                this.besttimetocallalternateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("email-address", Order=7)]
        public string emailaddress {
            get {
                return this.emailaddressField;
            }
            set {
                this.emailaddressField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ExtContactType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ExtContactType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ExtContactType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ExtContactType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ExtContactType obj, out System.Exception exception) {
            exception = null;
            obj = default(ExtContactType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ExtContactType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ExtContactType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ExtContactType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ExtContactType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ExtContactType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ExtContactType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ExtContactType obj, out System.Exception exception) {
            exception = null;
            obj = default(ExtContactType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ExtContactType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ExtContactType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ExtContactType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ExtContactType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum BestTimeToCall {
        
        /// <remarks/>
        M,
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        E,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ShippingType {
        
        private string companynameField;
        
        private Name nameField;
        
        private Address addressField;
        
        private string homephoneField;
        
        private PhoneExtType workphoneField;
        
        private string alternatephoneField;
        
        private string emailaddressField;
        
        private bool waiveshippingfeeField;
        
        private bool waiveshippingfeeFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ShippingType class constructor
        /// </summary>
        public ShippingType() {
            this.workphoneField = new PhoneExtType();
            this.addressField = new Address();
            this.nameField = new Name();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("company-name", Order=0)]
        public string companyname {
            get {
                return this.companynameField;
            }
            set {
                this.companynameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Name name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public Address address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("home-phone", Order=3)]
        public string homephone {
            get {
                return this.homephoneField;
            }
            set {
                this.homephoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("work-phone", Order=4)]
        public PhoneExtType workphone {
            get {
                return this.workphoneField;
            }
            set {
                this.workphoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("alternate-phone", Order=5)]
        public string alternatephone {
            get {
                return this.alternatephoneField;
            }
            set {
                this.alternatephoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("email-address", Order=6)]
        public string emailaddress {
            get {
                return this.emailaddressField;
            }
            set {
                this.emailaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("waive-shipping-fee", Order=7)]
        public bool waiveshippingfee {
            get {
                return this.waiveshippingfeeField;
            }
            set {
                this.waiveshippingfeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool waiveshippingfeeSpecified {
            get {
                return this.waiveshippingfeeFieldSpecified;
            }
            set {
                this.waiveshippingfeeFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ShippingType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ShippingType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ShippingType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ShippingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ShippingType obj, out System.Exception exception) {
            exception = null;
            obj = default(ShippingType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ShippingType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ShippingType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ShippingType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ShippingType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ShippingType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ShippingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ShippingType obj, out System.Exception exception) {
            exception = null;
            obj = default(ShippingType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ShippingType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ShippingType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ShippingType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ShippingType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class WebToRetailOrderInfoType {
        
        private StoreInfoType storeinfoField;
        
        private string depositequipcardhandleField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// WebToRetailOrderInfoType class constructor
        /// </summary>
        public WebToRetailOrderInfoType() {
            this.storeinfoField = new StoreInfoType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("store-info", Order=0)]
        public StoreInfoType storeinfo {
            get {
                return this.storeinfoField;
            }
            set {
                this.storeinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("deposit-equip-card-handle", Order=1)]
        public string depositequipcardhandle {
            get {
                return this.depositequipcardhandleField;
            }
            set {
                this.depositequipcardhandleField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(WebToRetailOrderInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current WebToRetailOrderInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an WebToRetailOrderInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output WebToRetailOrderInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out WebToRetailOrderInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(WebToRetailOrderInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out WebToRetailOrderInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static WebToRetailOrderInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((WebToRetailOrderInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current WebToRetailOrderInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an WebToRetailOrderInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output WebToRetailOrderInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out WebToRetailOrderInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(WebToRetailOrderInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out WebToRetailOrderInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out WebToRetailOrderInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static WebToRetailOrderInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static WebToRetailOrderInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class StoreInfoType {
        
        private string storenameField;
        
        private string storeappointmentidField;
        
        private string storewarehouseidField;
        
        private string storetimezoneField;
        
        private StoreAddress storeaddressinfoField;
        
        private string workphoneField;
        
        private string alternatephoneField;
        
        private AppointmentContactInfoType appointmentcontactinfoField;
        
        private AppointmentInfoType appointmentinfoField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// StoreInfoType class constructor
        /// </summary>
        public StoreInfoType() {
            this.appointmentinfoField = new AppointmentInfoType();
            this.appointmentcontactinfoField = new AppointmentContactInfoType();
            this.storeaddressinfoField = new StoreAddress();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("store-name", Order=0)]
        public string storename {
            get {
                return this.storenameField;
            }
            set {
                this.storenameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("store-appointment-id", Order=1)]
        public string storeappointmentid {
            get {
                return this.storeappointmentidField;
            }
            set {
                this.storeappointmentidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("store-warehouse-id", Order=2)]
        public string storewarehouseid {
            get {
                return this.storewarehouseidField;
            }
            set {
                this.storewarehouseidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("store-timezone", Order=3)]
        public string storetimezone {
            get {
                return this.storetimezoneField;
            }
            set {
                this.storetimezoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("store-address-info", Order=4)]
        public StoreAddress storeaddressinfo {
            get {
                return this.storeaddressinfoField;
            }
            set {
                this.storeaddressinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("work-phone", Order=5)]
        public string workphone {
            get {
                return this.workphoneField;
            }
            set {
                this.workphoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("alternate-phone", Order=6)]
        public string alternatephone {
            get {
                return this.alternatephoneField;
            }
            set {
                this.alternatephoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("appointment-contact-info", Order=7)]
        public AppointmentContactInfoType appointmentcontactinfo {
            get {
                return this.appointmentcontactinfoField;
            }
            set {
                this.appointmentcontactinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("appointment-info", Order=8)]
        public AppointmentInfoType appointmentinfo {
            get {
                return this.appointmentinfoField;
            }
            set {
                this.appointmentinfoField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(StoreInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current StoreInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an StoreInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output StoreInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out StoreInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(StoreInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out StoreInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static StoreInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((StoreInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current StoreInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an StoreInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output StoreInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out StoreInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(StoreInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out StoreInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out StoreInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static StoreInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static StoreInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class StoreAddress {
        
        private string streetaddress1Field;
        
        private string streetaddress2Field;
        
        private string cityField;
        
        private string statecodeField;
        
        private string zipcodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("street-address-1", Order=0)]
        public string streetaddress1 {
            get {
                return this.streetaddress1Field;
            }
            set {
                this.streetaddress1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("street-address-2", Order=1)]
        public string streetaddress2 {
            get {
                return this.streetaddress2Field;
            }
            set {
                this.streetaddress2Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("state-code", Order=3)]
        public string statecode {
            get {
                return this.statecodeField;
            }
            set {
                this.statecodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("zip-code", Order=4)]
        public string zipcode {
            get {
                return this.zipcodeField;
            }
            set {
                this.zipcodeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(StoreAddress));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current StoreAddress object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an StoreAddress object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output StoreAddress object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out StoreAddress obj, out System.Exception exception) {
            exception = null;
            obj = default(StoreAddress);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out StoreAddress obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static StoreAddress Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((StoreAddress)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current StoreAddress object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an StoreAddress object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output StoreAddress object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out StoreAddress obj, out System.Exception exception) {
            exception = null;
            obj = default(StoreAddress);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out StoreAddress obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out StoreAddress obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static StoreAddress LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static StoreAddress LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class AppointmentContactInfoType {
        
        private string firstnameField;
        
        private string lastnameField;
        
        private string phonenumberField;
        
        private string emailaddressField;
        
        private AppointmentContactInfoTypePreferredcontactmode preferredcontactmodeField;
        
        private AppointmentContactInfoTypeAppointmentlinetype appointmentlinetypeField;
        
        private bool appointmentlinetypeFieldSpecified;
        
        private bool existingsprintcustomerindField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("first-name", Order=0)]
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                this.firstnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("last-name", Order=1)]
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone-number", Order=2)]
        public string phonenumber {
            get {
                return this.phonenumberField;
            }
            set {
                this.phonenumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("email-address", Order=3)]
        public string emailaddress {
            get {
                return this.emailaddressField;
            }
            set {
                this.emailaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("preferred-contact-mode", Order=4)]
        public AppointmentContactInfoTypePreferredcontactmode preferredcontactmode {
            get {
                return this.preferredcontactmodeField;
            }
            set {
                this.preferredcontactmodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("appointment-line-type", Order=5)]
        public AppointmentContactInfoTypeAppointmentlinetype appointmentlinetype {
            get {
                return this.appointmentlinetypeField;
            }
            set {
                this.appointmentlinetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool appointmentlinetypeSpecified {
            get {
                return this.appointmentlinetypeFieldSpecified;
            }
            set {
                this.appointmentlinetypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("existing-sprint-customer-ind", Order=6)]
        public bool existingsprintcustomerind {
            get {
                return this.existingsprintcustomerindField;
            }
            set {
                this.existingsprintcustomerindField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AppointmentContactInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AppointmentContactInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AppointmentContactInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AppointmentContactInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AppointmentContactInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(AppointmentContactInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AppointmentContactInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AppointmentContactInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AppointmentContactInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AppointmentContactInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AppointmentContactInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AppointmentContactInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AppointmentContactInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(AppointmentContactInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AppointmentContactInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AppointmentContactInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AppointmentContactInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AppointmentContactInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public enum AppointmentContactInfoTypePreferredcontactmode {
        
        /// <remarks/>
        EMAIL,
        
        /// <remarks/>
        PHONE,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public enum AppointmentContactInfoTypeAppointmentlinetype {
        
        /// <remarks/>
        UPG,
        
        /// <remarks/>
        AAL,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class AppointmentInfoType {
        
        private string apptconfirmationField;
        
        private System.DateTime appointmentstartdatetimeField;
        
        private System.DateTime appointmentenddatetimeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("appt-confirmation", Order=0)]
        public string apptconfirmation {
            get {
                return this.apptconfirmationField;
            }
            set {
                this.apptconfirmationField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("appointment-start-datetime", Order=1)]
        public System.DateTime appointmentstartdatetime {
            get {
                return this.appointmentstartdatetimeField;
            }
            set {
                this.appointmentstartdatetimeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("appointment-end-datetime", Order=2)]
        public System.DateTime appointmentenddatetime {
            get {
                return this.appointmentenddatetimeField;
            }
            set {
                this.appointmentenddatetimeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AppointmentInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AppointmentInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AppointmentInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AppointmentInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AppointmentInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(AppointmentInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AppointmentInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AppointmentInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AppointmentInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AppointmentInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AppointmentInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AppointmentInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AppointmentInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(AppointmentInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AppointmentInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AppointmentInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AppointmentInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AppointmentInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class CreditCard {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType2> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CreditCard class constructor
        /// </summary>
        public CreditCard() {
            this.itemsElementNameField = new List<ItemsChoiceType2>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("address", typeof(Address), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("card-handle", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("clone-credit-card", typeof(CloneCreditCardType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("expiration", typeof(string), DataType="gYearMonth", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("ignore-address-errors", typeof(bool), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("number", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("security-code", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("type", typeof(CreditCardType), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType2> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CreditCard));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CreditCard object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CreditCard object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CreditCard object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CreditCard obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditCard);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CreditCard obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CreditCard Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CreditCard)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CreditCard object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CreditCard object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CreditCard object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CreditCard obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditCard);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CreditCard obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CreditCard obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CreditCard LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CreditCard LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum CloneCreditCardType {
        
        /// <remarks/>
        SAME_AS_DEPOSIT,
        
        /// <remarks/>
        SAME_AS_EQUIPMENT,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum CreditCardType {
        
        /// <remarks/>
        V,
        
        /// <remarks/>
        M,
        
        /// <remarks/>
        A,
        
        /// <remarks/>
        D,
        
        /// <remarks/>
        DC,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType2 {
        
        /// <remarks/>
        address,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("card-handle")]
        cardhandle,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("clone-credit-card")]
        clonecreditcard,
        
        /// <remarks/>
        expiration,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("ignore-address-errors")]
        ignoreaddresserrors,
        
        /// <remarks/>
        number,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("security-code")]
        securitycode,
        
        /// <remarks/>
        type,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum EquipmentPaymentType {
        
        /// <remarks/>
        CC,
        
        /// <remarks/>
        INV,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ServiceType {
        
        private List<object> itemsField;
        
        private List<string> promotioninfoField;
        
        private string servicephonenumberField;
        
        private string hcaField;
        
        private string csaField;
        
        private List<DiscountInfo> discountinfoField;
        
        private decimal reactivationfeeField;
        
        private bool reactivationfeeFieldSpecified;
        
        private string futureportinnumberField;
        
        private ServiceTypeMigration migrationField;
        
        private decimal minamountField;
        
        private bool minamountFieldSpecified;
        
        private List<string> discountcodeField;
        
        private decimal discretionarycreditField;
        
        private bool discretionarycreditFieldSpecified;
        
        private string managernameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ServiceType class constructor
        /// </summary>
        public ServiceType() {
            this.discountcodeField = new List<string>();
            this.migrationField = new ServiceTypeMigration();
            this.discountinfoField = new List<DiscountInfo>();
            this.promotioninfoField = new List<string>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("accessory", typeof(Accessory), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("plan", typeof(Plan), Order=0)]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("promotion-info", Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("promotion-id", IsNullable=false)]
        public List<string> promotioninfo {
            get {
                return this.promotioninfoField;
            }
            set {
                this.promotioninfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-phone-number", Order=2)]
        public string servicephonenumber {
            get {
                return this.servicephonenumberField;
            }
            set {
                this.servicephonenumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string hca {
            get {
                return this.hcaField;
            }
            set {
                this.hcaField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public string csa {
            get {
                return this.csaField;
            }
            set {
                this.csaField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discount-info", Order=5)]
        public List<DiscountInfo> discountinfo {
            get {
                return this.discountinfoField;
            }
            set {
                this.discountinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("reactivation-fee", Order=6)]
        public decimal reactivationfee {
            get {
                return this.reactivationfeeField;
            }
            set {
                this.reactivationfeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool reactivationfeeSpecified {
            get {
                return this.reactivationfeeFieldSpecified;
            }
            set {
                this.reactivationfeeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("future-port-in-number", Order=7)]
        public string futureportinnumber {
            get {
                return this.futureportinnumberField;
            }
            set {
                this.futureportinnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public ServiceTypeMigration migration {
            get {
                return this.migrationField;
            }
            set {
                this.migrationField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("min-amount", Order=9)]
        public decimal minamount {
            get {
                return this.minamountField;
            }
            set {
                this.minamountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minamountSpecified {
            get {
                return this.minamountFieldSpecified;
            }
            set {
                this.minamountFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discount-code", Order=10)]
        public List<string> discountcode {
            get {
                return this.discountcodeField;
            }
            set {
                this.discountcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discretionary-credit", Order=11)]
        public decimal discretionarycredit {
            get {
                return this.discretionarycreditField;
            }
            set {
                this.discretionarycreditField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool discretionarycreditSpecified {
            get {
                return this.discretionarycreditFieldSpecified;
            }
            set {
                this.discretionarycreditFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("manager-name", Order=12)]
        public string managername {
            get {
                return this.managernameField;
            }
            set {
                this.managernameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Accessory {
        
        private string modelidField;
        
        private object itemField;
        
        private ItemChoiceType6 itemElementNameField;
        
        private uint quantityField;
        
        private string accessoryorderkeyField;
        
        private decimal discretionarycreditField;
        
        private bool discretionarycreditFieldSpecified;
        
        private BogxTransaction bogxtransactioninfoField;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Accessory class constructor
        /// </summary>
        public Accessory() {
            this.bogxtransactioninfoField = new BogxTransaction();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("model-id", Order=0)]
        public string modelid {
            get {
                return this.modelidField;
            }
            set {
                this.modelidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bogx-offer-code", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("model-price", typeof(decimal), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("model-price-code", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType6 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public uint quantity {
            get {
                return this.quantityField;
            }
            set {
                this.quantityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("accessory-order-key", Order=4)]
        public string accessoryorderkey {
            get {
                return this.accessoryorderkeyField;
            }
            set {
                this.accessoryorderkeyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discretionary-credit", Order=5)]
        public decimal discretionarycredit {
            get {
                return this.discretionarycreditField;
            }
            set {
                this.discretionarycreditField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool discretionarycreditSpecified {
            get {
                return this.discretionarycreditFieldSpecified;
            }
            set {
                this.discretionarycreditFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bogx-transaction-info", Order=6)]
        public BogxTransaction bogxtransactioninfo {
            get {
                return this.bogxtransactioninfoField;
            }
            set {
                this.bogxtransactioninfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Accessory));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Accessory object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Accessory object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Accessory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Accessory obj, out System.Exception exception) {
            exception = null;
            obj = default(Accessory);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Accessory obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Accessory Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Accessory)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Accessory object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Accessory object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Accessory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Accessory obj, out System.Exception exception) {
            exception = null;
            obj = default(Accessory);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Accessory obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Accessory obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Accessory LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Accessory LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType6 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bogx-offer-code")]
        bogxoffercode,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("model-price")]
        modelprice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("model-price-code")]
        modelpricecode,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class BogxTransaction {
        
        private BogxTransactionBogxtype bogxtypeField;
        
        private string bogxofferlinecdField;
        
        private string bogxpkgidField;
        
        private bool ufpelligibleindField;
        
        private decimal bogxaddtnldiscountField;
        
        private bool bogxaddtnldiscountFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("bogx-type", Order=0)]
        public BogxTransactionBogxtype bogxtype {
            get {
                return this.bogxtypeField;
            }
            set {
                this.bogxtypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bogx-offer-line-cd", Order=1)]
        public string bogxofferlinecd {
            get {
                return this.bogxofferlinecdField;
            }
            set {
                this.bogxofferlinecdField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bogx-pkg-id", DataType="integer", Order=2)]
        public string bogxpkgid {
            get {
                return this.bogxpkgidField;
            }
            set {
                this.bogxpkgidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ufp-elligible-ind", Order=3)]
        public bool ufpelligibleind {
            get {
                return this.ufpelligibleindField;
            }
            set {
                this.ufpelligibleindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bogx-addtnl-discount", Order=4)]
        public decimal bogxaddtnldiscount {
            get {
                return this.bogxaddtnldiscountField;
            }
            set {
                this.bogxaddtnldiscountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool bogxaddtnldiscountSpecified {
            get {
                return this.bogxaddtnldiscountFieldSpecified;
            }
            set {
                this.bogxaddtnldiscountFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BogxTransaction));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BogxTransaction object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BogxTransaction object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BogxTransaction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BogxTransaction obj, out System.Exception exception) {
            exception = null;
            obj = default(BogxTransaction);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BogxTransaction obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BogxTransaction Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BogxTransaction)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BogxTransaction object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BogxTransaction object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BogxTransaction object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BogxTransaction obj, out System.Exception exception) {
            exception = null;
            obj = default(BogxTransaction);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BogxTransaction obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BogxTransaction obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BogxTransaction LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BogxTransaction LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public enum BogxTransactionBogxtype {
        
        /// <remarks/>
        B,
        
        /// <remarks/>
        G,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Plan {
        
        private OrderType orderlinetypeField;
        
        private bool orderlinetypeFieldSpecified;
        
        private string codeField;
        
        private string featureidField;
        
        private string modelidField;
        
        private string itemField;
        
        private ItemChoiceType4 itemElementNameField;
        
        private object item1Field;
        
        private Item1ChoiceType1 item1ElementNameField;
        
        private bool soldeqppppField;
        
        private bool soldeqppppFieldSpecified;
        
        private byte serviceagreementField;
        
        private bool serviceagreementFieldSpecified;
        
        private W2RInfoType webtoretaillineinfoField;
        
        private List<DiscountInfo> discountinfoField;
        
        private string discountcodeField;
        
        private string subreferraldcnumberField;
        
        private string subscriberemailaddressField;
        
        private EmailAction subscriberemailactionField;
        
        private bool subscriberemailactionFieldSpecified;
        
        private Address addressField;
        
        private string ecref1Field;
        
        private string ecref2Field;
        
        private string ecref3Field;
        
        private string ecref4Field;
        
        private string urbanidField;
        
        private string fleetidField;
        
        private string servicephonenumberField;
        
        private string planorderkeyField;
        
        private List<Feature> featureField;
        
        private List<Phone> phoneField;
        
        private List<string> phonenumberorrangeField;
        
        private object item2Field;
        
        private BogxTransaction bogxtransactioninfoField;
        
        private string promocodeField;
        
        private PlanActupgfee actupgfeeField;
        
        private decimal discretionarycreditField;
        
        private bool discretionarycreditFieldSpecified;
        
        private bool applycontractField;
        
        private bool applycontractFieldSpecified;
        
        private string ltsrankField;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Plan class constructor
        /// </summary>
        public Plan() {
            this.actupgfeeField = new PlanActupgfee();
            this.bogxtransactioninfoField = new BogxTransaction();
            this.phonenumberorrangeField = new List<string>();
            this.phoneField = new List<Phone>();
            this.featureField = new List<Feature>();
            this.addressField = new Address();
            this.discountinfoField = new List<DiscountInfo>();
            this.webtoretaillineinfoField = new W2RInfoType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-line-type", Order=0)]
        public OrderType orderlinetype {
            get {
                return this.orderlinetypeField;
            }
            set {
                this.orderlinetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool orderlinetypeSpecified {
            get {
                return this.orderlinetypeFieldSpecified;
            }
            set {
                this.orderlinetypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature-id", Order=2)]
        public string featureid {
            get {
                return this.featureidField;
            }
            set {
                this.featureidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("model-id", Order=3)]
        public string modelid {
            get {
                return this.modelidField;
            }
            set {
                this.modelidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", typeof(string), Order=4)]
        [System.Xml.Serialization.XmlElementAttribute("subscriber-id", typeof(string), Order=4)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType4 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bogx-offer-code", typeof(string), Order=6)]
        [System.Xml.Serialization.XmlElementAttribute("model-price", typeof(decimal), Order=6)]
        [System.Xml.Serialization.XmlElementAttribute("model-price-code", typeof(string), Order=6)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("Item1ElementName")]
        public object Item1 {
            get {
                return this.item1Field;
            }
            set {
                this.item1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Item1ChoiceType1 Item1ElementName {
            get {
                return this.item1ElementNameField;
            }
            set {
                this.item1ElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sold-eqp-ppp", Order=8)]
        public bool soldeqpppp {
            get {
                return this.soldeqppppField;
            }
            set {
                this.soldeqppppField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool soldeqppppSpecified {
            get {
                return this.soldeqppppFieldSpecified;
            }
            set {
                this.soldeqppppFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-agreement", Order=9)]
        public byte serviceagreement {
            get {
                return this.serviceagreementField;
            }
            set {
                this.serviceagreementField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceagreementSpecified {
            get {
                return this.serviceagreementFieldSpecified;
            }
            set {
                this.serviceagreementFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("web-to-retail-line-info", Order=10)]
        public W2RInfoType webtoretaillineinfo {
            get {
                return this.webtoretaillineinfoField;
            }
            set {
                this.webtoretaillineinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discount-info", Order=11)]
        public List<DiscountInfo> discountinfo {
            get {
                return this.discountinfoField;
            }
            set {
                this.discountinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discount-code", Order=12)]
        public string discountcode {
            get {
                return this.discountcodeField;
            }
            set {
                this.discountcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sub-referral-dc-number", Order=13)]
        public string subreferraldcnumber {
            get {
                return this.subreferraldcnumberField;
            }
            set {
                this.subreferraldcnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-email-address", Order=14)]
        public string subscriberemailaddress {
            get {
                return this.subscriberemailaddressField;
            }
            set {
                this.subscriberemailaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-email-action", Order=15)]
        public EmailAction subscriberemailaction {
            get {
                return this.subscriberemailactionField;
            }
            set {
                this.subscriberemailactionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool subscriberemailactionSpecified {
            get {
                return this.subscriberemailactionFieldSpecified;
            }
            set {
                this.subscriberemailactionFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public Address address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ec-ref-1", Order=17)]
        public string ecref1 {
            get {
                return this.ecref1Field;
            }
            set {
                this.ecref1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ec-ref-2", Order=18)]
        public string ecref2 {
            get {
                return this.ecref2Field;
            }
            set {
                this.ecref2Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ec-ref-3", Order=19)]
        public string ecref3 {
            get {
                return this.ecref3Field;
            }
            set {
                this.ecref3Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ec-ref-4", Order=20)]
        public string ecref4 {
            get {
                return this.ecref4Field;
            }
            set {
                this.ecref4Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("urban-id", Order=21)]
        public string urbanid {
            get {
                return this.urbanidField;
            }
            set {
                this.urbanidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("fleet-id", Order=22)]
        public string fleetid {
            get {
                return this.fleetidField;
            }
            set {
                this.fleetidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-phone-number", Order=23)]
        public string servicephonenumber {
            get {
                return this.servicephonenumberField;
            }
            set {
                this.servicephonenumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-order-key", Order=24)]
        public string planorderkey {
            get {
                return this.planorderkeyField;
            }
            set {
                this.planorderkeyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature", Order=25)]
        public List<Feature> feature {
            get {
                return this.featureField;
            }
            set {
                this.featureField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone", Order=26)]
        public List<Phone> phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone-number-or-range", DataType="token", Order=27)]
        public List<string> phonenumberorrange {
            get {
                return this.phonenumberorrangeField;
            }
            set {
                this.phonenumberorrangeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("effective-bill-cycle", typeof(bool), Order=28)]
        [System.Xml.Serialization.XmlElementAttribute("effective-date", typeof(System.DateTime), Order=28)]
        public object Item2 {
            get {
                return this.item2Field;
            }
            set {
                this.item2Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bogx-transaction-info", Order=29)]
        public BogxTransaction bogxtransactioninfo {
            get {
                return this.bogxtransactioninfoField;
            }
            set {
                this.bogxtransactioninfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("promo-code", Order=30)]
        public string promocode {
            get {
                return this.promocodeField;
            }
            set {
                this.promocodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("act-upg-fee", Order=31)]
        public PlanActupgfee actupgfee {
            get {
                return this.actupgfeeField;
            }
            set {
                this.actupgfeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discretionary-credit", Order=32)]
        public decimal discretionarycredit {
            get {
                return this.discretionarycreditField;
            }
            set {
                this.discretionarycreditField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool discretionarycreditSpecified {
            get {
                return this.discretionarycreditFieldSpecified;
            }
            set {
                this.discretionarycreditFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("apply-contract", Order=33)]
        public bool applycontract {
            get {
                return this.applycontractField;
            }
            set {
                this.applycontractField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool applycontractSpecified {
            get {
                return this.applycontractFieldSpecified;
            }
            set {
                this.applycontractFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("lts-rank", DataType="positiveInteger", Order=34)]
        public string ltsrank {
            get {
                return this.ltsrankField;
            }
            set {
                this.ltsrankField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Plan));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Plan object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Plan object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Plan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Plan obj, out System.Exception exception) {
            exception = null;
            obj = default(Plan);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Plan obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Plan Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Plan)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Plan object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Plan object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Plan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Plan obj, out System.Exception exception) {
            exception = null;
            obj = default(Plan);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Plan obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Plan obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Plan LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Plan LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType4 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reference-ptn")]
        referenceptn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("subscriber-id")]
        subscriberid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum Item1ChoiceType1 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bogx-offer-code")]
        bogxoffercode,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("model-price")]
        modelprice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("model-price-code")]
        modelpricecode,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class W2RInfoType {
        
        private W2RInfoTypeWebtoretaillinecode webtoretaillinecodeField;
        
        private uint crosssubgroupnumberField;
        
        private bool crosssubgroupnumberFieldSpecified;
        
        private decimal devicelinetaxField;
        
        private bool devicelinetaxFieldSpecified;
        
        private bool preorderindField;
        
        private bool preorderindFieldSpecified;
        
        private decimal finalpriceField;
        
        private bool finalpriceFieldSpecified;
        
        private List<LineDiscountInfoType> linediscountlistField;
        
        private uint plangroupnumberField;
        
        private bool plangroupnumberFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// W2RInfoType class constructor
        /// </summary>
        public W2RInfoType() {
            this.linediscountlistField = new List<LineDiscountInfoType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("web-to-retail-line-code", Order=0)]
        public W2RInfoTypeWebtoretaillinecode webtoretaillinecode {
            get {
                return this.webtoretaillinecodeField;
            }
            set {
                this.webtoretaillinecodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("crosssub-group-number", Order=1)]
        public uint crosssubgroupnumber {
            get {
                return this.crosssubgroupnumberField;
            }
            set {
                this.crosssubgroupnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool crosssubgroupnumberSpecified {
            get {
                return this.crosssubgroupnumberFieldSpecified;
            }
            set {
                this.crosssubgroupnumberFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-line-tax", Order=2)]
        public decimal devicelinetax {
            get {
                return this.devicelinetaxField;
            }
            set {
                this.devicelinetaxField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool devicelinetaxSpecified {
            get {
                return this.devicelinetaxFieldSpecified;
            }
            set {
                this.devicelinetaxFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pre-order-ind", Order=3)]
        public bool preorderind {
            get {
                return this.preorderindField;
            }
            set {
                this.preorderindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool preorderindSpecified {
            get {
                return this.preorderindFieldSpecified;
            }
            set {
                this.preorderindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("final-price", Order=4)]
        public decimal finalprice {
            get {
                return this.finalpriceField;
            }
            set {
                this.finalpriceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool finalpriceSpecified {
            get {
                return this.finalpriceFieldSpecified;
            }
            set {
                this.finalpriceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("line-discount-list", Order=5)]
        [System.Xml.Serialization.XmlArrayItemAttribute("line-discount-info", IsNullable=false)]
        public List<LineDiscountInfoType> linediscountlist {
            get {
                return this.linediscountlistField;
            }
            set {
                this.linediscountlistField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-group-number", Order=6)]
        public uint plangroupnumber {
            get {
                return this.plangroupnumberField;
            }
            set {
                this.plangroupnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool plangroupnumberSpecified {
            get {
                return this.plangroupnumberFieldSpecified;
            }
            set {
                this.plangroupnumberFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(W2RInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current W2RInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an W2RInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output W2RInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out W2RInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(W2RInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out W2RInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static W2RInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((W2RInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current W2RInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an W2RInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output W2RInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out W2RInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(W2RInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out W2RInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out W2RInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static W2RInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static W2RInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public enum W2RInfoTypeWebtoretaillinecode {
        
        /// <remarks/>
        STS,
        
        /// <remarks/>
        PIS,
        
        /// <remarks/>
        STH,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class LineDiscountInfoType {
        
        private uint discountnumberField;
        
        private string discountcodeField;
        
        private LineDiscountInfoTypeDiscountcodetype discountcodetypeField;
        
        private string discounttextField;
        
        private decimal discountamountField;
        
        private bool postpurchaseindField;
        
        private bool surchargeindField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("discount-number", Order=0)]
        public uint discountnumber {
            get {
                return this.discountnumberField;
            }
            set {
                this.discountnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discount-code", Order=1)]
        public string discountcode {
            get {
                return this.discountcodeField;
            }
            set {
                this.discountcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discount-code-type", Order=2)]
        public LineDiscountInfoTypeDiscountcodetype discountcodetype {
            get {
                return this.discountcodetypeField;
            }
            set {
                this.discountcodetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discount-text", Order=3)]
        public string discounttext {
            get {
                return this.discounttextField;
            }
            set {
                this.discounttextField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discount-amount", Order=4)]
        public decimal discountamount {
            get {
                return this.discountamountField;
            }
            set {
                this.discountamountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("post-purchase-ind", Order=5)]
        public bool postpurchaseind {
            get {
                return this.postpurchaseindField;
            }
            set {
                this.postpurchaseindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("surcharge-ind", Order=6)]
        public bool surchargeind {
            get {
                return this.surchargeindField;
            }
            set {
                this.surchargeindField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(LineDiscountInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current LineDiscountInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an LineDiscountInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output LineDiscountInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out LineDiscountInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(LineDiscountInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out LineDiscountInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static LineDiscountInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((LineDiscountInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current LineDiscountInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an LineDiscountInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output LineDiscountInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out LineDiscountInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(LineDiscountInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out LineDiscountInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out LineDiscountInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static LineDiscountInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static LineDiscountInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public enum LineDiscountInfoTypeDiscountcodetype {
        
        /// <remarks/>
        ARM,
        
        /// <remarks/>
        BOGO,
        
        /// <remarks/>
        SIEBEL,
        
        /// <remarks/>
        UFP,
        
        /// <remarks/>
        UPGNOW,
        
        /// <remarks/>
        WEBPROMO,
        
        /// <remarks/>
        MIR,
        
        /// <remarks/>
        INVCR,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class DiscountInfo {
        
        private string discountcodeField;
        
        private double discountamtField;
        
        private bool discountamtFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("discount-code", Order=0)]
        public string discountcode {
            get {
                return this.discountcodeField;
            }
            set {
                this.discountcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("discount-amt", Order=1)]
        public double discountamt {
            get {
                return this.discountamtField;
            }
            set {
                this.discountamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool discountamtSpecified {
            get {
                return this.discountamtFieldSpecified;
            }
            set {
                this.discountamtFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DiscountInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DiscountInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DiscountInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DiscountInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DiscountInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(DiscountInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DiscountInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DiscountInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DiscountInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DiscountInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DiscountInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DiscountInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DiscountInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(DiscountInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DiscountInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DiscountInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DiscountInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DiscountInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Feature {
        
        private List<string> phonenumberorrangeField;
        
        private System.DateTime expirationdateField;
        
        private bool expirationdateFieldSpecified;
        
        private List<AffinityAttribute> affinityField;
        
        private string featureorderkeyField;
        
        private string ltsrankField;
        
        private string featurecodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Feature class constructor
        /// </summary>
        public Feature() {
            this.affinityField = new List<AffinityAttribute>();
            this.phonenumberorrangeField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone-number-or-range", DataType="token", Order=0)]
        public List<string> phonenumberorrange {
            get {
                return this.phonenumberorrangeField;
            }
            set {
                this.phonenumberorrangeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("expiration-date", Order=1)]
        public System.DateTime expirationdate {
            get {
                return this.expirationdateField;
            }
            set {
                this.expirationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationdateSpecified {
            get {
                return this.expirationdateFieldSpecified;
            }
            set {
                this.expirationdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("affinity-attribute", IsNullable=false)]
        public List<AffinityAttribute> affinity {
            get {
                return this.affinityField;
            }
            set {
                this.affinityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature-order-key", Order=3)]
        public string featureorderkey {
            get {
                return this.featureorderkeyField;
            }
            set {
                this.featureorderkeyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("lts-rank", DataType="positiveInteger", Order=4)]
        public string ltsrank {
            get {
                return this.ltsrankField;
            }
            set {
                this.ltsrankField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute("feature-code")]
        public string featurecode {
            get {
                return this.featurecodeField;
            }
            set {
                this.featurecodeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Feature));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Feature object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Feature object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Feature object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Feature obj, out System.Exception exception) {
            exception = null;
            obj = default(Feature);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Feature obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Feature Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Feature)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Feature object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Feature object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Feature object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Feature obj, out System.Exception exception) {
            exception = null;
            obj = default(Feature);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Feature obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Feature obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Feature LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Feature LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class AffinityAttribute {
        
        private string attributecodeField;
        
        private string attributevalueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("attribute-code", Order=0)]
        public string attributecode {
            get {
                return this.attributecodeField;
            }
            set {
                this.attributecodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("attribute-value", Order=1)]
        public string attributevalue {
            get {
                return this.attributevalueField;
            }
            set {
                this.attributevalueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AffinityAttribute));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AffinityAttribute object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AffinityAttribute object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AffinityAttribute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AffinityAttribute obj, out System.Exception exception) {
            exception = null;
            obj = default(AffinityAttribute);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AffinityAttribute obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AffinityAttribute Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AffinityAttribute)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AffinityAttribute object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AffinityAttribute object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AffinityAttribute object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AffinityAttribute obj, out System.Exception exception) {
            exception = null;
            obj = default(AffinityAttribute);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AffinityAttribute obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AffinityAttribute obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AffinityAttribute LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AffinityAttribute LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Phone {
        
        private string hsnField;
        
        private string simField;
        
        private string imeiField;
        
        private string meidField;
        
        private string macidField;
        
        private string iccidField;
        
        private string activationpinField;
        
        private bool devicecheckField;
        
        private bool devicecheckFieldSpecified;
        
        private PortIn portinField;
        
        private string aliasField;
        
        private Name unitusernameField;
        
        private object itemField;
        
        private string deviceorderkeyField;
        
        private bool previouslyactivatedField;
        
        private bool previouslyactivatedFieldSpecified;
        
        private string rebatetrxidField;
        
        private PhoneUpgnowinfo upgnowinfoField;
        
        private bool installmentbillingindField;
        
        private bool installmentbillingindFieldSpecified;
        
        private PhoneLoaninfo loaninfoField;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Phone class constructor
        /// </summary>
        public Phone() {
            this.loaninfoField = new PhoneLoaninfo();
            this.upgnowinfoField = new PhoneUpgnowinfo();
            this.unitusernameField = new Name();
            this.portinField = new PortIn();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string hsn {
            get {
                return this.hsnField;
            }
            set {
                this.hsnField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string sim {
            get {
                return this.simField;
            }
            set {
                this.simField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string imei {
            get {
                return this.imeiField;
            }
            set {
                this.imeiField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string meid {
            get {
                return this.meidField;
            }
            set {
                this.meidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("mac-id", Order=4)]
        public string macid {
            get {
                return this.macidField;
            }
            set {
                this.macidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("icc-id", Order=5)]
        public string iccid {
            get {
                return this.iccidField;
            }
            set {
                this.iccidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-pin", Order=6)]
        public string activationpin {
            get {
                return this.activationpinField;
            }
            set {
                this.activationpinField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-check", Order=7)]
        public bool devicecheck {
            get {
                return this.devicecheckField;
            }
            set {
                this.devicecheckField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool devicecheckSpecified {
            get {
                return this.devicecheckFieldSpecified;
            }
            set {
                this.devicecheckFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("port-in", Order=8)]
        public PortIn portin {
            get {
                return this.portinField;
            }
            set {
                this.portinField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("unit-user-name", Order=10)]
        public Name unitusername {
            get {
                return this.unitusernameField;
            }
            set {
                this.unitusernameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-zip-code", typeof(string), Order=11)]
        [System.Xml.Serialization.XmlElementAttribute("service-area-address", typeof(Address), Order=11)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-order-key", Order=12)]
        public string deviceorderkey {
            get {
                return this.deviceorderkeyField;
            }
            set {
                this.deviceorderkeyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("previously-activated", Order=13)]
        public bool previouslyactivated {
            get {
                return this.previouslyactivatedField;
            }
            set {
                this.previouslyactivatedField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool previouslyactivatedSpecified {
            get {
                return this.previouslyactivatedFieldSpecified;
            }
            set {
                this.previouslyactivatedFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("rebate-trx-id", Order=14)]
        public string rebatetrxid {
            get {
                return this.rebatetrxidField;
            }
            set {
                this.rebatetrxidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("upg-now-info", Order=15)]
        public PhoneUpgnowinfo upgnowinfo {
            get {
                return this.upgnowinfoField;
            }
            set {
                this.upgnowinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("installment-billing-ind", Order=16)]
        public bool installmentbillingind {
            get {
                return this.installmentbillingindField;
            }
            set {
                this.installmentbillingindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool installmentbillingindSpecified {
            get {
                return this.installmentbillingindFieldSpecified;
            }
            set {
                this.installmentbillingindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("loan-info", Order=17)]
        public PhoneLoaninfo loaninfo {
            get {
                return this.loaninfoField;
            }
            set {
                this.loaninfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Phone));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Phone object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Phone object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Phone object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Phone obj, out System.Exception exception) {
            exception = null;
            obj = default(Phone);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Phone obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Phone Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Phone)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Phone object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Phone object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Phone object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Phone obj, out System.Exception exception) {
            exception = null;
            obj = default(Phone);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Phone obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Phone obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Phone LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Phone LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class PortIn {
        
        private string portinnumberField;
        
        private string oldserviceprovidernameField;
        
        private string oldserviceprovideridField;
        
        private string oldaccountidField;
        
        private string oldaccountpasswordField;
        
        private Name oldaccountnameField;
        
        private string oldcompanynameField;
        
        private Address oldaccountaddressField;
        
        private string itemField;
        
        private ItemChoiceType5 itemElementNameField;
        
        private string eligibilityresponsecodeField;
        
        private string eligibilityresponsedetailsField;
        
        private string lrnField;
        
        private bool failedportcontinueField;
        
        private bool failedportcontinueFieldSpecified;
        
        private System.DateTime portindateField;
        
        private bool portindateFieldSpecified;
        
        private bool manualportindField;
        
        private bool manualportindFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PortIn class constructor
        /// </summary>
        public PortIn() {
            this.oldaccountaddressField = new Address();
            this.oldaccountnameField = new Name();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("port-in-number", Order=0)]
        public string portinnumber {
            get {
                return this.portinnumberField;
            }
            set {
                this.portinnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("old-service-provider-name", Order=1)]
        public string oldserviceprovidername {
            get {
                return this.oldserviceprovidernameField;
            }
            set {
                this.oldserviceprovidernameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("old-service-provider-id", Order=2)]
        public string oldserviceproviderid {
            get {
                return this.oldserviceprovideridField;
            }
            set {
                this.oldserviceprovideridField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("old-account-id", Order=3)]
        public string oldaccountid {
            get {
                return this.oldaccountidField;
            }
            set {
                this.oldaccountidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("old-account-password", Order=4)]
        public string oldaccountpassword {
            get {
                return this.oldaccountpasswordField;
            }
            set {
                this.oldaccountpasswordField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("old-account-name", Order=5)]
        public Name oldaccountname {
            get {
                return this.oldaccountnameField;
            }
            set {
                this.oldaccountnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("old-company-name", Order=6)]
        public string oldcompanyname {
            get {
                return this.oldcompanynameField;
            }
            set {
                this.oldcompanynameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("old-account-address", Order=7)]
        public Address oldaccountaddress {
            get {
                return this.oldaccountaddressField;
            }
            set {
                this.oldaccountaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("old-account-federal-tax-id", typeof(string), Order=8)]
        [System.Xml.Serialization.XmlElementAttribute("old-account-ssn", typeof(string), Order=8)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType5 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("eligibility-response-code", Order=10)]
        public string eligibilityresponsecode {
            get {
                return this.eligibilityresponsecodeField;
            }
            set {
                this.eligibilityresponsecodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("eligibility-response-details", Order=11)]
        public string eligibilityresponsedetails {
            get {
                return this.eligibilityresponsedetailsField;
            }
            set {
                this.eligibilityresponsedetailsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        public string lrn {
            get {
                return this.lrnField;
            }
            set {
                this.lrnField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("failed-port-continue", Order=13)]
        public bool failedportcontinue {
            get {
                return this.failedportcontinueField;
            }
            set {
                this.failedportcontinueField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool failedportcontinueSpecified {
            get {
                return this.failedportcontinueFieldSpecified;
            }
            set {
                this.failedportcontinueFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("port-in-date", DataType="date", Order=14)]
        public System.DateTime portindate {
            get {
                return this.portindateField;
            }
            set {
                this.portindateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool portindateSpecified {
            get {
                return this.portindateFieldSpecified;
            }
            set {
                this.portindateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("manual-port-ind", Order=15)]
        public bool manualportind {
            get {
                return this.manualportindField;
            }
            set {
                this.manualportindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool manualportindSpecified {
            get {
                return this.manualportindFieldSpecified;
            }
            set {
                this.manualportindFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PortIn));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PortIn object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PortIn object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PortIn object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PortIn obj, out System.Exception exception) {
            exception = null;
            obj = default(PortIn);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PortIn obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PortIn Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PortIn)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PortIn object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PortIn object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PortIn object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PortIn obj, out System.Exception exception) {
            exception = null;
            obj = default(PortIn);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PortIn obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PortIn obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PortIn LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PortIn LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType5 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("old-account-federal-tax-id")]
        oldaccountfederaltaxid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("old-account-ssn")]
        oldaccountssn,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class PhoneUpgnowinfo {
        
        private string chargecodeField;
        
        private double chargeamtField;
        
        private string buybackesnField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("charge-code", Order=0)]
        public string chargecode {
            get {
                return this.chargecodeField;
            }
            set {
                this.chargecodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("charge-amt", Order=1)]
        public double chargeamt {
            get {
                return this.chargeamtField;
            }
            set {
                this.chargeamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("buy-back-esn", Order=2)]
        public string buybackesn {
            get {
                return this.buybackesnField;
            }
            set {
                this.buybackesnField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PhoneUpgnowinfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PhoneUpgnowinfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PhoneUpgnowinfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PhoneUpgnowinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PhoneUpgnowinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PhoneUpgnowinfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PhoneUpgnowinfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PhoneUpgnowinfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PhoneUpgnowinfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PhoneUpgnowinfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PhoneUpgnowinfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PhoneUpgnowinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PhoneUpgnowinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PhoneUpgnowinfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PhoneUpgnowinfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PhoneUpgnowinfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PhoneUpgnowinfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PhoneUpgnowinfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class PhoneLoaninfo {
        
        private int loannumberField;
        
        private bool loannumberFieldSpecified;
        
        private decimal loanamtField;
        
        private decimal loandownpaymentamtField;
        
        private decimal installmentamtField;
        
        private decimal lastinstallmentamtField;
        
        private int loantermField;
        
        private decimal estimatedloanequipmenttaxField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("loan-number", Order=0)]
        public int loannumber {
            get {
                return this.loannumberField;
            }
            set {
                this.loannumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool loannumberSpecified {
            get {
                return this.loannumberFieldSpecified;
            }
            set {
                this.loannumberFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("loan-amt", Order=1)]
        public decimal loanamt {
            get {
                return this.loanamtField;
            }
            set {
                this.loanamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("loan-down-payment-amt", Order=2)]
        public decimal loandownpaymentamt {
            get {
                return this.loandownpaymentamtField;
            }
            set {
                this.loandownpaymentamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("installment-amt", Order=3)]
        public decimal installmentamt {
            get {
                return this.installmentamtField;
            }
            set {
                this.installmentamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("last-installment-amt", Order=4)]
        public decimal lastinstallmentamt {
            get {
                return this.lastinstallmentamtField;
            }
            set {
                this.lastinstallmentamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("loan-term", Order=5)]
        public int loanterm {
            get {
                return this.loantermField;
            }
            set {
                this.loantermField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("estimated-loan-equipment-tax", Order=6)]
        public decimal estimatedloanequipmenttax {
            get {
                return this.estimatedloanequipmenttaxField;
            }
            set {
                this.estimatedloanequipmenttaxField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PhoneLoaninfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PhoneLoaninfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PhoneLoaninfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PhoneLoaninfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PhoneLoaninfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PhoneLoaninfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PhoneLoaninfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PhoneLoaninfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PhoneLoaninfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PhoneLoaninfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PhoneLoaninfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PhoneLoaninfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PhoneLoaninfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PhoneLoaninfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PhoneLoaninfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PhoneLoaninfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PhoneLoaninfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PhoneLoaninfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class PlanActupgfee {
        
        private string chargecodeField;
        
        private double chargeamtField;
        
        private bool chargeamtFieldSpecified;
        
        private string chargeadjustcodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("charge-code", Order=0)]
        public string chargecode {
            get {
                return this.chargecodeField;
            }
            set {
                this.chargecodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("charge-amt", Order=1)]
        public double chargeamt {
            get {
                return this.chargeamtField;
            }
            set {
                this.chargeamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool chargeamtSpecified {
            get {
                return this.chargeamtFieldSpecified;
            }
            set {
                this.chargeamtFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("charge-adjust-code", Order=2)]
        public string chargeadjustcode {
            get {
                return this.chargeadjustcodeField;
            }
            set {
                this.chargeadjustcodeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PlanActupgfee));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PlanActupgfee object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PlanActupgfee object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PlanActupgfee object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PlanActupgfee obj, out System.Exception exception) {
            exception = null;
            obj = default(PlanActupgfee);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PlanActupgfee obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PlanActupgfee Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PlanActupgfee)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PlanActupgfee object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PlanActupgfee object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PlanActupgfee object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PlanActupgfee obj, out System.Exception exception) {
            exception = null;
            obj = default(PlanActupgfee);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PlanActupgfee obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PlanActupgfee obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PlanActupgfee LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PlanActupgfee LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ServiceTypeMigration {
        
        private bool migrationindField;
        
        private bool migrationindFieldSpecified;
        
        private string migrationptnField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("migration-ind", Order=0)]
        public bool migrationind {
            get {
                return this.migrationindField;
            }
            set {
                this.migrationindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool migrationindSpecified {
            get {
                return this.migrationindFieldSpecified;
            }
            set {
                this.migrationindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("migration-ptn", Order=1)]
        public string migrationptn {
            get {
                return this.migrationptnField;
            }
            set {
                this.migrationptnField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceTypeMigration));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceTypeMigration object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceTypeMigration object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceTypeMigration object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceTypeMigration obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceTypeMigration);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceTypeMigration obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceTypeMigration Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceTypeMigration)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceTypeMigration object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceTypeMigration object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceTypeMigration object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceTypeMigration obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceTypeMigration);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceTypeMigration obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceTypeMigration obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceTypeMigration LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceTypeMigration LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class OrderShippingType {
        
        private string methodField;
        
        private string vendorField;
        
        private System.DateTime requestedshipdateField;
        
        private bool requestedshipdateFieldSpecified;
        
        private YesNoType completeshipmentField;
        
        private string shippingchargecodeField;
        
        private string shippingchargediscountField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        public OrderShippingType() {
            this.completeshipmentField = YesNoType.N;
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string method {
            get {
                return this.methodField;
            }
            set {
                this.methodField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vendor {
            get {
                return this.vendorField;
            }
            set {
                this.vendorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("requested-ship-date", DataType="date", Order=2)]
        public System.DateTime requestedshipdate {
            get {
                return this.requestedshipdateField;
            }
            set {
                this.requestedshipdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool requestedshipdateSpecified {
            get {
                return this.requestedshipdateFieldSpecified;
            }
            set {
                this.requestedshipdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("complete-shipment", Order=3)]
        [System.ComponentModel.DefaultValueAttribute(YesNoType.N)]
        public YesNoType completeshipment {
            get {
                return this.completeshipmentField;
            }
            set {
                this.completeshipmentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("shipping-charge-code", Order=4)]
        public string shippingchargecode {
            get {
                return this.shippingchargecodeField;
            }
            set {
                this.shippingchargecodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("shipping-charge-discount", DataType="integer", Order=5)]
        public string shippingchargediscount {
            get {
                return this.shippingchargediscountField;
            }
            set {
                this.shippingchargediscountField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OrderShippingType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrderShippingType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OrderShippingType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrderShippingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OrderShippingType obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderShippingType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OrderShippingType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OrderShippingType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OrderShippingType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OrderShippingType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OrderShippingType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrderShippingType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OrderShippingType obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderShippingType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OrderShippingType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OrderShippingType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OrderShippingType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static OrderShippingType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ActivationRequestBuyback {
        
        private string buybackdevicekeyField;
        
        private string devicemanufactureField;
        
        private string modelField;
        
        private string buybackcarrierField;
        
        private string equipmentidField;
        
        private decimal eqpbuybackpriceField;
        
        private ActivationRequestBuybackDonationind donationindField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("buy-back-device-key", Order=0)]
        public string buybackdevicekey {
            get {
                return this.buybackdevicekeyField;
            }
            set {
                this.buybackdevicekeyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-manufacture", Order=1)]
        public string devicemanufacture {
            get {
                return this.devicemanufactureField;
            }
            set {
                this.devicemanufactureField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string model {
            get {
                return this.modelField;
            }
            set {
                this.modelField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("buy-back-carrier", Order=3)]
        public string buybackcarrier {
            get {
                return this.buybackcarrierField;
            }
            set {
                this.buybackcarrierField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("equipment-id", Order=4)]
        public string equipmentid {
            get {
                return this.equipmentidField;
            }
            set {
                this.equipmentidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("eqp-buy-back-price", Order=5)]
        public decimal eqpbuybackprice {
            get {
                return this.eqpbuybackpriceField;
            }
            set {
                this.eqpbuybackpriceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("donation-ind", Order=6)]
        public ActivationRequestBuybackDonationind donationind {
            get {
                return this.donationindField;
            }
            set {
                this.donationindField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationRequestBuyback));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationRequestBuyback object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationRequestBuyback object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationRequestBuyback object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationRequestBuyback obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequestBuyback);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationRequestBuyback obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationRequestBuyback Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationRequestBuyback)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivationRequestBuyback object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivationRequestBuyback object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivationRequestBuyback object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivationRequestBuyback obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationRequestBuyback);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequestBuyback obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivationRequestBuyback obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivationRequestBuyback LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivationRequestBuyback LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public enum ActivationRequestBuybackDonationind {
        
        /// <remarks/>
        Y,
        
        /// <remarks/>
        N,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class SiebelOfferInfoType {
        
        private string siebelofferidField;
        
        private string siebelcampaignidField;
        
        private string siebelprogramidField;
        
        private string offerlevelField;
        
        private string offeruseridField;
        
        private List<string> siebelsubscriberlistField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SiebelOfferInfoType class constructor
        /// </summary>
        public SiebelOfferInfoType() {
            this.siebelsubscriberlistField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("siebel-offer-id", Order=0)]
        public string siebelofferid {
            get {
                return this.siebelofferidField;
            }
            set {
                this.siebelofferidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("siebel-campaign-id", Order=1)]
        public string siebelcampaignid {
            get {
                return this.siebelcampaignidField;
            }
            set {
                this.siebelcampaignidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("siebel-program-id", DataType="positiveInteger", Order=2)]
        public string siebelprogramid {
            get {
                return this.siebelprogramidField;
            }
            set {
                this.siebelprogramidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("offer-level", Order=3)]
        public string offerlevel {
            get {
                return this.offerlevelField;
            }
            set {
                this.offerlevelField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("offer-user-id", Order=4)]
        public string offeruserid {
            get {
                return this.offeruseridField;
            }
            set {
                this.offeruseridField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("siebel-subscriber-list", Order=5)]
        [System.Xml.Serialization.XmlArrayItemAttribute("subscriber-id", IsNullable=false)]
        public List<string> siebelsubscriberlist {
            get {
                return this.siebelsubscriberlistField;
            }
            set {
                this.siebelsubscriberlistField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SiebelOfferInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SiebelOfferInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SiebelOfferInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SiebelOfferInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SiebelOfferInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(SiebelOfferInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SiebelOfferInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SiebelOfferInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SiebelOfferInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SiebelOfferInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SiebelOfferInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SiebelOfferInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SiebelOfferInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(SiebelOfferInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SiebelOfferInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SiebelOfferInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SiebelOfferInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SiebelOfferInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doActivationResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ActivationResponse {
        
        private System.DateTime orderdateField;
        
        private bool orderdateFieldSpecified;
        
        private System.DateTime activationdateField;
        
        private bool activationdateFieldSpecified;
        
        private string firstnameField;
        
        private string lastnameField;
        
        private string saleschannelField;
        
        private List<object> serviceField;
        
        private decimal activationfeeField;
        
        private bool activationfeeFieldSpecified;
        
        private string accountnumberField;
        
        private System.DateTime anniversarydateField;
        
        private bool anniversarydateFieldSpecified;
        
        private bool rccpallowedField;
        
        private bool rccpallowedFieldSpecified;
        
        private string commentField;
        
        private FulfillmentData orderfulfillmentField;
        
        private List<Promotion> appliedpromosField;
        
        private System.DateTime expirationdateField;
        
        private bool expirationdateFieldSpecified;
        
        private System.DateTime cancellationdateField;
        
        private bool cancellationdateFieldSpecified;
        
        private string errorreasonField;
        
        private string nextstepsField;
        
        private decimal lowbalthresholdField;
        
        private bool lowbalthresholdFieldSpecified;
        
        private decimal reactivationfeeField;
        
        private bool reactivationfeeFieldSpecified;
        
        private decimal minamountField;
        
        private bool minamountFieldSpecified;
        
        private string futureportinnumberField;
        
        private decimal currentbalanceField;
        
        private bool currentbalanceFieldSpecified;
        
        private string activationtalkingpointsField;
        
        private string offerTrxIdField;
        
        private string ebillemailField;
        
        private string sprintorderidField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivationResponse class constructor
        /// </summary>
        public ActivationResponse() {
            this.appliedpromosField = new List<Promotion>();
            this.orderfulfillmentField = new FulfillmentData();
            this.serviceField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-date", Order=0)]
        public System.DateTime orderdate {
            get {
                return this.orderdateField;
            }
            set {
                this.orderdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool orderdateSpecified {
            get {
                return this.orderdateFieldSpecified;
            }
            set {
                this.orderdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-date", Order=1)]
        public System.DateTime activationdate {
            get {
                return this.activationdateField;
            }
            set {
                this.activationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activationdateSpecified {
            get {
                return this.activationdateFieldSpecified;
            }
            set {
                this.activationdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("first-name", Order=2)]
        public string firstname {
            get {
                return this.firstnameField;
            }
            set {
                this.firstnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("last-name", Order=3)]
        public string lastname {
            get {
                return this.lastnameField;
            }
            set {
                this.lastnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sales-channel", Order=4)]
        public string saleschannel {
            get {
                return this.saleschannelField;
            }
            set {
                this.saleschannelField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=5)]
        [System.Xml.Serialization.XmlArrayItemAttribute("accessory", typeof(ActivationResponseAccessory), IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("plan", typeof(ActivationResponsePlan), IsNullable=false)]
        public List<object> service {
            get {
                return this.serviceField;
            }
            set {
                this.serviceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-fee", Order=6)]
        public decimal activationfee {
            get {
                return this.activationfeeField;
            }
            set {
                this.activationfeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activationfeeSpecified {
            get {
                return this.activationfeeFieldSpecified;
            }
            set {
                this.activationfeeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", Order=7)]
        public string accountnumber {
            get {
                return this.accountnumberField;
            }
            set {
                this.accountnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("anniversary-date", DataType="date", Order=8)]
        public System.DateTime anniversarydate {
            get {
                return this.anniversarydateField;
            }
            set {
                this.anniversarydateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool anniversarydateSpecified {
            get {
                return this.anniversarydateFieldSpecified;
            }
            set {
                this.anniversarydateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("rccp-allowed", Order=9)]
        public bool rccpallowed {
            get {
                return this.rccpallowedField;
            }
            set {
                this.rccpallowedField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool rccpallowedSpecified {
            get {
                return this.rccpallowedFieldSpecified;
            }
            set {
                this.rccpallowedFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-fulfillment", Order=11)]
        public FulfillmentData orderfulfillment {
            get {
                return this.orderfulfillmentField;
            }
            set {
                this.orderfulfillmentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("applied-promos", Order=12)]
        [System.Xml.Serialization.XmlArrayItemAttribute("promo", IsNullable=false)]
        public List<Promotion> appliedpromos {
            get {
                return this.appliedpromosField;
            }
            set {
                this.appliedpromosField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("expiration-date", Order=13)]
        public System.DateTime expirationdate {
            get {
                return this.expirationdateField;
            }
            set {
                this.expirationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationdateSpecified {
            get {
                return this.expirationdateFieldSpecified;
            }
            set {
                this.expirationdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cancellation-date", Order=14)]
        public System.DateTime cancellationdate {
            get {
                return this.cancellationdateField;
            }
            set {
                this.cancellationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cancellationdateSpecified {
            get {
                return this.cancellationdateFieldSpecified;
            }
            set {
                this.cancellationdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("error-reason", Order=15)]
        public string errorreason {
            get {
                return this.errorreasonField;
            }
            set {
                this.errorreasonField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("next-steps", Order=16)]
        public string nextsteps {
            get {
                return this.nextstepsField;
            }
            set {
                this.nextstepsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("low-bal-threshold", Order=17)]
        public decimal lowbalthreshold {
            get {
                return this.lowbalthresholdField;
            }
            set {
                this.lowbalthresholdField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lowbalthresholdSpecified {
            get {
                return this.lowbalthresholdFieldSpecified;
            }
            set {
                this.lowbalthresholdFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("reactivation-fee", Order=18)]
        public decimal reactivationfee {
            get {
                return this.reactivationfeeField;
            }
            set {
                this.reactivationfeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool reactivationfeeSpecified {
            get {
                return this.reactivationfeeFieldSpecified;
            }
            set {
                this.reactivationfeeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("min-amount", Order=19)]
        public decimal minamount {
            get {
                return this.minamountField;
            }
            set {
                this.minamountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool minamountSpecified {
            get {
                return this.minamountFieldSpecified;
            }
            set {
                this.minamountFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("future-port-in-number", Order=20)]
        public string futureportinnumber {
            get {
                return this.futureportinnumberField;
            }
            set {
                this.futureportinnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("current-balance", Order=21)]
        public decimal currentbalance {
            get {
                return this.currentbalanceField;
            }
            set {
                this.currentbalanceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool currentbalanceSpecified {
            get {
                return this.currentbalanceFieldSpecified;
            }
            set {
                this.currentbalanceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-talking-points", Order=22)]
        public string activationtalkingpoints {
            get {
                return this.activationtalkingpointsField;
            }
            set {
                this.activationtalkingpointsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("Offer-Trx-Id", Order=23)]
        public string OfferTrxId {
            get {
                return this.offerTrxIdField;
            }
            set {
                this.offerTrxIdField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ebill-email", Order=24)]
        public string ebillemail {
            get {
                return this.ebillemailField;
            }
            set {
                this.ebillemailField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sprint-order-id", Order=25)]
        public string sprintorderid {
            get {
                return this.sprintorderidField;
            }
            set {
                this.sprintorderidField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivationResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivationResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivationResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivationResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivationResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivationResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ActivationResponseAccessory {
        
        private string accessoryorderkeyField;
        
        private ulong idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("accessory-order-key", Order=0)]
        public string accessoryorderkey {
            get {
                return this.accessoryorderkeyField;
            }
            set {
                this.accessoryorderkeyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ulong id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationResponseAccessory));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationResponseAccessory object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationResponseAccessory object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationResponseAccessory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationResponseAccessory obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationResponseAccessory);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationResponseAccessory obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationResponseAccessory Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationResponseAccessory)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivationResponseAccessory object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivationResponseAccessory object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivationResponseAccessory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivationResponseAccessory obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationResponseAccessory);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivationResponseAccessory obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivationResponseAccessory obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivationResponseAccessory LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivationResponseAccessory LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ActivationResponsePlan {
        
        private List<PhoneResponse> phoneField;
        
        private string resultdetailsField;
        
        private ulong idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivationResponsePlan class constructor
        /// </summary>
        public ActivationResponsePlan() {
            this.phoneField = new List<PhoneResponse>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone", Order=0)]
        public List<PhoneResponse> phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("result-details", Order=1)]
        public string resultdetails {
            get {
                return this.resultdetailsField;
            }
            set {
                this.resultdetailsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ulong id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivationResponsePlan));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivationResponsePlan object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivationResponsePlan object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivationResponsePlan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivationResponsePlan obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationResponsePlan);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivationResponsePlan obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivationResponsePlan Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivationResponsePlan)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivationResponsePlan object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivationResponsePlan object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivationResponsePlan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivationResponsePlan obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivationResponsePlan);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivationResponsePlan obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivationResponsePlan obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivationResponsePlan LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivationResponsePlan LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class PhoneResponse {
        
        private string subscriberidField;
        
        private List<string> itemsField;
        
        private List<ItemsChoiceType3> itemsElementNameField;
        
        private string primaryptnField;
        
        private string secondaryptnField;
        
        private string ufmiField;
        
        private string ipaddressField;
        
        private ActivationResult resultField;
        
        private bool resultFieldSpecified;
        
        private string portintemporaryptnField;
        
        private System.DateTime portindateField;
        
        private bool portindateFieldSpecified;
        
        private string naiField;
        
        private string msidField;
        
        private string masterlockcodeField;
        
        private string onetimelockcodeField;
        
        private string sidField;
        
        private string hppttidField;
        
        private decimal equipmentrebateamountField;
        
        private bool equipmentrebateamountFieldSpecified;
        
        private decimal activationfeeforhandsetField;
        
        private bool activationfeeforhandsetFieldSpecified;
        
        private List<ActivatedService> activatedservicesField;
        
        private string programinstructionsField;
        
        private string deviceorderkeyField;
        
        private string planorderkeyField;
        
        private bool existingcontractField;
        
        private bool existingcontractFieldSpecified;
        
        private string meidhexField;
        
        private bool previouslyactivatedField;
        
        private bool previouslyactivatedFieldSpecified;
        
        private string modelidField;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PhoneResponse class constructor
        /// </summary>
        public PhoneResponse() {
            this.activatedservicesField = new List<ActivatedService>();
            this.itemsElementNameField = new List<ItemsChoiceType3>();
            this.itemsField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-id", Order=0)]
        public string subscriberid {
            get {
                return this.subscriberidField;
            }
            set {
                this.subscriberidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("hsn", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("icc-id", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("imei", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("mac-id", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("meid", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("sim", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<string> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType3> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("primary-ptn", Order=3)]
        public string primaryptn {
            get {
                return this.primaryptnField;
            }
            set {
                this.primaryptnField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("secondary-ptn", Order=4)]
        public string secondaryptn {
            get {
                return this.secondaryptnField;
            }
            set {
                this.secondaryptnField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public string ufmi {
            get {
                return this.ufmiField;
            }
            set {
                this.ufmiField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ip-address", Order=6)]
        public string ipaddress {
            get {
                return this.ipaddressField;
            }
            set {
                this.ipaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public ActivationResult result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resultSpecified {
            get {
                return this.resultFieldSpecified;
            }
            set {
                this.resultFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("port-in-temporary-ptn", Order=8)]
        public string portintemporaryptn {
            get {
                return this.portintemporaryptnField;
            }
            set {
                this.portintemporaryptnField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("port-in-date", Order=9)]
        public System.DateTime portindate {
            get {
                return this.portindateField;
            }
            set {
                this.portindateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool portindateSpecified {
            get {
                return this.portindateFieldSpecified;
            }
            set {
                this.portindateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=10)]
        public string nai {
            get {
                return this.naiField;
            }
            set {
                this.naiField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public string msid {
            get {
                return this.msidField;
            }
            set {
                this.msidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("master-lock-code", Order=12)]
        public string masterlockcode {
            get {
                return this.masterlockcodeField;
            }
            set {
                this.masterlockcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("one-time-lock-code", Order=13)]
        public string onetimelockcode {
            get {
                return this.onetimelockcodeField;
            }
            set {
                this.onetimelockcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string sid {
            get {
                return this.sidField;
            }
            set {
                this.sidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("hpptt-id", Order=15)]
        public string hppttid {
            get {
                return this.hppttidField;
            }
            set {
                this.hppttidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("equipment-rebate-amount", Order=16)]
        public decimal equipmentrebateamount {
            get {
                return this.equipmentrebateamountField;
            }
            set {
                this.equipmentrebateamountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool equipmentrebateamountSpecified {
            get {
                return this.equipmentrebateamountFieldSpecified;
            }
            set {
                this.equipmentrebateamountFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-fee-for-handset", Order=17)]
        public decimal activationfeeforhandset {
            get {
                return this.activationfeeforhandsetField;
            }
            set {
                this.activationfeeforhandsetField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activationfeeforhandsetSpecified {
            get {
                return this.activationfeeforhandsetFieldSpecified;
            }
            set {
                this.activationfeeforhandsetFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("activated-services", Order=18)]
        [System.Xml.Serialization.XmlArrayItemAttribute("activated-service", IsNullable=false)]
        public List<ActivatedService> activatedservices {
            get {
                return this.activatedservicesField;
            }
            set {
                this.activatedservicesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("program-instructions", Order=19)]
        public string programinstructions {
            get {
                return this.programinstructionsField;
            }
            set {
                this.programinstructionsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-order-key", Order=20)]
        public string deviceorderkey {
            get {
                return this.deviceorderkeyField;
            }
            set {
                this.deviceorderkeyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-order-key", Order=21)]
        public string planorderkey {
            get {
                return this.planorderkeyField;
            }
            set {
                this.planorderkeyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("existing-contract", Order=22)]
        public bool existingcontract {
            get {
                return this.existingcontractField;
            }
            set {
                this.existingcontractField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool existingcontractSpecified {
            get {
                return this.existingcontractFieldSpecified;
            }
            set {
                this.existingcontractFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("meid-hex", Order=23)]
        public string meidhex {
            get {
                return this.meidhexField;
            }
            set {
                this.meidhexField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("previously-activated", Order=24)]
        public bool previouslyactivated {
            get {
                return this.previouslyactivatedField;
            }
            set {
                this.previouslyactivatedField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool previouslyactivatedSpecified {
            get {
                return this.previouslyactivatedFieldSpecified;
            }
            set {
                this.previouslyactivatedFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("model-id", Order=25)]
        public string modelid {
            get {
                return this.modelidField;
            }
            set {
                this.modelidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PhoneResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PhoneResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PhoneResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PhoneResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PhoneResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(PhoneResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PhoneResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PhoneResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PhoneResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PhoneResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PhoneResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PhoneResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PhoneResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(PhoneResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PhoneResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PhoneResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PhoneResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PhoneResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType3 {
        
        /// <remarks/>
        hsn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("icc-id")]
        iccid,
        
        /// <remarks/>
        imei,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mac-id")]
        macid,
        
        /// <remarks/>
        meid,
        
        /// <remarks/>
        sim,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum ActivationResult {
        
        /// <remarks/>
        SUCCESS,
        
        /// <remarks/>
        FAILED,
        
        /// <remarks/>
        CANCELLED,
        
        /// <remarks/>
        NOT_VALIDATED,
        
        /// <remarks/>
        VALID,
        
        /// <remarks/>
        INVALID_IMEI,
        
        /// <remarks/>
        INVALID_SIM,
        
        /// <remarks/>
        ACTIVE_IMEI,
        
        /// <remarks/>
        ACTIVE_SIM,
        
        /// <remarks/>
        NEGATIVE_IMEI,
        
        /// <remarks/>
        NEGATIVE_SIM,
        
        /// <remarks/>
        INVALID_EQUIP,
        
        /// <remarks/>
        RATE_CENTER_MISMATCH,
        
        /// <remarks/>
        INVALID_ESN,
        
        /// <remarks/>
        NEGATIVE_ESN,
        
        /// <remarks/>
        ACTIVE_ESN,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ActivatedService {
        
        private string codeField;
        
        private ActivatedServiceCodetype codetypeField;
        
        private bool codetypeFieldSpecified;
        
        private string nameField;
        
        private PlanType plantypeField;
        
        private bool plantypeFieldSpecified;
        
        private decimal monthlychargeField;
        
        private bool monthlychargeFieldSpecified;
        
        private System.DateTime startdateField;
        
        private bool startdateFieldSpecified;
        
        private System.DateTime expiredateField;
        
        private bool expiredateFieldSpecified;
        
        private string featureorderkeyField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("code-type", Order=1)]
        public ActivatedServiceCodetype codetype {
            get {
                return this.codetypeField;
            }
            set {
                this.codetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool codetypeSpecified {
            get {
                return this.codetypeFieldSpecified;
            }
            set {
                this.codetypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-type", Order=3)]
        public PlanType plantype {
            get {
                return this.plantypeField;
            }
            set {
                this.plantypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool plantypeSpecified {
            get {
                return this.plantypeFieldSpecified;
            }
            set {
                this.plantypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("monthly-charge", Order=4)]
        public decimal monthlycharge {
            get {
                return this.monthlychargeField;
            }
            set {
                this.monthlychargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool monthlychargeSpecified {
            get {
                return this.monthlychargeFieldSpecified;
            }
            set {
                this.monthlychargeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("start-date", DataType="date", Order=5)]
        public System.DateTime startdate {
            get {
                return this.startdateField;
            }
            set {
                this.startdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool startdateSpecified {
            get {
                return this.startdateFieldSpecified;
            }
            set {
                this.startdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("expire-date", DataType="date", Order=6)]
        public System.DateTime expiredate {
            get {
                return this.expiredateField;
            }
            set {
                this.expiredateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expiredateSpecified {
            get {
                return this.expiredateFieldSpecified;
            }
            set {
                this.expiredateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature-order-key", Order=7)]
        public string featureorderkey {
            get {
                return this.featureorderkeyField;
            }
            set {
                this.featureorderkeyField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivatedService));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivatedService object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivatedService object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivatedService object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivatedService obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivatedService);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivatedService obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivatedService Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivatedService)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivatedService object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivatedService object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivatedService object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivatedService obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivatedService);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivatedService obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivatedService obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivatedService LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivatedService LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public enum ActivatedServiceCodetype {
        
        /// <remarks/>
        PricePlan,
        
        /// <remarks/>
        Feature,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class FulfillmentData {
        
        private FulfillmentDataFulfillmentcost fulfillmentcostField;
        
        private FulfillmentDataFulfillmentshipping fulfillmentshippingField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// FulfillmentData class constructor
        /// </summary>
        public FulfillmentData() {
            this.fulfillmentshippingField = new FulfillmentDataFulfillmentshipping();
            this.fulfillmentcostField = new FulfillmentDataFulfillmentcost();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("fulfillment-cost", Order=0)]
        public FulfillmentDataFulfillmentcost fulfillmentcost {
            get {
                return this.fulfillmentcostField;
            }
            set {
                this.fulfillmentcostField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("fulfillment-shipping", Order=1)]
        public FulfillmentDataFulfillmentshipping fulfillmentshipping {
            get {
                return this.fulfillmentshippingField;
            }
            set {
                this.fulfillmentshippingField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FulfillmentData));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FulfillmentData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FulfillmentData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FulfillmentData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FulfillmentData obj, out System.Exception exception) {
            exception = null;
            obj = default(FulfillmentData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FulfillmentData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FulfillmentData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FulfillmentData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FulfillmentData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FulfillmentData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FulfillmentData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out FulfillmentData obj, out System.Exception exception) {
            exception = null;
            obj = default(FulfillmentData);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FulfillmentData obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out FulfillmentData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FulfillmentData LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static FulfillmentData LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class FulfillmentDataFulfillmentcost {
        
        private decimal totalField;
        
        private decimal totalequipmentField;
        
        private decimal shippingField;
        
        private decimal taxesField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public decimal total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("total-equipment", Order=1)]
        public decimal totalequipment {
            get {
                return this.totalequipmentField;
            }
            set {
                this.totalequipmentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public decimal shipping {
            get {
                return this.shippingField;
            }
            set {
                this.shippingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public decimal taxes {
            get {
                return this.taxesField;
            }
            set {
                this.taxesField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FulfillmentDataFulfillmentcost));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FulfillmentDataFulfillmentcost object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FulfillmentDataFulfillmentcost object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FulfillmentDataFulfillmentcost object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FulfillmentDataFulfillmentcost obj, out System.Exception exception) {
            exception = null;
            obj = default(FulfillmentDataFulfillmentcost);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FulfillmentDataFulfillmentcost obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FulfillmentDataFulfillmentcost Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FulfillmentDataFulfillmentcost)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FulfillmentDataFulfillmentcost object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FulfillmentDataFulfillmentcost object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FulfillmentDataFulfillmentcost object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out FulfillmentDataFulfillmentcost obj, out System.Exception exception) {
            exception = null;
            obj = default(FulfillmentDataFulfillmentcost);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FulfillmentDataFulfillmentcost obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out FulfillmentDataFulfillmentcost obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FulfillmentDataFulfillmentcost LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static FulfillmentDataFulfillmentcost LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class FulfillmentDataFulfillmentshipping {
        
        private string methodField;
        
        private string vendorField;
        
        private string trackingnumberField;
        
        private System.DateTime estimateddeliverydateField;
        
        private bool estimateddeliverydateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string method {
            get {
                return this.methodField;
            }
            set {
                this.methodField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string vendor {
            get {
                return this.vendorField;
            }
            set {
                this.vendorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("tracking-number", Order=2)]
        public string trackingnumber {
            get {
                return this.trackingnumberField;
            }
            set {
                this.trackingnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("estimated-delivery-date", DataType="date", Order=3)]
        public System.DateTime estimateddeliverydate {
            get {
                return this.estimateddeliverydateField;
            }
            set {
                this.estimateddeliverydateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool estimateddeliverydateSpecified {
            get {
                return this.estimateddeliverydateFieldSpecified;
            }
            set {
                this.estimateddeliverydateFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(FulfillmentDataFulfillmentshipping));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current FulfillmentDataFulfillmentshipping object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an FulfillmentDataFulfillmentshipping object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output FulfillmentDataFulfillmentshipping object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out FulfillmentDataFulfillmentshipping obj, out System.Exception exception) {
            exception = null;
            obj = default(FulfillmentDataFulfillmentshipping);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out FulfillmentDataFulfillmentshipping obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static FulfillmentDataFulfillmentshipping Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((FulfillmentDataFulfillmentshipping)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current FulfillmentDataFulfillmentshipping object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an FulfillmentDataFulfillmentshipping object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output FulfillmentDataFulfillmentshipping object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out FulfillmentDataFulfillmentshipping obj, out System.Exception exception) {
            exception = null;
            obj = default(FulfillmentDataFulfillmentshipping);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out FulfillmentDataFulfillmentshipping obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out FulfillmentDataFulfillmentshipping obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static FulfillmentDataFulfillmentshipping LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static FulfillmentDataFulfillmentshipping LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Promotion {
        
        private string promodescField;
        
        private decimal promoamountField;
        
        private bool promoamountFieldSpecified;
        
        private string referenceptnField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("promo-desc", Order=0)]
        public string promodesc {
            get {
                return this.promodescField;
            }
            set {
                this.promodescField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("promo-amount", Order=1)]
        public decimal promoamount {
            get {
                return this.promoamountField;
            }
            set {
                this.promoamountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool promoamountSpecified {
            get {
                return this.promoamountFieldSpecified;
            }
            set {
                this.promoamountFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", Order=2)]
        public string referenceptn {
            get {
                return this.referenceptnField;
            }
            set {
                this.referenceptnField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Promotion));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Promotion object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Promotion object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Promotion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Promotion obj, out System.Exception exception) {
            exception = null;
            obj = default(Promotion);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Promotion obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Promotion Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Promotion)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Promotion object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Promotion object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Promotion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Promotion obj, out System.Exception exception) {
            exception = null;
            obj = default(Promotion);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Promotion obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Promotion obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Promotion LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Promotion LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("performAuthenticationResendPin", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class AuthenticationResendPinRequest {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType4> itemsElementNameField;
        
        private string itemField;
        
        private ItemChoiceType7 itemElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AuthenticationResendPinRequest class constructor
        /// </summary>
        public AuthenticationResendPinRequest() {
            this.itemsElementNameField = new List<ItemsChoiceType4>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("authenticate-customer", typeof(bool), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("resend-pin", typeof(bool), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("sec-answer", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("sec-pin", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType4> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", typeof(string), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", typeof(string), Order=2)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType7 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AuthenticationResendPinRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AuthenticationResendPinRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AuthenticationResendPinRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AuthenticationResendPinRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AuthenticationResendPinRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(AuthenticationResendPinRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AuthenticationResendPinRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AuthenticationResendPinRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AuthenticationResendPinRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AuthenticationResendPinRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AuthenticationResendPinRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AuthenticationResendPinRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AuthenticationResendPinRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(AuthenticationResendPinRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AuthenticationResendPinRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AuthenticationResendPinRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AuthenticationResendPinRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AuthenticationResendPinRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType4 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("authenticate-customer")]
        authenticatecustomer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("resend-pin")]
        resendpin,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sec-answer")]
        secanswer,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sec-pin")]
        secpin,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType7 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-number")]
        accountnumber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reference-ptn")]
        referenceptn,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("performAuthenticationResendPinResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class AuthenticationResendPinResponse {
        
        private YesNoType authresponseField;
        
        private bool authresponseFieldSpecified;
        
        private YesNoType resendresponseField;
        
        private bool resendresponseFieldSpecified;
        
        private List<Notification> notificationField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AuthenticationResendPinResponse class constructor
        /// </summary>
        public AuthenticationResendPinResponse() {
            this.notificationField = new List<Notification>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("auth-response", Order=0)]
        public YesNoType authresponse {
            get {
                return this.authresponseField;
            }
            set {
                this.authresponseField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool authresponseSpecified {
            get {
                return this.authresponseFieldSpecified;
            }
            set {
                this.authresponseFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("resend-response", Order=1)]
        public YesNoType resendresponse {
            get {
                return this.resendresponseField;
            }
            set {
                this.resendresponseField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool resendresponseSpecified {
            get {
                return this.resendresponseFieldSpecified;
            }
            set {
                this.resendresponseFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("notification", Order=2)]
        public List<Notification> notification {
            get {
                return this.notificationField;
            }
            set {
                this.notificationField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AuthenticationResendPinResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AuthenticationResendPinResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AuthenticationResendPinResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AuthenticationResendPinResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AuthenticationResendPinResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(AuthenticationResendPinResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AuthenticationResendPinResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AuthenticationResendPinResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AuthenticationResendPinResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AuthenticationResendPinResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AuthenticationResendPinResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AuthenticationResendPinResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AuthenticationResendPinResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(AuthenticationResendPinResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AuthenticationResendPinResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AuthenticationResendPinResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AuthenticationResendPinResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AuthenticationResendPinResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Notification {
        
        private NotificationNotificationmethod notificationmethodField;
        
        private object itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("notification-method", Order=0)]
        public NotificationNotificationmethod notificationmethod {
            get {
                return this.notificationmethodField;
            }
            set {
                this.notificationmethodField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("address-info", typeof(Address), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("notification-value", typeof(string), Order=1)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Notification));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Notification object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Notification object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Notification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Notification obj, out System.Exception exception) {
            exception = null;
            obj = default(Notification);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Notification obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Notification Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Notification)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Notification object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Notification object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Notification object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Notification obj, out System.Exception exception) {
            exception = null;
            obj = default(Notification);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Notification obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Notification obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Notification LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Notification LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public enum NotificationNotificationmethod {
        
        /// <remarks/>
        LETTER,
        
        /// <remarks/>
        EMAIL,
        
        /// <remarks/>
        SMS,
        
        /// <remarks/>
        FAX,
        
        /// <remarks/>
        EBILL,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doCoverageCheck", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class CoverageCheckRequest {
        
        private List<string> servicezipField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CoverageCheckRequest class constructor
        /// </summary>
        public CoverageCheckRequest() {
            this.servicezipField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-zip", Order=0)]
        public List<string> servicezip {
            get {
                return this.servicezipField;
            }
            set {
                this.servicezipField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CoverageCheckRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CoverageCheckRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CoverageCheckRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CoverageCheckRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CoverageCheckRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(CoverageCheckRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CoverageCheckRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CoverageCheckRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CoverageCheckRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CoverageCheckRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CoverageCheckRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CoverageCheckRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CoverageCheckRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(CoverageCheckRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CoverageCheckRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CoverageCheckRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CoverageCheckRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CoverageCheckRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doCoverageCheckResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class CoverageCheckResponse {
        
        private List<Coverage> coverageinfoField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CoverageCheckResponse class constructor
        /// </summary>
        public CoverageCheckResponse() {
            this.coverageinfoField = new List<Coverage>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("coverage-info", Order=0)]
        public List<Coverage> coverageinfo {
            get {
                return this.coverageinfoField;
            }
            set {
                this.coverageinfoField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CoverageCheckResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CoverageCheckResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CoverageCheckResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CoverageCheckResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CoverageCheckResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(CoverageCheckResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CoverageCheckResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CoverageCheckResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CoverageCheckResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CoverageCheckResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CoverageCheckResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CoverageCheckResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CoverageCheckResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(CoverageCheckResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CoverageCheckResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CoverageCheckResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CoverageCheckResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CoverageCheckResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Coverage {
        
        private string servicezipField;
        
        private YesNoType idencoverageField;
        
        private bool idencoverageFieldSpecified;
        
        private string idencoverageamtField;
        
        private YesNoType cdmacoverageField;
        
        private bool cdmacoverageFieldSpecified;
        
        private string cdmacoverageamtField;
        
        private YesNoType pscoverageField;
        
        private bool pscoverageFieldSpecified;
        
        private string pscoverageamtField;
        
        private YesNoType evdocoverageField;
        
        private bool evdocoverageFieldSpecified;
        
        private string evdocoverageamtField;
        
        private YesNoType dcscoverageField;
        
        private bool dcscoverageFieldSpecified;
        
        private string dcscoverageamtField;
        
        private YesNoType wmxcoverageField;
        
        private bool wmxcoverageFieldSpecified;
        
        private string wmxcoverageamtField;
        
        private string submarketField;
        
        private string csaField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("service-zip", Order=0)]
        public string servicezip {
            get {
                return this.servicezipField;
            }
            set {
                this.servicezipField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("iden-coverage", Order=1)]
        public YesNoType idencoverage {
            get {
                return this.idencoverageField;
            }
            set {
                this.idencoverageField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool idencoverageSpecified {
            get {
                return this.idencoverageFieldSpecified;
            }
            set {
                this.idencoverageFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("iden-coverage-amt", DataType="integer", Order=2)]
        public string idencoverageamt {
            get {
                return this.idencoverageamtField;
            }
            set {
                this.idencoverageamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cdma-coverage", Order=3)]
        public YesNoType cdmacoverage {
            get {
                return this.cdmacoverageField;
            }
            set {
                this.cdmacoverageField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cdmacoverageSpecified {
            get {
                return this.cdmacoverageFieldSpecified;
            }
            set {
                this.cdmacoverageFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cdma-coverage-amt", DataType="integer", Order=4)]
        public string cdmacoverageamt {
            get {
                return this.cdmacoverageamtField;
            }
            set {
                this.cdmacoverageamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ps-coverage", Order=5)]
        public YesNoType pscoverage {
            get {
                return this.pscoverageField;
            }
            set {
                this.pscoverageField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pscoverageSpecified {
            get {
                return this.pscoverageFieldSpecified;
            }
            set {
                this.pscoverageFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ps-coverage-amt", DataType="integer", Order=6)]
        public string pscoverageamt {
            get {
                return this.pscoverageamtField;
            }
            set {
                this.pscoverageamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("evdo-coverage", Order=7)]
        public YesNoType evdocoverage {
            get {
                return this.evdocoverageField;
            }
            set {
                this.evdocoverageField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool evdocoverageSpecified {
            get {
                return this.evdocoverageFieldSpecified;
            }
            set {
                this.evdocoverageFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("evdo-coverage-amt", DataType="integer", Order=8)]
        public string evdocoverageamt {
            get {
                return this.evdocoverageamtField;
            }
            set {
                this.evdocoverageamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("dcs-coverage", Order=9)]
        public YesNoType dcscoverage {
            get {
                return this.dcscoverageField;
            }
            set {
                this.dcscoverageField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dcscoverageSpecified {
            get {
                return this.dcscoverageFieldSpecified;
            }
            set {
                this.dcscoverageFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("dcs-coverage-amt", DataType="integer", Order=10)]
        public string dcscoverageamt {
            get {
                return this.dcscoverageamtField;
            }
            set {
                this.dcscoverageamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("wmx-coverage", Order=11)]
        public YesNoType wmxcoverage {
            get {
                return this.wmxcoverageField;
            }
            set {
                this.wmxcoverageField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool wmxcoverageSpecified {
            get {
                return this.wmxcoverageFieldSpecified;
            }
            set {
                this.wmxcoverageFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("wmx-coverage-amt", DataType="integer", Order=12)]
        public string wmxcoverageamt {
            get {
                return this.wmxcoverageamtField;
            }
            set {
                this.wmxcoverageamtField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public string submarket {
            get {
                return this.submarketField;
            }
            set {
                this.submarketField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public string csa {
            get {
                return this.csaField;
            }
            set {
                this.csaField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Coverage));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Coverage object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Coverage object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Coverage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Coverage obj, out System.Exception exception) {
            exception = null;
            obj = default(Coverage);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Coverage obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Coverage Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Coverage)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Coverage object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Coverage object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Coverage object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Coverage obj, out System.Exception exception) {
            exception = null;
            obj = default(Coverage);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Coverage obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Coverage obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Coverage LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Coverage LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doCreditCancel", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class CreditCancelRequest {
        
        private Name nameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CreditCancelRequest class constructor
        /// </summary>
        public CreditCancelRequest() {
            this.nameField = new Name();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Name name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CreditCancelRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CreditCancelRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CreditCancelRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CreditCancelRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CreditCancelRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditCancelRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CreditCancelRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CreditCancelRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CreditCancelRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CreditCancelRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CreditCancelRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CreditCancelRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CreditCancelRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditCancelRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CreditCancelRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CreditCancelRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CreditCancelRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CreditCancelRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doCreditCancelResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class CreditCancelResponse {
        
        private bool cancelledField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool cancelled {
            get {
                return this.cancelledField;
            }
            set {
                this.cancelledField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CreditCancelResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CreditCancelResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CreditCancelResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CreditCancelResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CreditCancelResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditCancelResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CreditCancelResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CreditCancelResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CreditCancelResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CreditCancelResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CreditCancelResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CreditCancelResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CreditCancelResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditCancelResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CreditCancelResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CreditCancelResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CreditCancelResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CreditCancelResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doCreditCheck", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class CreditRequest {
        
        private OrderInfoType orderField;
        
        private string debugscoreField;
        
        private bool subscriberagreementField;
        
        private CustomerType customertypeField;
        
        private string passcodeField;
        
        private string secpinField;
        
        private string secquestioncodeField;
        
        private string secanswerField;
        
        private string languageField;
        
        private string repidField;
        
        private string programcodeField;
        
        private byte handsetcountField;
        
        private byte intlhandsetcountField;
        
        private bool intlhandsetcountFieldSpecified;
        
        private CorporateGovernmentInfo corpgovinfoField;
        
        private BillingInfoType billingField;
        
        private PhysicalInfoType physicalField;
        
        private ContactType contactField;
        
        private string activationzipcodeField;
        
        private string itemField;
        
        private ItemChoiceType8 itemElementNameField;
        
        private DriversLicense driverslicenseField;
        
        private System.DateTime dateofbirthField;
        
        private bool dateofbirthFieldSpecified;
        
        private IdentificationMethod identificationmethodField;
        
        private string ccpincodeField;
        
        private bool checkcreditstatusField;
        
        private bool checkcreditstatusFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CreditRequest class constructor
        /// </summary>
        public CreditRequest() {
            this.identificationmethodField = new IdentificationMethod();
            this.driverslicenseField = new DriversLicense();
            this.contactField = new ContactType();
            this.physicalField = new PhysicalInfoType();
            this.billingField = new BillingInfoType();
            this.corpgovinfoField = new CorporateGovernmentInfo();
            this.orderField = new OrderInfoType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OrderInfoType order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("debug-score", Order=1)]
        public string debugscore {
            get {
                return this.debugscoreField;
            }
            set {
                this.debugscoreField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-agreement", Order=2)]
        public bool subscriberagreement {
            get {
                return this.subscriberagreementField;
            }
            set {
                this.subscriberagreementField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("customer-type", Order=3)]
        public CustomerType customertype {
            get {
                return this.customertypeField;
            }
            set {
                this.customertypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pass-code", Order=4)]
        public string passcode {
            get {
                return this.passcodeField;
            }
            set {
                this.passcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-pin", Order=5)]
        public string secpin {
            get {
                return this.secpinField;
            }
            set {
                this.secpinField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-question-code", Order=6)]
        public string secquestioncode {
            get {
                return this.secquestioncodeField;
            }
            set {
                this.secquestioncodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-answer", Order=7)]
        public string secanswer {
            get {
                return this.secanswerField;
            }
            set {
                this.secanswerField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string language {
            get {
                return this.languageField;
            }
            set {
                this.languageField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("rep-id", Order=9)]
        public string repid {
            get {
                return this.repidField;
            }
            set {
                this.repidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("program-code", Order=10)]
        public string programcode {
            get {
                return this.programcodeField;
            }
            set {
                this.programcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("handset-count", Order=11)]
        public byte handsetcount {
            get {
                return this.handsetcountField;
            }
            set {
                this.handsetcountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("intl-handset-count", Order=12)]
        public byte intlhandsetcount {
            get {
                return this.intlhandsetcountField;
            }
            set {
                this.intlhandsetcountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool intlhandsetcountSpecified {
            get {
                return this.intlhandsetcountFieldSpecified;
            }
            set {
                this.intlhandsetcountFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-info", Order=13)]
        public CorporateGovernmentInfo corpgovinfo {
            get {
                return this.corpgovinfoField;
            }
            set {
                this.corpgovinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public BillingInfoType billing {
            get {
                return this.billingField;
            }
            set {
                this.billingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=15)]
        public PhysicalInfoType physical {
            get {
                return this.physicalField;
            }
            set {
                this.physicalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=16)]
        public ContactType contact {
            get {
                return this.contactField;
            }
            set {
                this.contactField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-zip-code", Order=17)]
        public string activationzipcode {
            get {
                return this.activationzipcodeField;
            }
            set {
                this.activationzipcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("federal-tax-id", typeof(string), Order=18)]
        [System.Xml.Serialization.XmlElementAttribute("ssn", typeof(string), Order=18)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType8 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("drivers-license", Order=20)]
        public DriversLicense driverslicense {
            get {
                return this.driverslicenseField;
            }
            set {
                this.driverslicenseField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("date-of-birth", DataType="date", Order=21)]
        public System.DateTime dateofbirth {
            get {
                return this.dateofbirthField;
            }
            set {
                this.dateofbirthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateofbirthSpecified {
            get {
                return this.dateofbirthFieldSpecified;
            }
            set {
                this.dateofbirthFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("identification-method", Order=22)]
        public IdentificationMethod identificationmethod {
            get {
                return this.identificationmethodField;
            }
            set {
                this.identificationmethodField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cc-pin-code", Order=23)]
        public string ccpincode {
            get {
                return this.ccpincodeField;
            }
            set {
                this.ccpincodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("check-credit-status", Order=24)]
        public bool checkcreditstatus {
            get {
                return this.checkcreditstatusField;
            }
            set {
                this.checkcreditstatusField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool checkcreditstatusSpecified {
            get {
                return this.checkcreditstatusFieldSpecified;
            }
            set {
                this.checkcreditstatusFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CreditRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CreditRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CreditRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CreditRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CreditRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CreditRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CreditRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CreditRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CreditRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CreditRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CreditRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CreditRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CreditRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CreditRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CreditRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CreditRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class BillingInfoType {
        
        private string companynameField;
        
        private Name nameField;
        
        private string emailaddressField;
        
        private EmailAction accountemailactionField;
        
        private bool accountemailactionFieldSpecified;
        
        private string ebillField;
        
        private Address addressField;
        
        private string homephoneField;
        
        private PhoneExtType workphoneField;
        
        private string alternatephoneField;
        
        private BestTimeToCall besttimetocallhomeField;
        
        private bool besttimetocallhomeFieldSpecified;
        
        private BestTimeToCall besttimetocallworkField;
        
        private bool besttimetocallworkFieldSpecified;
        
        private BestTimeToCall besttimetocallalternateField;
        
        private bool besttimetocallalternateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// BillingInfoType class constructor
        /// </summary>
        public BillingInfoType() {
            this.workphoneField = new PhoneExtType();
            this.addressField = new Address();
            this.nameField = new Name();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("company-name", Order=0)]
        public string companyname {
            get {
                return this.companynameField;
            }
            set {
                this.companynameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public Name name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("email-address", Order=2)]
        public string emailaddress {
            get {
                return this.emailaddressField;
            }
            set {
                this.emailaddressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-email-action", Order=3)]
        public EmailAction accountemailaction {
            get {
                return this.accountemailactionField;
            }
            set {
                this.accountemailactionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool accountemailactionSpecified {
            get {
                return this.accountemailactionFieldSpecified;
            }
            set {
                this.accountemailactionFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("e-bill", Order=4)]
        public string ebill {
            get {
                return this.ebillField;
            }
            set {
                this.ebillField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public Address address {
            get {
                return this.addressField;
            }
            set {
                this.addressField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("home-phone", Order=6)]
        public string homephone {
            get {
                return this.homephoneField;
            }
            set {
                this.homephoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("work-phone", Order=7)]
        public PhoneExtType workphone {
            get {
                return this.workphoneField;
            }
            set {
                this.workphoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("alternate-phone", Order=8)]
        public string alternatephone {
            get {
                return this.alternatephoneField;
            }
            set {
                this.alternatephoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("best-time-to-call-home", Order=9)]
        public BestTimeToCall besttimetocallhome {
            get {
                return this.besttimetocallhomeField;
            }
            set {
                this.besttimetocallhomeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool besttimetocallhomeSpecified {
            get {
                return this.besttimetocallhomeFieldSpecified;
            }
            set {
                this.besttimetocallhomeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("best-time-to-call-work", Order=10)]
        public BestTimeToCall besttimetocallwork {
            get {
                return this.besttimetocallworkField;
            }
            set {
                this.besttimetocallworkField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool besttimetocallworkSpecified {
            get {
                return this.besttimetocallworkFieldSpecified;
            }
            set {
                this.besttimetocallworkFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("best-time-to-call-alternate", Order=11)]
        public BestTimeToCall besttimetocallalternate {
            get {
                return this.besttimetocallalternateField;
            }
            set {
                this.besttimetocallalternateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool besttimetocallalternateSpecified {
            get {
                return this.besttimetocallalternateFieldSpecified;
            }
            set {
                this.besttimetocallalternateFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BillingInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BillingInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BillingInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BillingInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BillingInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(BillingInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BillingInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BillingInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BillingInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BillingInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BillingInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BillingInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BillingInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(BillingInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BillingInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BillingInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BillingInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BillingInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ContactType {
        
        private Name nameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ContactType class constructor
        /// </summary>
        public ContactType() {
            this.nameField = new Name();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public Name name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ContactType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ContactType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ContactType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ContactType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ContactType obj, out System.Exception exception) {
            exception = null;
            obj = default(ContactType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ContactType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ContactType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ContactType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ContactType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ContactType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ContactType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ContactType obj, out System.Exception exception) {
            exception = null;
            obj = default(ContactType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ContactType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ContactType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ContactType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ContactType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType8 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("federal-tax-id")]
        federaltaxid,
        
        /// <remarks/>
        ssn,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doCreditCheckResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class CreditCheckResponse {
        
        private object itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("ackNackResponse", typeof(ParseResponse), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("creditCheckResponse", typeof(CreditResponse), Order=0)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CreditCheckResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CreditCheckResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CreditCheckResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CreditCheckResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CreditCheckResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditCheckResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CreditCheckResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CreditCheckResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CreditCheckResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CreditCheckResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CreditCheckResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CreditCheckResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CreditCheckResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditCheckResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CreditCheckResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CreditCheckResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CreditCheckResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CreditCheckResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class CreditResponse {
        
        private string nextelorderidField;
        
        private CreditResult resultField;
        
        private string appnumberField;
        
        private bool cancelledbanField;
        
        private bool cancelledbanFieldSpecified;
        
        private string secpinField;
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType5> itemsElementNameField;
        
        private decimal intldepositperhandsetField;
        
        private bool intldepositperhandsetFieldSpecified;
        
        private decimal totaldepositField;
        
        private bool totaldepositFieldSpecified;
        
        private decimal depositvarianceField;
        
        private bool depositvarianceFieldSpecified;
        
        private string numberhandsetsapprovedField;
        
        private bool billtoaccountallowedField;
        
        private System.DateTime additionalhandseteligibledateField;
        
        private bool additionalhandseteligibledateFieldSpecified;
        
        private bool hybridphoneallowedField;
        
        private OrderInfoType orderField;
        
        private AccountInfo accountinfoField;
        
        private CustomerType customertypeField;
        
        private bool customertypeFieldSpecified;
        
        private BillingInfoType billingField;
        
        private string itemField;
        
        private ItemChoiceType9 itemElementNameField;
        
        private DriversLicense driverslicenseField;
        
        private System.DateTime dateofbirthField;
        
        private bool dateofbirthFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CreditResponse class constructor
        /// </summary>
        public CreditResponse() {
            this.driverslicenseField = new DriversLicense();
            this.billingField = new BillingInfoType();
            this.accountinfoField = new AccountInfo();
            this.orderField = new OrderInfoType();
            this.itemsElementNameField = new List<ItemsChoiceType5>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("nextel-order-id", Order=0)]
        public string nextelorderid {
            get {
                return this.nextelorderidField;
            }
            set {
                this.nextelorderidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public CreditResult result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("app-number", Order=2)]
        public string appnumber {
            get {
                return this.appnumberField;
            }
            set {
                this.appnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cancelled-ban", Order=3)]
        public bool cancelledban {
            get {
                return this.cancelledbanField;
            }
            set {
                this.cancelledbanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cancelledbanSpecified {
            get {
                return this.cancelledbanFieldSpecified;
            }
            set {
                this.cancelledbanFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sec-pin", Order=4)]
        public string secpin {
            get {
                return this.secpinField;
            }
            set {
                this.secpinField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("deposit-per-handset", typeof(decimal), Order=5)]
        [System.Xml.Serialization.XmlElementAttribute("extra-deposit-per-handset", typeof(decimal), Order=5)]
        [System.Xml.Serialization.XmlElementAttribute("spending-limit-per-handset", typeof(decimal), Order=5)]
        [System.Xml.Serialization.XmlElementAttribute("tiered-deposit", typeof(TieredDeposit), Order=5)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=6)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType5> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("intl-deposit-per-handset", Order=7)]
        public decimal intldepositperhandset {
            get {
                return this.intldepositperhandsetField;
            }
            set {
                this.intldepositperhandsetField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool intldepositperhandsetSpecified {
            get {
                return this.intldepositperhandsetFieldSpecified;
            }
            set {
                this.intldepositperhandsetFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("total-deposit", Order=8)]
        public decimal totaldeposit {
            get {
                return this.totaldepositField;
            }
            set {
                this.totaldepositField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool totaldepositSpecified {
            get {
                return this.totaldepositFieldSpecified;
            }
            set {
                this.totaldepositFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("deposit-variance", Order=9)]
        public decimal depositvariance {
            get {
                return this.depositvarianceField;
            }
            set {
                this.depositvarianceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool depositvarianceSpecified {
            get {
                return this.depositvarianceFieldSpecified;
            }
            set {
                this.depositvarianceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("number-handsets-approved", DataType="integer", Order=10)]
        public string numberhandsetsapproved {
            get {
                return this.numberhandsetsapprovedField;
            }
            set {
                this.numberhandsetsapprovedField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bill-to-account-allowed", Order=11)]
        public bool billtoaccountallowed {
            get {
                return this.billtoaccountallowedField;
            }
            set {
                this.billtoaccountallowedField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("additional-handset-eligible-date", DataType="date", Order=12)]
        public System.DateTime additionalhandseteligibledate {
            get {
                return this.additionalhandseteligibledateField;
            }
            set {
                this.additionalhandseteligibledateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool additionalhandseteligibledateSpecified {
            get {
                return this.additionalhandseteligibledateFieldSpecified;
            }
            set {
                this.additionalhandseteligibledateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("hybrid-phone-allowed", Order=13)]
        public bool hybridphoneallowed {
            get {
                return this.hybridphoneallowedField;
            }
            set {
                this.hybridphoneallowedField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=14)]
        public OrderInfoType order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-info", Order=15)]
        public AccountInfo accountinfo {
            get {
                return this.accountinfoField;
            }
            set {
                this.accountinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("customer-type", Order=16)]
        public CustomerType customertype {
            get {
                return this.customertypeField;
            }
            set {
                this.customertypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customertypeSpecified {
            get {
                return this.customertypeFieldSpecified;
            }
            set {
                this.customertypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=17)]
        public BillingInfoType billing {
            get {
                return this.billingField;
            }
            set {
                this.billingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("federal-tax-id", typeof(string), Order=18)]
        [System.Xml.Serialization.XmlElementAttribute("ssn", typeof(string), Order=18)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=19)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType9 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("drivers-license", Order=20)]
        public DriversLicense driverslicense {
            get {
                return this.driverslicenseField;
            }
            set {
                this.driverslicenseField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("date-of-birth", DataType="date", Order=21)]
        public System.DateTime dateofbirth {
            get {
                return this.dateofbirthField;
            }
            set {
                this.dateofbirthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dateofbirthSpecified {
            get {
                return this.dateofbirthFieldSpecified;
            }
            set {
                this.dateofbirthFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CreditResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CreditResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CreditResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CreditResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CreditResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CreditResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CreditResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CreditResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CreditResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CreditResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CreditResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CreditResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(CreditResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CreditResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CreditResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CreditResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CreditResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum CreditResult {
        
        /// <remarks/>
        NO_DEPOSIT_REQUIRED,
        
        /// <remarks/>
        DECLINED,
        
        /// <remarks/>
        DEPOSIT_REQUIRED,
        
        /// <remarks/>
        CREDIT_UNKNOWN,
        
        /// <remarks/>
        DATA_ERROR,
        
        /// <remarks/>
        DEPOSIT_REQUIRED_ACCEPTED,
        
        /// <remarks/>
        NO_DEPOSIT_REQUIRED_SL_ACCEPTED,
        
        /// <remarks/>
        DEPOSIT_REQUIRED_SL_ACCEPTED,
        
        /// <remarks/>
        DEPOSIT_REQUIRED_SL_REQUIRED,
        
        /// <remarks/>
        NO_DEPOSIT_REQUIRED_SL_REQUIRED,
        
        /// <remarks/>
        DECLINED_PAY_BALANCE,
        
        /// <remarks/>
        COLLECT_BALANCE,
        
        /// <remarks/>
        BAN_EXISTS_FOR_SSN,
        
        /// <remarks/>
        BAN_EXISTS_FOR_FTI,
        
        /// <remarks/>
        SSN_MISSING,
        
        /// <remarks/>
        TAX_ID_MISSING,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class TieredDeposit {
        
        private decimal depositamountField;
        
        private decimal spendinglimitamountField;
        
        private bool spendinglimitamountFieldSpecified;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("deposit-amount", Order=0)]
        public decimal depositamount {
            get {
                return this.depositamountField;
            }
            set {
                this.depositamountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("spending-limit-amount", Order=1)]
        public decimal spendinglimitamount {
            get {
                return this.spendinglimitamountField;
            }
            set {
                this.spendinglimitamountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool spendinglimitamountSpecified {
            get {
                return this.spendinglimitamountFieldSpecified;
            }
            set {
                this.spendinglimitamountFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(TieredDeposit));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current TieredDeposit object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an TieredDeposit object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output TieredDeposit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out TieredDeposit obj, out System.Exception exception) {
            exception = null;
            obj = default(TieredDeposit);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out TieredDeposit obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static TieredDeposit Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((TieredDeposit)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current TieredDeposit object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an TieredDeposit object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output TieredDeposit object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out TieredDeposit obj, out System.Exception exception) {
            exception = null;
            obj = default(TieredDeposit);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out TieredDeposit obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out TieredDeposit obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static TieredDeposit LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static TieredDeposit LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType5 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deposit-per-handset")]
        depositperhandset,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("extra-deposit-per-handset")]
        extradepositperhandset,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("spending-limit-per-handset")]
        spendinglimitperhandset,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("tiered-deposit")]
        tiereddeposit,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType9 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("federal-tax-id")]
        federaltaxid,
        
        /// <remarks/>
        ssn,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doDeactivation", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class DeactivationRequest {
        
        private string referencenextelorderidField;
        
        private bool equipreturnedField;
        
        private System.DateTime activationdateField;
        
        private System.DateTime returndateField;
        
        private Name nameField;
        
        private string homephoneField;
        
        private PhoneExtType workphoneField;
        
        private Phone phoneField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DeactivationRequest class constructor
        /// </summary>
        public DeactivationRequest() {
            this.phoneField = new Phone();
            this.workphoneField = new PhoneExtType();
            this.nameField = new Name();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("reference-nextel-order-id", Order=0)]
        public string referencenextelorderid {
            get {
                return this.referencenextelorderidField;
            }
            set {
                this.referencenextelorderidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("equip-returned", Order=1)]
        public bool equipreturned {
            get {
                return this.equipreturnedField;
            }
            set {
                this.equipreturnedField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-date", Order=2)]
        public System.DateTime activationdate {
            get {
                return this.activationdateField;
            }
            set {
                this.activationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("return-date", Order=3)]
        public System.DateTime returndate {
            get {
                return this.returndateField;
            }
            set {
                this.returndateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public Name name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("home-phone", Order=5)]
        public string homephone {
            get {
                return this.homephoneField;
            }
            set {
                this.homephoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("work-phone", Order=6)]
        public PhoneExtType workphone {
            get {
                return this.workphoneField;
            }
            set {
                this.workphoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=7)]
        public Phone phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeactivationRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeactivationRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeactivationRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeactivationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeactivationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(DeactivationRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeactivationRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeactivationRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeactivationRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeactivationRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeactivationRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeactivationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeactivationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(DeactivationRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeactivationRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeactivationRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeactivationRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeactivationRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doDeactivationResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class DeactivationServiceResponse {
        
        private object itemField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("ackNackResponse", typeof(ParseResponse), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("deactivationResponse", typeof(DeactivationResponse), Order=0)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeactivationServiceResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeactivationServiceResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeactivationServiceResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeactivationServiceResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeactivationServiceResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(DeactivationServiceResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeactivationServiceResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeactivationServiceResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeactivationServiceResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeactivationServiceResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeactivationServiceResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeactivationServiceResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeactivationServiceResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(DeactivationServiceResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeactivationServiceResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeactivationServiceResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeactivationServiceResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeactivationServiceResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class DeactivationResponse {
        
        private string nextelorderidField;
        
        private DeactivationResult resultField;
        
        private uint billcycledayField;
        
        private bool billcycledayFieldSpecified;
        
        private bool terminationfeerequiredField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("nextel-order-id", Order=0)]
        public string nextelorderid {
            get {
                return this.nextelorderidField;
            }
            set {
                this.nextelorderidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public DeactivationResult result {
            get {
                return this.resultField;
            }
            set {
                this.resultField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bill-cycle-day", Order=2)]
        public uint billcycleday {
            get {
                return this.billcycledayField;
            }
            set {
                this.billcycledayField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool billcycledaySpecified {
            get {
                return this.billcycledayFieldSpecified;
            }
            set {
                this.billcycledayFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("termination-fee-required", Order=3)]
        public bool terminationfeerequired {
            get {
                return this.terminationfeerequiredField;
            }
            set {
                this.terminationfeerequiredField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeactivationResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeactivationResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeactivationResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeactivationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeactivationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(DeactivationResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeactivationResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeactivationResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeactivationResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeactivationResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeactivationResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeactivationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeactivationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(DeactivationResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeactivationResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeactivationResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeactivationResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeactivationResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum DeactivationResult {
        
        /// <remarks/>
        DEACTIVATED,
        
        /// <remarks/>
        CUSTOMER_SAVED,
        
        /// <remarks/>
        DEACT_NOT_ELIGIBLE,
        
        /// <remarks/>
        DATA_ERROR,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doInventoryCheck", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class InventoryCheckRequest {
        
        private List<string> handsetcheckField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// InventoryCheckRequest class constructor
        /// </summary>
        public InventoryCheckRequest() {
            this.handsetcheckField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("handset-check", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("model-id", typeof(string), IsNullable=false)]
        public List<string> handsetcheck {
            get {
                return this.handsetcheckField;
            }
            set {
                this.handsetcheckField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(InventoryCheckRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current InventoryCheckRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an InventoryCheckRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output InventoryCheckRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out InventoryCheckRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(InventoryCheckRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out InventoryCheckRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static InventoryCheckRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((InventoryCheckRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current InventoryCheckRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an InventoryCheckRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output InventoryCheckRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out InventoryCheckRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(InventoryCheckRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out InventoryCheckRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out InventoryCheckRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static InventoryCheckRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static InventoryCheckRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doInventoryCheckResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class InventoryCheckResponse {
        
        private List<InventoryLevel> inventorylevelField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// InventoryCheckResponse class constructor
        /// </summary>
        public InventoryCheckResponse() {
            this.inventorylevelField = new List<InventoryLevel>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("inventory-level", Order=0)]
        public List<InventoryLevel> inventorylevel {
            get {
                return this.inventorylevelField;
            }
            set {
                this.inventorylevelField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(InventoryCheckResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current InventoryCheckResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an InventoryCheckResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output InventoryCheckResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out InventoryCheckResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(InventoryCheckResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out InventoryCheckResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static InventoryCheckResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((InventoryCheckResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current InventoryCheckResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an InventoryCheckResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output InventoryCheckResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out InventoryCheckResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(InventoryCheckResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out InventoryCheckResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out InventoryCheckResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static InventoryCheckResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static InventoryCheckResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class InventoryLevel {
        
        private string modelidField;
        
        private bool inventoryField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("model-id", Order=0)]
        public string modelid {
            get {
                return this.modelidField;
            }
            set {
                this.modelidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public bool inventory {
            get {
                return this.inventoryField;
            }
            set {
                this.inventoryField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(InventoryLevel));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current InventoryLevel object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an InventoryLevel object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output InventoryLevel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out InventoryLevel obj, out System.Exception exception) {
            exception = null;
            obj = default(InventoryLevel);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out InventoryLevel obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static InventoryLevel Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((InventoryLevel)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current InventoryLevel object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an InventoryLevel object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output InventoryLevel object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out InventoryLevel obj, out System.Exception exception) {
            exception = null;
            obj = default(InventoryLevel);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out InventoryLevel obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out InventoryLevel obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static InventoryLevel LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static InventoryLevel LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doPreAuthorization", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class PreAuthorizationRequest {
        
        private object itemField;
        
        private byte handsetcountField;
        
        private bool handsetcountFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("cash-deposit", typeof(bool), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("deposit-payment", typeof(CreditCard), Order=0)]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("handset-count", Order=1)]
        public byte handsetcount {
            get {
                return this.handsetcountField;
            }
            set {
                this.handsetcountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool handsetcountSpecified {
            get {
                return this.handsetcountFieldSpecified;
            }
            set {
                this.handsetcountFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PreAuthorizationRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PreAuthorizationRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PreAuthorizationRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PreAuthorizationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PreAuthorizationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(PreAuthorizationRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PreAuthorizationRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PreAuthorizationRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PreAuthorizationRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PreAuthorizationRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PreAuthorizationRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PreAuthorizationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PreAuthorizationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(PreAuthorizationRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PreAuthorizationRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PreAuthorizationRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PreAuthorizationRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PreAuthorizationRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doPreAuthorizationResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class PreAuthorizationResponse {
        
        private bool successField;
        
        private string preauthorizationcodeField;
        
        private string detailsField;
        
        private decimal totaldepositField;
        
        private bool totaldepositFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pre-authorization-code", Order=1)]
        public string preauthorizationcode {
            get {
                return this.preauthorizationcodeField;
            }
            set {
                this.preauthorizationcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string details {
            get {
                return this.detailsField;
            }
            set {
                this.detailsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("total-deposit", Order=3)]
        public decimal totaldeposit {
            get {
                return this.totaldepositField;
            }
            set {
                this.totaldepositField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool totaldepositSpecified {
            get {
                return this.totaldepositFieldSpecified;
            }
            set {
                this.totaldepositFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PreAuthorizationResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PreAuthorizationResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PreAuthorizationResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PreAuthorizationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PreAuthorizationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(PreAuthorizationResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PreAuthorizationResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PreAuthorizationResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PreAuthorizationResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PreAuthorizationResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PreAuthorizationResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PreAuthorizationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PreAuthorizationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(PreAuthorizationResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PreAuthorizationResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PreAuthorizationResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PreAuthorizationResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PreAuthorizationResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("performServiceValidation", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ServiceValidationRequest {
        
        private System.DateTime orderdateField;
        
        private List<object> itemsField;
        
        private string itemField;
        
        private ItemChoiceType10 itemElementNameField;
        
        private string saleschannelField;
        
        private string accountnumberField;
        
        private ServiceValidationActionType actionField;
        
        private string primarysubscriberidField;
        
        private string primaryplanidField;
        
        private byte serviceagreementField;
        
        private bool serviceagreementFieldSpecified;
        
        private ServicePlanOptionsType planoptionsField;
        
        private string item1Field;
        
        private Item1ChoiceType2 item1ElementNameField;
        
        private bool airaveField;
        
        private bool airaveFieldSpecified;
        
        private string creditclassField;
        
        private string corpgovidField;
        
        private List<ServiceValidationRequestSubinfo> bundlesubvalField;
        
        private bool removebarringsocField;
        
        private bool removebarringsocFieldSpecified;
        
        private bool removeblocklistsocField;
        
        private bool removeblocklistsocFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ServiceValidationRequest class constructor
        /// </summary>
        public ServiceValidationRequest() {
            this.bundlesubvalField = new List<ServiceValidationRequestSubinfo>();
            this.planoptionsField = new ServicePlanOptionsType();
            this.actionField = new ServiceValidationActionType();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-date", Order=0)]
        public System.DateTime orderdate {
            get {
                return this.orderdateField;
            }
            set {
                this.orderdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-sub-type", typeof(AccountSubType), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("account-type", typeof(AccountType), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("customer-type", typeof(CustomerType), Order=1)]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("csa", typeof(string), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("service-zip", typeof(string), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("submarket", typeof(string), Order=2)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType10 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sales-channel", Order=4)]
        public string saleschannel {
            get {
                return this.saleschannelField;
            }
            set {
                this.saleschannelField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", Order=5)]
        public string accountnumber {
            get {
                return this.accountnumberField;
            }
            set {
                this.accountnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public ServiceValidationActionType action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("primary-subscriber-id", Order=7)]
        public string primarysubscriberid {
            get {
                return this.primarysubscriberidField;
            }
            set {
                this.primarysubscriberidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("primary-plan-id", Order=8)]
        public string primaryplanid {
            get {
                return this.primaryplanidField;
            }
            set {
                this.primaryplanidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-agreement", Order=9)]
        public byte serviceagreement {
            get {
                return this.serviceagreementField;
            }
            set {
                this.serviceagreementField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceagreementSpecified {
            get {
                return this.serviceagreementFieldSpecified;
            }
            set {
                this.serviceagreementFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-options", Order=10)]
        public ServicePlanOptionsType planoptions {
            get {
                return this.planoptionsField;
            }
            set {
                this.planoptionsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("hsn", typeof(string), Order=11)]
        [System.Xml.Serialization.XmlElementAttribute("mac-id", typeof(string), Order=11)]
        [System.Xml.Serialization.XmlElementAttribute("meid", typeof(string), Order=11)]
        [System.Xml.Serialization.XmlElementAttribute("model-id", typeof(string), Order=11)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("Item1ElementName")]
        public string Item1 {
            get {
                return this.item1Field;
            }
            set {
                this.item1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=12)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Item1ChoiceType2 Item1ElementName {
            get {
                return this.item1ElementNameField;
            }
            set {
                this.item1ElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=13)]
        public bool airave {
            get {
                return this.airaveField;
            }
            set {
                this.airaveField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool airaveSpecified {
            get {
                return this.airaveFieldSpecified;
            }
            set {
                this.airaveFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("credit-class", Order=14)]
        public string creditclass {
            get {
                return this.creditclassField;
            }
            set {
                this.creditclassField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-id", Order=15)]
        public string corpgovid {
            get {
                return this.corpgovidField;
            }
            set {
                this.corpgovidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("bundle-sub-val", Order=16)]
        [System.Xml.Serialization.XmlArrayItemAttribute("sub-info", IsNullable=false)]
        public List<ServiceValidationRequestSubinfo> bundlesubval {
            get {
                return this.bundlesubvalField;
            }
            set {
                this.bundlesubvalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("remove-barring-soc", Order=17)]
        public bool removebarringsoc {
            get {
                return this.removebarringsocField;
            }
            set {
                this.removebarringsocField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool removebarringsocSpecified {
            get {
                return this.removebarringsocFieldSpecified;
            }
            set {
                this.removebarringsocFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("remove-blocklist-soc", Order=18)]
        public bool removeblocklistsoc {
            get {
                return this.removeblocklistsocField;
            }
            set {
                this.removeblocklistsocField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool removeblocklistsocSpecified {
            get {
                return this.removeblocklistsocFieldSpecified;
            }
            set {
                this.removeblocklistsocFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceValidationRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceValidationRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceValidationRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceValidationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceValidationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceValidationRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceValidationRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceValidationRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceValidationRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceValidationRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceValidationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceValidationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceValidationRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceValidationRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType10 {
        
        /// <remarks/>
        csa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("service-zip")]
        servicezip,
        
        /// <remarks/>
        submarket,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ServiceValidationActionType {
        
        private ActionType actiontypeField;
        
        private bool handsetswapField;
        
        private bool handsetswapFieldSpecified;
        
        private bool planchangeField;
        
        private bool planchangeFieldSpecified;
        
        private bool serviceaddField;
        
        private bool serviceaddFieldSpecified;
        
        private bool modfutureplanField;
        
        private bool modfutureplanFieldSpecified;
        
        private bool marketswapField;
        
        private bool marketswapFieldSpecified;
        
        private bool addltsserviceField;
        
        private bool addltsserviceFieldSpecified;
        
        private bool swapltsgroupField;
        
        private bool swapltsgroupFieldSpecified;
        
        private bool validatesubField;
        
        private bool validatesubFieldSpecified;
        
        private bool duplicatesubField;
        
        private bool duplicatesubFieldSpecified;
        
        private bool airavebanField;
        
        private bool airavebanFieldSpecified;
        
        private string subscriberidField;
        
        private string targetsubField;
        
        private string addsubcountField;
        
        private string targetbanField;
        
        private string referenceptnField;
        
        private string existingserviceidField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("action-type", Order=0)]
        public ActionType actiontype {
            get {
                return this.actiontypeField;
            }
            set {
                this.actiontypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("handset-swap", Order=1)]
        public bool handsetswap {
            get {
                return this.handsetswapField;
            }
            set {
                this.handsetswapField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool handsetswapSpecified {
            get {
                return this.handsetswapFieldSpecified;
            }
            set {
                this.handsetswapFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-change", Order=2)]
        public bool planchange {
            get {
                return this.planchangeField;
            }
            set {
                this.planchangeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool planchangeSpecified {
            get {
                return this.planchangeFieldSpecified;
            }
            set {
                this.planchangeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-add", Order=3)]
        public bool serviceadd {
            get {
                return this.serviceaddField;
            }
            set {
                this.serviceaddField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceaddSpecified {
            get {
                return this.serviceaddFieldSpecified;
            }
            set {
                this.serviceaddFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("mod-future-plan", Order=4)]
        public bool modfutureplan {
            get {
                return this.modfutureplanField;
            }
            set {
                this.modfutureplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool modfutureplanSpecified {
            get {
                return this.modfutureplanFieldSpecified;
            }
            set {
                this.modfutureplanFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("market-swap", Order=5)]
        public bool marketswap {
            get {
                return this.marketswapField;
            }
            set {
                this.marketswapField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool marketswapSpecified {
            get {
                return this.marketswapFieldSpecified;
            }
            set {
                this.marketswapFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("add-lts-service", Order=6)]
        public bool addltsservice {
            get {
                return this.addltsserviceField;
            }
            set {
                this.addltsserviceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool addltsserviceSpecified {
            get {
                return this.addltsserviceFieldSpecified;
            }
            set {
                this.addltsserviceFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("swap-lts-group", Order=7)]
        public bool swapltsgroup {
            get {
                return this.swapltsgroupField;
            }
            set {
                this.swapltsgroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool swapltsgroupSpecified {
            get {
                return this.swapltsgroupFieldSpecified;
            }
            set {
                this.swapltsgroupFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("validate-sub", Order=8)]
        public bool validatesub {
            get {
                return this.validatesubField;
            }
            set {
                this.validatesubField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool validatesubSpecified {
            get {
                return this.validatesubFieldSpecified;
            }
            set {
                this.validatesubFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("duplicate-sub", Order=9)]
        public bool duplicatesub {
            get {
                return this.duplicatesubField;
            }
            set {
                this.duplicatesubField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool duplicatesubSpecified {
            get {
                return this.duplicatesubFieldSpecified;
            }
            set {
                this.duplicatesubFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("airave-ban", Order=10)]
        public bool airaveban {
            get {
                return this.airavebanField;
            }
            set {
                this.airavebanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool airavebanSpecified {
            get {
                return this.airavebanFieldSpecified;
            }
            set {
                this.airavebanFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-id", Order=11)]
        public string subscriberid {
            get {
                return this.subscriberidField;
            }
            set {
                this.subscriberidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("target-sub", Order=12)]
        public string targetsub {
            get {
                return this.targetsubField;
            }
            set {
                this.targetsubField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("add-sub-count", DataType="positiveInteger", Order=13)]
        public string addsubcount {
            get {
                return this.addsubcountField;
            }
            set {
                this.addsubcountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("target-ban", Order=14)]
        public string targetban {
            get {
                return this.targetbanField;
            }
            set {
                this.targetbanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", Order=15)]
        public string referenceptn {
            get {
                return this.referenceptnField;
            }
            set {
                this.referenceptnField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("existing-service-id", Order=16)]
        public string existingserviceid {
            get {
                return this.existingserviceidField;
            }
            set {
                this.existingserviceidField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceValidationActionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceValidationActionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceValidationActionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceValidationActionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceValidationActionType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationActionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceValidationActionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceValidationActionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceValidationActionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceValidationActionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceValidationActionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceValidationActionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceValidationActionType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationActionType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationActionType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationActionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceValidationActionType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceValidationActionType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum ActionType {
        
        /// <remarks/>
        CREATE,
        
        /// <remarks/>
        UPDATE,
        
        /// <remarks/>
        CANCEL,
        
        /// <remarks/>
        CHECK,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ServicePlanOptionsType {
        
        private string planidField;
        
        private System.DateTime effectivedateField;
        
        private bool effectivedateFieldSpecified;
        
        private string ltsrankField;
        
        private List<string> phonenumberorrangeField;
        
        private List<ServiceOptionsType> optionsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ServicePlanOptionsType class constructor
        /// </summary>
        public ServicePlanOptionsType() {
            this.optionsField = new List<ServiceOptionsType>();
            this.phonenumberorrangeField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-id", Order=0)]
        public string planid {
            get {
                return this.planidField;
            }
            set {
                this.planidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("effective-date", Order=1)]
        public System.DateTime effectivedate {
            get {
                return this.effectivedateField;
            }
            set {
                this.effectivedateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool effectivedateSpecified {
            get {
                return this.effectivedateFieldSpecified;
            }
            set {
                this.effectivedateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("lts-rank", DataType="positiveInteger", Order=2)]
        public string ltsrank {
            get {
                return this.ltsrankField;
            }
            set {
                this.ltsrankField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone-number-or-range", DataType="token", Order=3)]
        public List<string> phonenumberorrange {
            get {
                return this.phonenumberorrangeField;
            }
            set {
                this.phonenumberorrangeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("options", Order=4)]
        public List<ServiceOptionsType> options {
            get {
                return this.optionsField;
            }
            set {
                this.optionsField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServicePlanOptionsType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServicePlanOptionsType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServicePlanOptionsType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServicePlanOptionsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServicePlanOptionsType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServicePlanOptionsType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServicePlanOptionsType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServicePlanOptionsType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServicePlanOptionsType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServicePlanOptionsType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServicePlanOptionsType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServicePlanOptionsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServicePlanOptionsType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServicePlanOptionsType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServicePlanOptionsType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServicePlanOptionsType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServicePlanOptionsType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServicePlanOptionsType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ServiceOptionsType {
        
        private string optionsidField;
        
        private System.DateTime effectivedateField;
        
        private bool effectivedateFieldSpecified;
        
        private System.DateTime expirationdateField;
        
        private bool expirationdateFieldSpecified;
        
        private string ltsrankField;
        
        private List<string> phonenumberorrangeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ServiceOptionsType class constructor
        /// </summary>
        public ServiceOptionsType() {
            this.phonenumberorrangeField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("options-id", Order=0)]
        public string optionsid {
            get {
                return this.optionsidField;
            }
            set {
                this.optionsidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("effective-date", Order=1)]
        public System.DateTime effectivedate {
            get {
                return this.effectivedateField;
            }
            set {
                this.effectivedateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool effectivedateSpecified {
            get {
                return this.effectivedateFieldSpecified;
            }
            set {
                this.effectivedateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("expiration-date", Order=2)]
        public System.DateTime expirationdate {
            get {
                return this.expirationdateField;
            }
            set {
                this.expirationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationdateSpecified {
            get {
                return this.expirationdateFieldSpecified;
            }
            set {
                this.expirationdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("lts-rank", DataType="positiveInteger", Order=3)]
        public string ltsrank {
            get {
                return this.ltsrankField;
            }
            set {
                this.ltsrankField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone-number-or-range", DataType="token", Order=4)]
        public List<string> phonenumberorrange {
            get {
                return this.phonenumberorrangeField;
            }
            set {
                this.phonenumberorrangeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceOptionsType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceOptionsType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceOptionsType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceOptionsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceOptionsType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceOptionsType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceOptionsType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceOptionsType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceOptionsType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceOptionsType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceOptionsType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceOptionsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceOptionsType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceOptionsType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceOptionsType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceOptionsType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceOptionsType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceOptionsType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum Item1ChoiceType2 {
        
        /// <remarks/>
        hsn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mac-id")]
        macid,
        
        /// <remarks/>
        meid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("model-id")]
        modelid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ServiceValidationRequestSubinfo {
        
        private ulong sublineidField;
        
        private ServiceValidationActionType subactionField;
        
        private ServicePlanOptionsType subplanoptionsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ServiceValidationRequestSubinfo class constructor
        /// </summary>
        public ServiceValidationRequestSubinfo() {
            this.subplanoptionsField = new ServicePlanOptionsType();
            this.subactionField = new ServiceValidationActionType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sub-line-id", Order=0)]
        public ulong sublineid {
            get {
                return this.sublineidField;
            }
            set {
                this.sublineidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sub-action", Order=1)]
        public ServiceValidationActionType subaction {
            get {
                return this.subactionField;
            }
            set {
                this.subactionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sub-plan-options", Order=2)]
        public ServicePlanOptionsType subplanoptions {
            get {
                return this.subplanoptionsField;
            }
            set {
                this.subplanoptionsField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceValidationRequestSubinfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceValidationRequestSubinfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceValidationRequestSubinfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceValidationRequestSubinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceValidationRequestSubinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationRequestSubinfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceValidationRequestSubinfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceValidationRequestSubinfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceValidationRequestSubinfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceValidationRequestSubinfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceValidationRequestSubinfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceValidationRequestSubinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceValidationRequestSubinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationRequestSubinfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationRequestSubinfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationRequestSubinfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceValidationRequestSubinfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceValidationRequestSubinfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("performServiceValidationResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ServiceValidationResponse {
        
        private bool validationsucceededField;
        
        private bool familysubppchangeField;
        
        private bool familysubppchangeFieldSpecified;
        
        private List<ServiceValidationResponseBundlesubppchange> bundlesubppchangeField;
        
        private string ltssubremainingField;
        
        private BillSummaryInfoType billsummaryinfoField;
        
        private ServiceValidationPlanType planField;
        
        private List<ServiceValidationOptionType> optionField;
        
        private ServiceValidationPlanType expiredplanField;
        
        private List<ServiceValidationOptionType> expiredoptionField;
        
        private List<Resource> expiredresourcemanagementField;
        
        private List<ServiceValidationOptionType> changedsocsField;
        
        private List<string> legacyplansField;
        
        private List<Resource> resourcemanagementField;
        
        private List<SuggestionGroup> suggestiongroupField;
        
        private bool datasocindField;
        
        private bool datasocindFieldSpecified;
        
        private bool messagingsocindField;
        
        private bool messagingsocindFieldSpecified;
        
        private bool voicecontrolvalidField;
        
        private bool voicecontrolvalidFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ServiceValidationResponse class constructor
        /// </summary>
        public ServiceValidationResponse() {
            this.suggestiongroupField = new List<SuggestionGroup>();
            this.resourcemanagementField = new List<Resource>();
            this.legacyplansField = new List<string>();
            this.changedsocsField = new List<ServiceValidationOptionType>();
            this.expiredresourcemanagementField = new List<Resource>();
            this.expiredoptionField = new List<ServiceValidationOptionType>();
            this.expiredplanField = new ServiceValidationPlanType();
            this.optionField = new List<ServiceValidationOptionType>();
            this.planField = new ServiceValidationPlanType();
            this.billsummaryinfoField = new BillSummaryInfoType();
            this.bundlesubppchangeField = new List<ServiceValidationResponseBundlesubppchange>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("validation-succeeded", Order=0)]
        public bool validationsucceeded {
            get {
                return this.validationsucceededField;
            }
            set {
                this.validationsucceededField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("family-sub-pp-change", Order=1)]
        public bool familysubppchange {
            get {
                return this.familysubppchangeField;
            }
            set {
                this.familysubppchangeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool familysubppchangeSpecified {
            get {
                return this.familysubppchangeFieldSpecified;
            }
            set {
                this.familysubppchangeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bundle-sub-pp-change", Order=2)]
        public List<ServiceValidationResponseBundlesubppchange> bundlesubppchange {
            get {
                return this.bundlesubppchangeField;
            }
            set {
                this.bundlesubppchangeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("lts-sub-remaining", DataType="positiveInteger", Order=3)]
        public string ltssubremaining {
            get {
                return this.ltssubremainingField;
            }
            set {
                this.ltssubremainingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bill-summary-info", Order=4)]
        public BillSummaryInfoType billsummaryinfo {
            get {
                return this.billsummaryinfoField;
            }
            set {
                this.billsummaryinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        public ServiceValidationPlanType plan {
            get {
                return this.planField;
            }
            set {
                this.planField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option", Order=6)]
        public List<ServiceValidationOptionType> option {
            get {
                return this.optionField;
            }
            set {
                this.optionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("expired-plan", Order=7)]
        public ServiceValidationPlanType expiredplan {
            get {
                return this.expiredplanField;
            }
            set {
                this.expiredplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("expired-option", Order=8)]
        public List<ServiceValidationOptionType> expiredoption {
            get {
                return this.expiredoptionField;
            }
            set {
                this.expiredoptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("expired-resource-management", Order=9)]
        [System.Xml.Serialization.XmlArrayItemAttribute("resource", IsNullable=false)]
        public List<Resource> expiredresourcemanagement {
            get {
                return this.expiredresourcemanagementField;
            }
            set {
                this.expiredresourcemanagementField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("changed-socs", Order=10)]
        [System.Xml.Serialization.XmlArrayItemAttribute("option", IsNullable=false)]
        public List<ServiceValidationOptionType> changedsocs {
            get {
                return this.changedsocsField;
            }
            set {
                this.changedsocsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("legacy-plans", Order=11)]
        [System.Xml.Serialization.XmlArrayItemAttribute("plan-id", IsNullable=false)]
        public List<string> legacyplans {
            get {
                return this.legacyplansField;
            }
            set {
                this.legacyplansField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("resource-management", Order=12)]
        [System.Xml.Serialization.XmlArrayItemAttribute("resource", IsNullable=false)]
        public List<Resource> resourcemanagement {
            get {
                return this.resourcemanagementField;
            }
            set {
                this.resourcemanagementField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("suggestion-group", Order=13)]
        public List<SuggestionGroup> suggestiongroup {
            get {
                return this.suggestiongroupField;
            }
            set {
                this.suggestiongroupField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("data-soc-ind", Order=14)]
        public bool datasocind {
            get {
                return this.datasocindField;
            }
            set {
                this.datasocindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool datasocindSpecified {
            get {
                return this.datasocindFieldSpecified;
            }
            set {
                this.datasocindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("messaging-soc-ind", Order=15)]
        public bool messagingsocind {
            get {
                return this.messagingsocindField;
            }
            set {
                this.messagingsocindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool messagingsocindSpecified {
            get {
                return this.messagingsocindFieldSpecified;
            }
            set {
                this.messagingsocindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("voice-control-valid", Order=16)]
        public bool voicecontrolvalid {
            get {
                return this.voicecontrolvalidField;
            }
            set {
                this.voicecontrolvalidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool voicecontrolvalidSpecified {
            get {
                return this.voicecontrolvalidFieldSpecified;
            }
            set {
                this.voicecontrolvalidFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceValidationResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceValidationResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceValidationResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceValidationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceValidationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceValidationResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceValidationResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceValidationResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceValidationResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceValidationResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceValidationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceValidationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceValidationResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceValidationResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ServiceValidationResponseBundlesubppchange {
        
        private string primarybundlesocField;
        
        private string secondarybundlesocField;
        
        private string removesubcountField;
        
        private List<ServiceValidationResponseBundlesubppchangeBundlesecondarysub> bundlesecondarysubField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ServiceValidationResponseBundlesubppchange class constructor
        /// </summary>
        public ServiceValidationResponseBundlesubppchange() {
            this.bundlesecondarysubField = new List<ServiceValidationResponseBundlesubppchangeBundlesecondarysub>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("primary-bundle-soc", Order=0)]
        public string primarybundlesoc {
            get {
                return this.primarybundlesocField;
            }
            set {
                this.primarybundlesocField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("secondary-bundle-soc", Order=1)]
        public string secondarybundlesoc {
            get {
                return this.secondarybundlesocField;
            }
            set {
                this.secondarybundlesocField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("remove-sub-count", DataType="integer", Order=2)]
        public string removesubcount {
            get {
                return this.removesubcountField;
            }
            set {
                this.removesubcountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bundle-secondary-sub", Order=3)]
        public List<ServiceValidationResponseBundlesubppchangeBundlesecondarysub> bundlesecondarysub {
            get {
                return this.bundlesecondarysubField;
            }
            set {
                this.bundlesecondarysubField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceValidationResponseBundlesubppchange));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceValidationResponseBundlesubppchange object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceValidationResponseBundlesubppchange object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceValidationResponseBundlesubppchange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceValidationResponseBundlesubppchange obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationResponseBundlesubppchange);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceValidationResponseBundlesubppchange obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceValidationResponseBundlesubppchange Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceValidationResponseBundlesubppchange)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceValidationResponseBundlesubppchange object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceValidationResponseBundlesubppchange object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceValidationResponseBundlesubppchange object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceValidationResponseBundlesubppchange obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationResponseBundlesubppchange);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationResponseBundlesubppchange obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationResponseBundlesubppchange obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceValidationResponseBundlesubppchange LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceValidationResponseBundlesubppchange LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ServiceValidationResponseBundlesubppchangeBundlesecondarysub {
        
        private string subscriberidField;
        
        private string referenceptnField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-id", Order=0)]
        public string subscriberid {
            get {
                return this.subscriberidField;
            }
            set {
                this.subscriberidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", Order=1)]
        public string referenceptn {
            get {
                return this.referenceptnField;
            }
            set {
                this.referenceptnField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceValidationResponseBundlesubppchangeBundlesecondarysub));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceValidationResponseBundlesubppchangeBundlesecondarysub object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceValidationResponseBundlesubppchangeBundlesecondarysub object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceValidationResponseBundlesubppchangeBundlesecondarysub object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceValidationResponseBundlesubppchangeBundlesecondarysub obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationResponseBundlesubppchangeBundlesecondarysub);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceValidationResponseBundlesubppchangeBundlesecondarysub obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceValidationResponseBundlesubppchangeBundlesecondarysub Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceValidationResponseBundlesubppchangeBundlesecondarysub)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceValidationResponseBundlesubppchangeBundlesecondarysub object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceValidationResponseBundlesubppchangeBundlesecondarysub object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceValidationResponseBundlesubppchangeBundlesecondarysub object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceValidationResponseBundlesubppchangeBundlesecondarysub obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationResponseBundlesubppchangeBundlesecondarysub);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationResponseBundlesubppchangeBundlesecondarysub obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationResponseBundlesubppchangeBundlesecondarysub obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceValidationResponseBundlesubppchangeBundlesecondarysub LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceValidationResponseBundlesubppchangeBundlesecondarysub LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class BillSummaryInfoType {
        
        private decimal totaladditionallinefeeField;
        
        private bool totaladditionallinefeeFieldSpecified;
        
        private decimal totaladditionaloptionsfeeField;
        
        private bool totaladditionaloptionsfeeFieldSpecified;
        
        private decimal firstmonthsbillField;
        
        private bool firstmonthsbillFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("total-additional-line-fee", Order=0)]
        public decimal totaladditionallinefee {
            get {
                return this.totaladditionallinefeeField;
            }
            set {
                this.totaladditionallinefeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool totaladditionallinefeeSpecified {
            get {
                return this.totaladditionallinefeeFieldSpecified;
            }
            set {
                this.totaladditionallinefeeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("total-additional-options-fee", Order=1)]
        public decimal totaladditionaloptionsfee {
            get {
                return this.totaladditionaloptionsfeeField;
            }
            set {
                this.totaladditionaloptionsfeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool totaladditionaloptionsfeeSpecified {
            get {
                return this.totaladditionaloptionsfeeFieldSpecified;
            }
            set {
                this.totaladditionaloptionsfeeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("first-months-bill", Order=2)]
        public decimal firstmonthsbill {
            get {
                return this.firstmonthsbillField;
            }
            set {
                this.firstmonthsbillField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool firstmonthsbillSpecified {
            get {
                return this.firstmonthsbillFieldSpecified;
            }
            set {
                this.firstmonthsbillFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BillSummaryInfoType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BillSummaryInfoType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BillSummaryInfoType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BillSummaryInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BillSummaryInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(BillSummaryInfoType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BillSummaryInfoType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BillSummaryInfoType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BillSummaryInfoType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BillSummaryInfoType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BillSummaryInfoType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BillSummaryInfoType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BillSummaryInfoType obj, out System.Exception exception) {
            exception = null;
            obj = default(BillSummaryInfoType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BillSummaryInfoType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BillSummaryInfoType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BillSummaryInfoType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BillSummaryInfoType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ServiceValidationPlanType {
        
        private string planidField;
        
        private System.DateTime effectivedateField;
        
        private bool effectivedateFieldSpecified;
        
        private System.DateTime expirationdateField;
        
        private bool expirationdateFieldSpecified;
        
        private string plannameField;
        
        private bool banlevelplanField;
        
        private bool banlevelplanFieldSpecified;
        
        private bool autoupdateField;
        
        private bool autoupdateFieldSpecified;
        
        private bool cellindField;
        
        private bool cellindFieldSpecified;
        
        private bool dcindField;
        
        private bool dcindFieldSpecified;
        
        private string pdsindField;
        
        private string cdmapdsindField;
        
        private string servicetypeField;
        
        private List<ProductType> productdefinitionField;
        
        private List<FeatureType> featureField;
        
        private List<ServiceValidationOptionType> otheroptionField;
        
        private bool naiindField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ServiceValidationPlanType class constructor
        /// </summary>
        public ServiceValidationPlanType() {
            this.otheroptionField = new List<ServiceValidationOptionType>();
            this.featureField = new List<FeatureType>();
            this.productdefinitionField = new List<ProductType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-id", Order=0)]
        public string planid {
            get {
                return this.planidField;
            }
            set {
                this.planidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("effective-date", Order=1)]
        public System.DateTime effectivedate {
            get {
                return this.effectivedateField;
            }
            set {
                this.effectivedateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool effectivedateSpecified {
            get {
                return this.effectivedateFieldSpecified;
            }
            set {
                this.effectivedateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("expiration-date", Order=2)]
        public System.DateTime expirationdate {
            get {
                return this.expirationdateField;
            }
            set {
                this.expirationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationdateSpecified {
            get {
                return this.expirationdateFieldSpecified;
            }
            set {
                this.expirationdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-name", Order=3)]
        public string planname {
            get {
                return this.plannameField;
            }
            set {
                this.plannameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ban-level-plan", Order=4)]
        public bool banlevelplan {
            get {
                return this.banlevelplanField;
            }
            set {
                this.banlevelplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool banlevelplanSpecified {
            get {
                return this.banlevelplanFieldSpecified;
            }
            set {
                this.banlevelplanFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("auto-update", Order=5)]
        public bool autoupdate {
            get {
                return this.autoupdateField;
            }
            set {
                this.autoupdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool autoupdateSpecified {
            get {
                return this.autoupdateFieldSpecified;
            }
            set {
                this.autoupdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cell-ind", Order=6)]
        public bool cellind {
            get {
                return this.cellindField;
            }
            set {
                this.cellindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cellindSpecified {
            get {
                return this.cellindFieldSpecified;
            }
            set {
                this.cellindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("dc-ind", Order=7)]
        public bool dcind {
            get {
                return this.dcindField;
            }
            set {
                this.dcindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dcindSpecified {
            get {
                return this.dcindFieldSpecified;
            }
            set {
                this.dcindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pds-ind", Order=8)]
        public string pdsind {
            get {
                return this.pdsindField;
            }
            set {
                this.pdsindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cdma-pds-ind", Order=9)]
        public string cdmapdsind {
            get {
                return this.cdmapdsindField;
            }
            set {
                this.cdmapdsindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-type", Order=10)]
        public string servicetype {
            get {
                return this.servicetypeField;
            }
            set {
                this.servicetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("product-definition", Order=11)]
        [System.Xml.Serialization.XmlArrayItemAttribute("product-indicator", typeof(ProductType), IsNullable=false)]
        public List<ProductType> productdefinition {
            get {
                return this.productdefinitionField;
            }
            set {
                this.productdefinitionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature", Order=12)]
        public List<FeatureType> feature {
            get {
                return this.featureField;
            }
            set {
                this.featureField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("other-option", Order=13)]
        public List<ServiceValidationOptionType> otheroption {
            get {
                return this.otheroptionField;
            }
            set {
                this.otheroptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("nai-ind", Order=14)]
        public bool naiind {
            get {
                return this.naiindField;
            }
            set {
                this.naiindField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceValidationPlanType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceValidationPlanType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceValidationPlanType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceValidationPlanType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceValidationPlanType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationPlanType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceValidationPlanType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceValidationPlanType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceValidationPlanType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceValidationPlanType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceValidationPlanType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceValidationPlanType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceValidationPlanType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationPlanType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationPlanType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationPlanType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceValidationPlanType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceValidationPlanType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ServiceValidationOptionType {
        
        private string optionidField;
        
        private bool existingsocField;
        
        private bool existingsocFieldSpecified;
        
        private ulong sequencenumField;
        
        private bool sequencenumFieldSpecified;
        
        private System.DateTime effectivedateField;
        
        private bool effectivedateFieldSpecified;
        
        private System.DateTime expirationdateField;
        
        private bool expirationdateFieldSpecified;
        
        private string optionnameField;
        
        private bool banleveloptionField;
        
        private bool banleveloptionFieldSpecified;
        
        private string relatedoptionidField;
        
        private bool autoupdateField;
        
        private bool autoupdateFieldSpecified;
        
        private bool cellindField;
        
        private bool cellindFieldSpecified;
        
        private bool dcindField;
        
        private bool dcindFieldSpecified;
        
        private string pdsindField;
        
        private string cdmapdsindField;
        
        private string servicetypeField;
        
        private YesNoType autoaddindField;
        
        private bool autoaddindFieldSpecified;
        
        private List<ProductType> productdefinitionField;
        
        private List<FeatureType> featureField;
        
        private bool socfeaturemodField;
        
        private bool socfeaturemodFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ServiceValidationOptionType class constructor
        /// </summary>
        public ServiceValidationOptionType() {
            this.featureField = new List<FeatureType>();
            this.productdefinitionField = new List<ProductType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-id", Order=0)]
        public string optionid {
            get {
                return this.optionidField;
            }
            set {
                this.optionidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("existing-soc", Order=1)]
        public bool existingsoc {
            get {
                return this.existingsocField;
            }
            set {
                this.existingsocField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool existingsocSpecified {
            get {
                return this.existingsocFieldSpecified;
            }
            set {
                this.existingsocFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sequence-num", Order=2)]
        public ulong sequencenum {
            get {
                return this.sequencenumField;
            }
            set {
                this.sequencenumField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sequencenumSpecified {
            get {
                return this.sequencenumFieldSpecified;
            }
            set {
                this.sequencenumFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("effective-date", Order=3)]
        public System.DateTime effectivedate {
            get {
                return this.effectivedateField;
            }
            set {
                this.effectivedateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool effectivedateSpecified {
            get {
                return this.effectivedateFieldSpecified;
            }
            set {
                this.effectivedateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("expiration-date", Order=4)]
        public System.DateTime expirationdate {
            get {
                return this.expirationdateField;
            }
            set {
                this.expirationdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool expirationdateSpecified {
            get {
                return this.expirationdateFieldSpecified;
            }
            set {
                this.expirationdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-name", Order=5)]
        public string optionname {
            get {
                return this.optionnameField;
            }
            set {
                this.optionnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ban-level-option", Order=6)]
        public bool banleveloption {
            get {
                return this.banleveloptionField;
            }
            set {
                this.banleveloptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool banleveloptionSpecified {
            get {
                return this.banleveloptionFieldSpecified;
            }
            set {
                this.banleveloptionFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("related-option-id", Order=7)]
        public string relatedoptionid {
            get {
                return this.relatedoptionidField;
            }
            set {
                this.relatedoptionidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("auto-update", Order=8)]
        public bool autoupdate {
            get {
                return this.autoupdateField;
            }
            set {
                this.autoupdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool autoupdateSpecified {
            get {
                return this.autoupdateFieldSpecified;
            }
            set {
                this.autoupdateFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cell-ind", Order=9)]
        public bool cellind {
            get {
                return this.cellindField;
            }
            set {
                this.cellindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cellindSpecified {
            get {
                return this.cellindFieldSpecified;
            }
            set {
                this.cellindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("dc-ind", Order=10)]
        public bool dcind {
            get {
                return this.dcindField;
            }
            set {
                this.dcindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dcindSpecified {
            get {
                return this.dcindFieldSpecified;
            }
            set {
                this.dcindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pds-ind", Order=11)]
        public string pdsind {
            get {
                return this.pdsindField;
            }
            set {
                this.pdsindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cdma-pds-ind", Order=12)]
        public string cdmapdsind {
            get {
                return this.cdmapdsindField;
            }
            set {
                this.cdmapdsindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-type", Order=13)]
        public string servicetype {
            get {
                return this.servicetypeField;
            }
            set {
                this.servicetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("auto-add-ind", Order=14)]
        public YesNoType autoaddind {
            get {
                return this.autoaddindField;
            }
            set {
                this.autoaddindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool autoaddindSpecified {
            get {
                return this.autoaddindFieldSpecified;
            }
            set {
                this.autoaddindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("product-definition", Order=15)]
        [System.Xml.Serialization.XmlArrayItemAttribute("product-indicator", typeof(ProductType), IsNullable=false)]
        public List<ProductType> productdefinition {
            get {
                return this.productdefinitionField;
            }
            set {
                this.productdefinitionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature", Order=16)]
        public List<FeatureType> feature {
            get {
                return this.featureField;
            }
            set {
                this.featureField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("soc-feature-mod", Order=17)]
        public bool socfeaturemod {
            get {
                return this.socfeaturemodField;
            }
            set {
                this.socfeaturemodField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool socfeaturemodSpecified {
            get {
                return this.socfeaturemodFieldSpecified;
            }
            set {
                this.socfeaturemodFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceValidationOptionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceValidationOptionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceValidationOptionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceValidationOptionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceValidationOptionType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationOptionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceValidationOptionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceValidationOptionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceValidationOptionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceValidationOptionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceValidationOptionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceValidationOptionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceValidationOptionType obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceValidationOptionType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationOptionType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceValidationOptionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceValidationOptionType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceValidationOptionType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Resource {
        
        private ResourceType resourcetypeField;
        
        private string iptypeField;
        
        private ResourceAction actionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("resource-type", Order=0)]
        public ResourceType resourcetype {
            get {
                return this.resourcetypeField;
            }
            set {
                this.resourcetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ip-type", Order=1)]
        public string iptype {
            get {
                return this.iptypeField;
            }
            set {
                this.iptypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public ResourceAction action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Resource));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Resource object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Resource object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Resource object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Resource obj, out System.Exception exception) {
            exception = null;
            obj = default(Resource);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Resource obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Resource Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Resource)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Resource object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Resource object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Resource object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Resource obj, out System.Exception exception) {
            exception = null;
            obj = default(Resource);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Resource obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Resource obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Resource LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Resource LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum ResourceType {
        
        /// <remarks/>
        P,
        
        /// <remarks/>
        U,
        
        /// <remarks/>
        H,
        
        /// <remarks/>
        I,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        S,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum ResourceAction {
        
        /// <remarks/>
        ADD,
        
        /// <remarks/>
        RES,
        
        /// <remarks/>
        DEL,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class SuggestionGroup {
        
        private List<string> conflictingsocField;
        
        private List<string> conflictField;
        
        private string suggestiongroupidField;
        
        private List<Suggestion> suggestionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SuggestionGroup class constructor
        /// </summary>
        public SuggestionGroup() {
            this.suggestionField = new List<Suggestion>();
            this.conflictField = new List<string>();
            this.conflictingsocField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("conflicting-soc", Order=0)]
        public List<string> conflictingsoc {
            get {
                return this.conflictingsocField;
            }
            set {
                this.conflictingsocField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("conflict", Order=1)]
        public List<string> conflict {
            get {
                return this.conflictField;
            }
            set {
                this.conflictField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("suggestion-group-id", DataType="positiveInteger", Order=2)]
        public string suggestiongroupid {
            get {
                return this.suggestiongroupidField;
            }
            set {
                this.suggestiongroupidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("suggestion", Order=3)]
        public List<Suggestion> suggestion {
            get {
                return this.suggestionField;
            }
            set {
                this.suggestionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SuggestionGroup));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SuggestionGroup object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SuggestionGroup object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SuggestionGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SuggestionGroup obj, out System.Exception exception) {
            exception = null;
            obj = default(SuggestionGroup);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SuggestionGroup obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SuggestionGroup Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SuggestionGroup)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SuggestionGroup object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SuggestionGroup object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SuggestionGroup object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SuggestionGroup obj, out System.Exception exception) {
            exception = null;
            obj = default(SuggestionGroup);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SuggestionGroup obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SuggestionGroup obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SuggestionGroup LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SuggestionGroup LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Suggestion {
        
        private string suggestionidField;
        
        private List<ActionItem> actionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// Suggestion class constructor
        /// </summary>
        public Suggestion() {
            this.actionField = new List<ActionItem>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("suggestion-id", DataType="positiveInteger", Order=0)]
        public string suggestionid {
            get {
                return this.suggestionidField;
            }
            set {
                this.suggestionidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("action", Order=1)]
        public List<ActionItem> action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Suggestion));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Suggestion object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Suggestion object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Suggestion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Suggestion obj, out System.Exception exception) {
            exception = null;
            obj = default(Suggestion);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Suggestion obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Suggestion Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Suggestion)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Suggestion object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Suggestion object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Suggestion object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Suggestion obj, out System.Exception exception) {
            exception = null;
            obj = default(Suggestion);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Suggestion obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Suggestion obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Suggestion LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Suggestion LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ActionItem {
        
        private ActionItemType typeField;
        
        private List<PricePlanType> priceplanField;
        
        private List<AddOnOptionType> optionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActionItem class constructor
        /// </summary>
        public ActionItem() {
            this.optionField = new List<AddOnOptionType>();
            this.priceplanField = new List<PricePlanType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public ActionItemType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("price-plan", Order=1)]
        public List<PricePlanType> priceplan {
            get {
                return this.priceplanField;
            }
            set {
                this.priceplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option", Order=2)]
        public List<AddOnOptionType> option {
            get {
                return this.optionField;
            }
            set {
                this.optionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActionItem));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActionItem object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActionItem object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActionItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActionItem obj, out System.Exception exception) {
            exception = null;
            obj = default(ActionItem);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActionItem obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActionItem Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActionItem)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActionItem object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActionItem object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActionItem object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActionItem obj, out System.Exception exception) {
            exception = null;
            obj = default(ActionItem);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActionItem obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActionItem obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActionItem LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActionItem LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum ActionItemType {
        
        /// <remarks/>
        ADD,
        
        /// <remarks/>
        EXPIRE,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class PricePlanType {
        
        private string planidField;
        
        private string plannameField;
        
        private string plandescField;
        
        private PlanType plantypeField;
        
        private bool plantypeFieldSpecified;
        
        private string plandetailField;
        
        private bool promoplanField;
        
        private bool promoplanFieldSpecified;
        
        private string planlearnmoreField;
        
        private string productdisclosureField;
        
        private string ivrsocdescField;
        
        private string planscharacteristicsField;
        
        private string plancategoryField;
        
        private string plandisplaycategoryField;
        
        private bool banlevelplanField;
        
        private bool banlevelplanFieldSpecified;
        
        private bool cellindField;
        
        private bool cellindFieldSpecified;
        
        private bool dcindField;
        
        private bool dcindFieldSpecified;
        
        private string pdsindField;
        
        private string cdmapdsindField;
        
        private bool socrenewableindField;
        
        private bool socrenewableindFieldSpecified;
        
        private List<object> itemsField;
        
        private decimal onetimechargeField;
        
        private bool onetimechargeFieldSpecified;
        
        private string maxltssubscribersField;
        
        private string sharinggroupidField;
        
        private string planpriorityField;
        
        private List<PricePlanTypeDataallowances> dataallowancesField;
        
        private string sequencenumberField;
        
        private YesNoType nationalplanField;
        
        private YesNoType addonplanField;
        
        private FamilyPlanType familyplanField;
        
        private YesNoType regionalplanField;
        
        private YesNoType promotionalplanField;
        
        private string contracttermField;
        
        private uint allowednumberrangesField;
        
        private bool allowednumberrangesFieldSpecified;
        
        private uint numberrangesizeField;
        
        private bool numberrangesizeFieldSpecified;
        
        private YesNoType taxexclusiveField;
        
        private bool taxexclusiveFieldSpecified;
        
        private List<ProductType> productdefinitionField;
        
        private YesNoType corpgovreqField;
        
        private bool corpgovreqFieldSpecified;
        
        private YesNoType planequivalentField;
        
        private bool planequivalentFieldSpecified;
        
        private string affinitysoclinkField;
        
        private AffinityType affinityField;
        
        private string reqprimarybundleField;
        
        private string maxsecbundleField;
        
        private PlanAttributeInfo planinfoField;
        
        private List<FeatureType> featureField;
        
        private List<IncludedOptionType> includedsocField;
        
        private string musmilestonelevelField;
        
        private PricePlanTypePrepaidplanattributeinfo prepaidplanattributeinfoField;
        
        private string studentplanField;
        
        private string installmentbillingplanField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PricePlanType class constructor
        /// </summary>
        public PricePlanType() {
            this.prepaidplanattributeinfoField = new PricePlanTypePrepaidplanattributeinfo();
            this.includedsocField = new List<IncludedOptionType>();
            this.featureField = new List<FeatureType>();
            this.planinfoField = new PlanAttributeInfo();
            this.affinityField = new AffinityType();
            this.productdefinitionField = new List<ProductType>();
            this.dataallowancesField = new List<PricePlanTypeDataallowances>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-id", Order=0)]
        public string planid {
            get {
                return this.planidField;
            }
            set {
                this.planidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-name", Order=1)]
        public string planname {
            get {
                return this.plannameField;
            }
            set {
                this.plannameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-desc", Order=2)]
        public string plandesc {
            get {
                return this.plandescField;
            }
            set {
                this.plandescField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-type", Order=3)]
        public PlanType plantype {
            get {
                return this.plantypeField;
            }
            set {
                this.plantypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool plantypeSpecified {
            get {
                return this.plantypeFieldSpecified;
            }
            set {
                this.plantypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-detail", Order=4)]
        public string plandetail {
            get {
                return this.plandetailField;
            }
            set {
                this.plandetailField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("promo-plan", Order=5)]
        public bool promoplan {
            get {
                return this.promoplanField;
            }
            set {
                this.promoplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool promoplanSpecified {
            get {
                return this.promoplanFieldSpecified;
            }
            set {
                this.promoplanFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-learn-more", Order=6)]
        public string planlearnmore {
            get {
                return this.planlearnmoreField;
            }
            set {
                this.planlearnmoreField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("product-disclosure", Order=7)]
        public string productdisclosure {
            get {
                return this.productdisclosureField;
            }
            set {
                this.productdisclosureField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ivr-soc-desc", Order=8)]
        public string ivrsocdesc {
            get {
                return this.ivrsocdescField;
            }
            set {
                this.ivrsocdescField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plans-characteristics", Order=9)]
        public string planscharacteristics {
            get {
                return this.planscharacteristicsField;
            }
            set {
                this.planscharacteristicsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-category", Order=10)]
        public string plancategory {
            get {
                return this.plancategoryField;
            }
            set {
                this.plancategoryField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-display-category", Order=11)]
        public string plandisplaycategory {
            get {
                return this.plandisplaycategoryField;
            }
            set {
                this.plandisplaycategoryField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ban-level-plan", Order=12)]
        public bool banlevelplan {
            get {
                return this.banlevelplanField;
            }
            set {
                this.banlevelplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool banlevelplanSpecified {
            get {
                return this.banlevelplanFieldSpecified;
            }
            set {
                this.banlevelplanFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cell-ind", Order=13)]
        public bool cellind {
            get {
                return this.cellindField;
            }
            set {
                this.cellindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cellindSpecified {
            get {
                return this.cellindFieldSpecified;
            }
            set {
                this.cellindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("dc-ind", Order=14)]
        public bool dcind {
            get {
                return this.dcindField;
            }
            set {
                this.dcindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool dcindSpecified {
            get {
                return this.dcindFieldSpecified;
            }
            set {
                this.dcindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pds-ind", Order=15)]
        public string pdsind {
            get {
                return this.pdsindField;
            }
            set {
                this.pdsindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cdma-pds-ind", Order=16)]
        public string cdmapdsind {
            get {
                return this.cdmapdsindField;
            }
            set {
                this.cdmapdsindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("soc-renewable-ind", Order=17)]
        public bool socrenewableind {
            get {
                return this.socrenewableindField;
            }
            set {
                this.socrenewableindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool socrenewableindSpecified {
            get {
                return this.socrenewableindFieldSpecified;
            }
            set {
                this.socrenewableindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("lts-monthly-price", typeof(PricePlanTypeLtsmonthlyprice), Order=18)]
        [System.Xml.Serialization.XmlElementAttribute("monthly-price", typeof(double), Order=18)]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("one-time-charge", Order=19)]
        public decimal onetimecharge {
            get {
                return this.onetimechargeField;
            }
            set {
                this.onetimechargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool onetimechargeSpecified {
            get {
                return this.onetimechargeFieldSpecified;
            }
            set {
                this.onetimechargeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("max-lts-subscribers", DataType="positiveInteger", Order=20)]
        public string maxltssubscribers {
            get {
                return this.maxltssubscribersField;
            }
            set {
                this.maxltssubscribersField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sharing-group-id", Order=21)]
        public string sharinggroupid {
            get {
                return this.sharinggroupidField;
            }
            set {
                this.sharinggroupidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-priority", DataType="nonNegativeInteger", Order=22)]
        public string planpriority {
            get {
                return this.planpriorityField;
            }
            set {
                this.planpriorityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("data-allowances", Order=23)]
        public List<PricePlanTypeDataallowances> dataallowances {
            get {
                return this.dataallowancesField;
            }
            set {
                this.dataallowancesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sequence-number", DataType="positiveInteger", Order=24)]
        public string sequencenumber {
            get {
                return this.sequencenumberField;
            }
            set {
                this.sequencenumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("national-plan", Order=25)]
        public YesNoType nationalplan {
            get {
                return this.nationalplanField;
            }
            set {
                this.nationalplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("addon-plan", Order=26)]
        public YesNoType addonplan {
            get {
                return this.addonplanField;
            }
            set {
                this.addonplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("family-plan", Order=27)]
        public FamilyPlanType familyplan {
            get {
                return this.familyplanField;
            }
            set {
                this.familyplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("regional-plan", Order=28)]
        public YesNoType regionalplan {
            get {
                return this.regionalplanField;
            }
            set {
                this.regionalplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("promotional-plan", Order=29)]
        public YesNoType promotionalplan {
            get {
                return this.promotionalplanField;
            }
            set {
                this.promotionalplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("contract-term", Order=30)]
        public string contractterm {
            get {
                return this.contracttermField;
            }
            set {
                this.contracttermField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("allowed-number-ranges", Order=31)]
        public uint allowednumberranges {
            get {
                return this.allowednumberrangesField;
            }
            set {
                this.allowednumberrangesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool allowednumberrangesSpecified {
            get {
                return this.allowednumberrangesFieldSpecified;
            }
            set {
                this.allowednumberrangesFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("number-range-size", Order=32)]
        public uint numberrangesize {
            get {
                return this.numberrangesizeField;
            }
            set {
                this.numberrangesizeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberrangesizeSpecified {
            get {
                return this.numberrangesizeFieldSpecified;
            }
            set {
                this.numberrangesizeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("tax-exclusive", Order=33)]
        public YesNoType taxexclusive {
            get {
                return this.taxexclusiveField;
            }
            set {
                this.taxexclusiveField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool taxexclusiveSpecified {
            get {
                return this.taxexclusiveFieldSpecified;
            }
            set {
                this.taxexclusiveFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("product-definition", Order=34)]
        [System.Xml.Serialization.XmlArrayItemAttribute("product-indicator", typeof(ProductType), IsNullable=false)]
        public List<ProductType> productdefinition {
            get {
                return this.productdefinitionField;
            }
            set {
                this.productdefinitionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-req", Order=35)]
        public YesNoType corpgovreq {
            get {
                return this.corpgovreqField;
            }
            set {
                this.corpgovreqField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool corpgovreqSpecified {
            get {
                return this.corpgovreqFieldSpecified;
            }
            set {
                this.corpgovreqFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-equivalent", Order=36)]
        public YesNoType planequivalent {
            get {
                return this.planequivalentField;
            }
            set {
                this.planequivalentField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool planequivalentSpecified {
            get {
                return this.planequivalentFieldSpecified;
            }
            set {
                this.planequivalentFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("affinity-soc-link", Order=37)]
        public string affinitysoclink {
            get {
                return this.affinitysoclinkField;
            }
            set {
                this.affinitysoclinkField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=38)]
        public AffinityType affinity {
            get {
                return this.affinityField;
            }
            set {
                this.affinityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("req-primary-bundle", Order=39)]
        public string reqprimarybundle {
            get {
                return this.reqprimarybundleField;
            }
            set {
                this.reqprimarybundleField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("max-sec-bundle", DataType="positiveInteger", Order=40)]
        public string maxsecbundle {
            get {
                return this.maxsecbundleField;
            }
            set {
                this.maxsecbundleField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-info", Order=41)]
        public PlanAttributeInfo planinfo {
            get {
                return this.planinfoField;
            }
            set {
                this.planinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature", Order=42)]
        public List<FeatureType> feature {
            get {
                return this.featureField;
            }
            set {
                this.featureField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("included-soc", Order=43)]
        public List<IncludedOptionType> includedsoc {
            get {
                return this.includedsocField;
            }
            set {
                this.includedsocField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("mus-milestone-level", DataType="integer", Order=44)]
        public string musmilestonelevel {
            get {
                return this.musmilestonelevelField;
            }
            set {
                this.musmilestonelevelField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("prepaid-plan-attribute-info", Order=45)]
        public PricePlanTypePrepaidplanattributeinfo prepaidplanattributeinfo {
            get {
                return this.prepaidplanattributeinfoField;
            }
            set {
                this.prepaidplanattributeinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("student-plan", Order=46)]
        public string studentplan {
            get {
                return this.studentplanField;
            }
            set {
                this.studentplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("installment-billing-plan", Order=47)]
        public string installmentbillingplan {
            get {
                return this.installmentbillingplanField;
            }
            set {
                this.installmentbillingplanField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PricePlanType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PricePlanType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PricePlanType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PricePlanType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PricePlanType obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PricePlanType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PricePlanType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PricePlanType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PricePlanType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PricePlanType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PricePlanType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PricePlanType obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PricePlanType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PricePlanType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class PricePlanTypeLtsmonthlyprice {
        
        private string rankField;
        
        private double valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="positiveInteger")]
        public string rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        [System.Xml.Serialization.XmlTextAttribute()]
        public double Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PricePlanTypeLtsmonthlyprice));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PricePlanTypeLtsmonthlyprice object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PricePlanTypeLtsmonthlyprice object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PricePlanTypeLtsmonthlyprice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PricePlanTypeLtsmonthlyprice obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanTypeLtsmonthlyprice);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PricePlanTypeLtsmonthlyprice obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PricePlanTypeLtsmonthlyprice Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PricePlanTypeLtsmonthlyprice)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PricePlanTypeLtsmonthlyprice object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PricePlanTypeLtsmonthlyprice object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PricePlanTypeLtsmonthlyprice object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PricePlanTypeLtsmonthlyprice obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanTypeLtsmonthlyprice);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanTypeLtsmonthlyprice obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanTypeLtsmonthlyprice obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PricePlanTypeLtsmonthlyprice LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PricePlanTypeLtsmonthlyprice LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class PricePlanTypeDataallowances {
        
        private string dataallowancetypeField;
        
        private PricePlanTypeDataallowancesDataallowance dataallowanceField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PricePlanTypeDataallowances class constructor
        /// </summary>
        public PricePlanTypeDataallowances() {
            this.dataallowanceField = new PricePlanTypeDataallowancesDataallowance();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("data-allowance-type", Order=0)]
        public string dataallowancetype {
            get {
                return this.dataallowancetypeField;
            }
            set {
                this.dataallowancetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("data-allowance", Order=1)]
        public PricePlanTypeDataallowancesDataallowance dataallowance {
            get {
                return this.dataallowanceField;
            }
            set {
                this.dataallowanceField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PricePlanTypeDataallowances));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PricePlanTypeDataallowances object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PricePlanTypeDataallowances object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PricePlanTypeDataallowances object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PricePlanTypeDataallowances obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanTypeDataallowances);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PricePlanTypeDataallowances obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PricePlanTypeDataallowances Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PricePlanTypeDataallowances)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PricePlanTypeDataallowances object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PricePlanTypeDataallowances object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PricePlanTypeDataallowances object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PricePlanTypeDataallowances obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanTypeDataallowances);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanTypeDataallowances obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanTypeDataallowances obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PricePlanTypeDataallowances LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PricePlanTypeDataallowances LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class PricePlanTypeDataallowancesDataallowance {
        
        private string valueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PricePlanTypeDataallowancesDataallowance));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PricePlanTypeDataallowancesDataallowance object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PricePlanTypeDataallowancesDataallowance object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PricePlanTypeDataallowancesDataallowance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PricePlanTypeDataallowancesDataallowance obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanTypeDataallowancesDataallowance);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PricePlanTypeDataallowancesDataallowance obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PricePlanTypeDataallowancesDataallowance Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PricePlanTypeDataallowancesDataallowance)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PricePlanTypeDataallowancesDataallowance object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PricePlanTypeDataallowancesDataallowance object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PricePlanTypeDataallowancesDataallowance object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PricePlanTypeDataallowancesDataallowance obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanTypeDataallowancesDataallowance);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanTypeDataallowancesDataallowance obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanTypeDataallowancesDataallowance obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PricePlanTypeDataallowancesDataallowance LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PricePlanTypeDataallowancesDataallowance LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum FamilyPlanType {
        
        /// <remarks/>
        Y,
        
        /// <remarks/>
        N,
        
        /// <remarks/>
        B,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class PlanAttributeInfo {
        
        private string totalminutesField;
        
        private string anytimeminutesField;
        
        private string nightweekendminutesField;
        
        private string extraanytimeminuteschargeField;
        
        private string longdistancechargeField;
        
        private string unitsmschargeField;
        
        private string callforwardingchargerateField;
        
        private string earlyterminationfeeField;
        
        private string m2mminutesField;
        
        private string intlchargeperminuteField;
        
        private string roamingchargeField;
        
        private string averagechargeField;
        
        private string nationalroamingchargeField;
        
        private string longdistanceminutesField;
        
        private string intlroamingchargeField;
        
        private string billingincrementField;
        
        private string wirelessinternetchargerateField;
        
        private string numericpagingchargerateField;
        
        private string faxdatachargerateField;
        
        private string familyminutesField;
        
        private string airtimerateField;
        
        private string walkietalkieminutesField;
        
        private string walkietalkieoveragechargerateField;
        
        private string nationwidedcchargerateField;
        
        private string voicemailField;
        
        private string calleridField;
        
        private string unitsmsincludedField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("total-minutes", Order=0)]
        public string totalminutes {
            get {
                return this.totalminutesField;
            }
            set {
                this.totalminutesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("anytime-minutes", Order=1)]
        public string anytimeminutes {
            get {
                return this.anytimeminutesField;
            }
            set {
                this.anytimeminutesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("night-weekend-minutes", Order=2)]
        public string nightweekendminutes {
            get {
                return this.nightweekendminutesField;
            }
            set {
                this.nightweekendminutesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("extra-anytimeminutes-charge", Order=3)]
        public string extraanytimeminutescharge {
            get {
                return this.extraanytimeminuteschargeField;
            }
            set {
                this.extraanytimeminuteschargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("long-distance-charge", Order=4)]
        public string longdistancecharge {
            get {
                return this.longdistancechargeField;
            }
            set {
                this.longdistancechargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("unit-sms-charge", Order=5)]
        public string unitsmscharge {
            get {
                return this.unitsmschargeField;
            }
            set {
                this.unitsmschargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("call-forwarding-charge-rate", Order=6)]
        public string callforwardingchargerate {
            get {
                return this.callforwardingchargerateField;
            }
            set {
                this.callforwardingchargerateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("early-termination-fee", Order=7)]
        public string earlyterminationfee {
            get {
                return this.earlyterminationfeeField;
            }
            set {
                this.earlyterminationfeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("m2m-minutes", Order=8)]
        public string m2mminutes {
            get {
                return this.m2mminutesField;
            }
            set {
                this.m2mminutesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("intl-charge-per-minute", Order=9)]
        public string intlchargeperminute {
            get {
                return this.intlchargeperminuteField;
            }
            set {
                this.intlchargeperminuteField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("roaming-charge", Order=10)]
        public string roamingcharge {
            get {
                return this.roamingchargeField;
            }
            set {
                this.roamingchargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("average-charge", Order=11)]
        public string averagecharge {
            get {
                return this.averagechargeField;
            }
            set {
                this.averagechargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("national-roaming-charge", Order=12)]
        public string nationalroamingcharge {
            get {
                return this.nationalroamingchargeField;
            }
            set {
                this.nationalroamingchargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("long-distance-minutes", Order=13)]
        public string longdistanceminutes {
            get {
                return this.longdistanceminutesField;
            }
            set {
                this.longdistanceminutesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("intl-roaming-charge", Order=14)]
        public string intlroamingcharge {
            get {
                return this.intlroamingchargeField;
            }
            set {
                this.intlroamingchargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("billing-increment", Order=15)]
        public string billingincrement {
            get {
                return this.billingincrementField;
            }
            set {
                this.billingincrementField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("wireless-internet-charge-rate", Order=16)]
        public string wirelessinternetchargerate {
            get {
                return this.wirelessinternetchargerateField;
            }
            set {
                this.wirelessinternetchargerateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("numeric-paging-charge-rate", Order=17)]
        public string numericpagingchargerate {
            get {
                return this.numericpagingchargerateField;
            }
            set {
                this.numericpagingchargerateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("fax-data-charge-rate", Order=18)]
        public string faxdatachargerate {
            get {
                return this.faxdatachargerateField;
            }
            set {
                this.faxdatachargerateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("family-minutes", Order=19)]
        public string familyminutes {
            get {
                return this.familyminutesField;
            }
            set {
                this.familyminutesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("airtime-rate", Order=20)]
        public string airtimerate {
            get {
                return this.airtimerateField;
            }
            set {
                this.airtimerateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("walkie-talkie-minutes", Order=21)]
        public string walkietalkieminutes {
            get {
                return this.walkietalkieminutesField;
            }
            set {
                this.walkietalkieminutesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("walkie-talkie-overage-charge-rate", Order=22)]
        public string walkietalkieoveragechargerate {
            get {
                return this.walkietalkieoveragechargerateField;
            }
            set {
                this.walkietalkieoveragechargerateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("nationwide-dc-charge-rate", Order=23)]
        public string nationwidedcchargerate {
            get {
                return this.nationwidedcchargerateField;
            }
            set {
                this.nationwidedcchargerateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=24)]
        public string voicemail {
            get {
                return this.voicemailField;
            }
            set {
                this.voicemailField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("caller-id", Order=25)]
        public string callerid {
            get {
                return this.calleridField;
            }
            set {
                this.calleridField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("unit-sms-included", DataType="integer", Order=26)]
        public string unitsmsincluded {
            get {
                return this.unitsmsincludedField;
            }
            set {
                this.unitsmsincludedField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PlanAttributeInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PlanAttributeInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PlanAttributeInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PlanAttributeInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PlanAttributeInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PlanAttributeInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PlanAttributeInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PlanAttributeInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PlanAttributeInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PlanAttributeInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PlanAttributeInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PlanAttributeInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PlanAttributeInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PlanAttributeInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PlanAttributeInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PlanAttributeInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PlanAttributeInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PlanAttributeInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class IncludedOptionType {
        
        private string optionidField;
        
        private string optionnameField;
        
        private string optioncodeField;
        
        private string optiondescField;
        
        private uint allowednumberrangesField;
        
        private bool allowednumberrangesFieldSpecified;
        
        private uint numberrangesizeField;
        
        private bool numberrangesizeFieldSpecified;
        
        private List<ProductType> productdefinitionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// IncludedOptionType class constructor
        /// </summary>
        public IncludedOptionType() {
            this.productdefinitionField = new List<ProductType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-id", Order=0)]
        public string optionid {
            get {
                return this.optionidField;
            }
            set {
                this.optionidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-name", Order=1)]
        public string optionname {
            get {
                return this.optionnameField;
            }
            set {
                this.optionnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-code", Order=2)]
        public string optioncode {
            get {
                return this.optioncodeField;
            }
            set {
                this.optioncodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option-desc", Order=3)]
        public string optiondesc {
            get {
                return this.optiondescField;
            }
            set {
                this.optiondescField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("allowed-number-ranges", Order=4)]
        public uint allowednumberranges {
            get {
                return this.allowednumberrangesField;
            }
            set {
                this.allowednumberrangesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool allowednumberrangesSpecified {
            get {
                return this.allowednumberrangesFieldSpecified;
            }
            set {
                this.allowednumberrangesFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("number-range-size", Order=5)]
        public uint numberrangesize {
            get {
                return this.numberrangesizeField;
            }
            set {
                this.numberrangesizeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool numberrangesizeSpecified {
            get {
                return this.numberrangesizeFieldSpecified;
            }
            set {
                this.numberrangesizeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("product-definition", Order=6)]
        [System.Xml.Serialization.XmlArrayItemAttribute("product-indicator", typeof(ProductType), IsNullable=false)]
        public List<ProductType> productdefinition {
            get {
                return this.productdefinitionField;
            }
            set {
                this.productdefinitionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(IncludedOptionType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current IncludedOptionType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an IncludedOptionType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output IncludedOptionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out IncludedOptionType obj, out System.Exception exception) {
            exception = null;
            obj = default(IncludedOptionType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out IncludedOptionType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static IncludedOptionType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((IncludedOptionType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current IncludedOptionType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an IncludedOptionType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output IncludedOptionType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out IncludedOptionType obj, out System.Exception exception) {
            exception = null;
            obj = default(IncludedOptionType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out IncludedOptionType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out IncludedOptionType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static IncludedOptionType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static IncludedOptionType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class PricePlanTypePrepaidplanattributeinfo {
        
        private YesNoType demoplanindField;
        
        private bool demoplanindFieldSpecified;
        
        private YesNoType restartcapableplanindField;
        
        private bool restartcapableplanindFieldSpecified;
        
        private YesNoType datathrottleplanindField;
        
        private bool datathrottleplanindFieldSpecified;
        
        private YesNoType advancepaymentplanindField;
        
        private bool advancepaymentplanindFieldSpecified;
        
        private YesNoType freestateplanindField;
        
        private bool freestateplanindFieldSpecified;
        
        private bool mrcdiscounteligibleindField;
        
        private bool mrcdiscounteligibleindFieldSpecified;
        
        private decimal mrcdiscountamountField;
        
        private bool mrcdiscountamountFieldSpecified;
        
        private string pcofferidField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("demo-plan-ind", Order=0)]
        public YesNoType demoplanind {
            get {
                return this.demoplanindField;
            }
            set {
                this.demoplanindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool demoplanindSpecified {
            get {
                return this.demoplanindFieldSpecified;
            }
            set {
                this.demoplanindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("restart-capable-plan-ind", Order=1)]
        public YesNoType restartcapableplanind {
            get {
                return this.restartcapableplanindField;
            }
            set {
                this.restartcapableplanindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool restartcapableplanindSpecified {
            get {
                return this.restartcapableplanindFieldSpecified;
            }
            set {
                this.restartcapableplanindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("data-throttle-plan-ind", Order=2)]
        public YesNoType datathrottleplanind {
            get {
                return this.datathrottleplanindField;
            }
            set {
                this.datathrottleplanindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool datathrottleplanindSpecified {
            get {
                return this.datathrottleplanindFieldSpecified;
            }
            set {
                this.datathrottleplanindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("advance-payment-plan-ind", Order=3)]
        public YesNoType advancepaymentplanind {
            get {
                return this.advancepaymentplanindField;
            }
            set {
                this.advancepaymentplanindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool advancepaymentplanindSpecified {
            get {
                return this.advancepaymentplanindFieldSpecified;
            }
            set {
                this.advancepaymentplanindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("free-state-plan-ind", Order=4)]
        public YesNoType freestateplanind {
            get {
                return this.freestateplanindField;
            }
            set {
                this.freestateplanindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool freestateplanindSpecified {
            get {
                return this.freestateplanindFieldSpecified;
            }
            set {
                this.freestateplanindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("mrc-discount-eligible-ind", Order=5)]
        public bool mrcdiscounteligibleind {
            get {
                return this.mrcdiscounteligibleindField;
            }
            set {
                this.mrcdiscounteligibleindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mrcdiscounteligibleindSpecified {
            get {
                return this.mrcdiscounteligibleindFieldSpecified;
            }
            set {
                this.mrcdiscounteligibleindFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("mrc-discount-amount", Order=6)]
        public decimal mrcdiscountamount {
            get {
                return this.mrcdiscountamountField;
            }
            set {
                this.mrcdiscountamountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mrcdiscountamountSpecified {
            get {
                return this.mrcdiscountamountFieldSpecified;
            }
            set {
                this.mrcdiscountamountFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pc-offer-id", Order=7)]
        public string pcofferid {
            get {
                return this.pcofferidField;
            }
            set {
                this.pcofferidField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PricePlanTypePrepaidplanattributeinfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PricePlanTypePrepaidplanattributeinfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PricePlanTypePrepaidplanattributeinfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PricePlanTypePrepaidplanattributeinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PricePlanTypePrepaidplanattributeinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanTypePrepaidplanattributeinfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PricePlanTypePrepaidplanattributeinfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PricePlanTypePrepaidplanattributeinfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PricePlanTypePrepaidplanattributeinfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PricePlanTypePrepaidplanattributeinfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PricePlanTypePrepaidplanattributeinfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PricePlanTypePrepaidplanattributeinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PricePlanTypePrepaidplanattributeinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanTypePrepaidplanattributeinfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanTypePrepaidplanattributeinfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanTypePrepaidplanattributeinfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PricePlanTypePrepaidplanattributeinfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PricePlanTypePrepaidplanattributeinfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doValidation", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ValidationRequest {
        
        private OrderInfoType orderField;
        
        private CorporateGovernmentInfo corpgovinfoField;
        
        private string activationzipcodeField;
        
        private byte handsetcountField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ValidationRequest class constructor
        /// </summary>
        public ValidationRequest() {
            this.corpgovinfoField = new CorporateGovernmentInfo();
            this.orderField = new OrderInfoType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public OrderInfoType order {
            get {
                return this.orderField;
            }
            set {
                this.orderField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-info", Order=1)]
        public CorporateGovernmentInfo corpgovinfo {
            get {
                return this.corpgovinfoField;
            }
            set {
                this.corpgovinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-zip-code", Order=2)]
        public string activationzipcode {
            get {
                return this.activationzipcodeField;
            }
            set {
                this.activationzipcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("handset-count", Order=3)]
        public byte handsetcount {
            get {
                return this.handsetcountField;
            }
            set {
                this.handsetcountField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ValidationRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ValidationRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ValidationRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ValidationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ValidationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ValidationRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ValidationRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ValidationRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ValidationRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ValidationRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ValidationRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ValidationRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ValidationRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ValidationRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ValidationRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ValidationRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ValidationRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ValidationRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doValidationResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ValidationResponse {
        
        private string nextelorderidField;
        
        private bool validationresultField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("nextel-order-id", Order=0)]
        public string nextelorderid {
            get {
                return this.nextelorderidField;
            }
            set {
                this.nextelorderidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("validation-result", Order=1)]
        public bool validationresult {
            get {
                return this.validationresultField;
            }
            set {
                this.validationresultField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ValidationResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ValidationResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ValidationResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ValidationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ValidationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ValidationResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ValidationResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ValidationResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ValidationResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ValidationResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ValidationResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ValidationResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ValidationResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ValidationResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ValidationResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ValidationResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ValidationResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ValidationResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getBillSummary", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class BillSummaryRequest {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType6> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// BillSummaryRequest class constructor
        /// </summary>
        public BillSummaryRequest() {
            this.itemsElementNameField = new List<ItemsChoiceType6>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("activation-zip-code", typeof(string), IsNullable=true, Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("order-type", typeof(System.Nullable<OrderType>), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("plan", typeof(BillSummaryPlan), IsNullable=true, Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("second-bill", typeof(bool), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType6> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BillSummaryRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BillSummaryRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BillSummaryRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BillSummaryRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BillSummaryRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(BillSummaryRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BillSummaryRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BillSummaryRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BillSummaryRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BillSummaryRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BillSummaryRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BillSummaryRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BillSummaryRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(BillSummaryRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BillSummaryRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BillSummaryRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BillSummaryRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BillSummaryRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class BillSummaryPlan {
        
        private string codeField;
        
        private List<Feature> featureField;
        
        private string subscribercountField;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// BillSummaryPlan class constructor
        /// </summary>
        public BillSummaryPlan() {
            this.featureField = new List<Feature>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("feature", Order=1)]
        public List<Feature> feature {
            get {
                return this.featureField;
            }
            set {
                this.featureField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-count", DataType="positiveInteger", Order=2)]
        public string subscribercount {
            get {
                return this.subscribercountField;
            }
            set {
                this.subscribercountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BillSummaryPlan));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BillSummaryPlan object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BillSummaryPlan object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BillSummaryPlan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BillSummaryPlan obj, out System.Exception exception) {
            exception = null;
            obj = default(BillSummaryPlan);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BillSummaryPlan obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BillSummaryPlan Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BillSummaryPlan)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BillSummaryPlan object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BillSummaryPlan object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BillSummaryPlan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BillSummaryPlan obj, out System.Exception exception) {
            exception = null;
            obj = default(BillSummaryPlan);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BillSummaryPlan obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BillSummaryPlan obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BillSummaryPlan LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BillSummaryPlan LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType6 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-number")]
        accountnumber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activation-zip-code")]
        activationzipcode,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("order-type")]
        ordertype,
        
        /// <remarks/>
        plan,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reference-ptn")]
        referenceptn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("second-bill")]
        secondbill,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getBillSummaryResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class BillSummaryResponse {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType7> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// BillSummaryResponse class constructor
        /// </summary>
        public BillSummaryResponse() {
            this.itemsElementNameField = new List<ItemsChoiceType7>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bill-estimate", typeof(BillEstimateData), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("total-activation-fee", typeof(decimal), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("total-feature-charges", typeof(decimal), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("total-monthly-charges", typeof(decimal), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("total-price-plan-charges", typeof(decimal), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType7> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BillSummaryResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BillSummaryResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BillSummaryResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BillSummaryResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BillSummaryResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(BillSummaryResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BillSummaryResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BillSummaryResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BillSummaryResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BillSummaryResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BillSummaryResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BillSummaryResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BillSummaryResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(BillSummaryResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BillSummaryResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BillSummaryResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BillSummaryResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BillSummaryResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class BillEstimateData {
        
        private decimal totalaccountchargesField;
        
        private decimal totalaccountpaymentsField;
        
        private bool totalaccountpaymentsFieldSpecified;
        
        private decimal totalaccountadjustmentsField;
        
        private bool totalaccountadjustmentsFieldSpecified;
        
        private decimal totalaccountusagechangesField;
        
        private bool totalaccountusagechangesFieldSpecified;
        
        private decimal lastmonthbilltotalField;
        
        private bool lastmonthbilltotalFieldSpecified;
        
        private decimal nextmonthbilltotalField;
        
        private string billstartdateField;
        
        private string billenddateField;
        
        private List<SubscriberBillListSubscriberbillinfo> subscriberbilllistField;
        
        private AccountBillList accountbilllistField;
        
        private BillType typeField;
        
        private bool typeFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// BillEstimateData class constructor
        /// </summary>
        public BillEstimateData() {
            this.accountbilllistField = new AccountBillList();
            this.subscriberbilllistField = new List<SubscriberBillListSubscriberbillinfo>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("total-account-charges", Order=0)]
        public decimal totalaccountcharges {
            get {
                return this.totalaccountchargesField;
            }
            set {
                this.totalaccountchargesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("total-account-payments", Order=1)]
        public decimal totalaccountpayments {
            get {
                return this.totalaccountpaymentsField;
            }
            set {
                this.totalaccountpaymentsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool totalaccountpaymentsSpecified {
            get {
                return this.totalaccountpaymentsFieldSpecified;
            }
            set {
                this.totalaccountpaymentsFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("total-account-adjustments", Order=2)]
        public decimal totalaccountadjustments {
            get {
                return this.totalaccountadjustmentsField;
            }
            set {
                this.totalaccountadjustmentsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool totalaccountadjustmentsSpecified {
            get {
                return this.totalaccountadjustmentsFieldSpecified;
            }
            set {
                this.totalaccountadjustmentsFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("total-account-usage-changes", Order=3)]
        public decimal totalaccountusagechanges {
            get {
                return this.totalaccountusagechangesField;
            }
            set {
                this.totalaccountusagechangesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool totalaccountusagechangesSpecified {
            get {
                return this.totalaccountusagechangesFieldSpecified;
            }
            set {
                this.totalaccountusagechangesFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("last-month-bill-total", Order=4)]
        public decimal lastmonthbilltotal {
            get {
                return this.lastmonthbilltotalField;
            }
            set {
                this.lastmonthbilltotalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool lastmonthbilltotalSpecified {
            get {
                return this.lastmonthbilltotalFieldSpecified;
            }
            set {
                this.lastmonthbilltotalFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("next-month-bill-total", Order=5)]
        public decimal nextmonthbilltotal {
            get {
                return this.nextmonthbilltotalField;
            }
            set {
                this.nextmonthbilltotalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bill-start-date", Order=6)]
        public string billstartdate {
            get {
                return this.billstartdateField;
            }
            set {
                this.billstartdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("bill-end-date", Order=7)]
        public string billenddate {
            get {
                return this.billenddateField;
            }
            set {
                this.billenddateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("subscriber-bill-list", Order=8)]
        [System.Xml.Serialization.XmlArrayItemAttribute("subscriber-bill-info", IsNullable=false)]
        public List<SubscriberBillListSubscriberbillinfo> subscriberbilllist {
            get {
                return this.subscriberbilllistField;
            }
            set {
                this.subscriberbilllistField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-bill-list", Order=9)]
        public AccountBillList accountbilllist {
            get {
                return this.accountbilllistField;
            }
            set {
                this.accountbilllistField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public BillType type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(BillEstimateData));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current BillEstimateData object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an BillEstimateData object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output BillEstimateData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out BillEstimateData obj, out System.Exception exception) {
            exception = null;
            obj = default(BillEstimateData);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out BillEstimateData obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static BillEstimateData Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((BillEstimateData)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current BillEstimateData object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an BillEstimateData object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output BillEstimateData object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out BillEstimateData obj, out System.Exception exception) {
            exception = null;
            obj = default(BillEstimateData);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out BillEstimateData obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out BillEstimateData obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static BillEstimateData LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static BillEstimateData LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class SubscriberBillListSubscriberbillinfo {
        
        private string referenceptnField;
        
        private string subscribernoField;
        
        private List<SubscriberAccountCharge> subscriberchargelistField;
        
        private List<SubscriberAccountAdjustment> subscriberadjustmentlistField;
        
        private List<SubscriberUsageChargeListSubscriberusagecharge> subscriberusagechargelistField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SubscriberBillListSubscriberbillinfo class constructor
        /// </summary>
        public SubscriberBillListSubscriberbillinfo() {
            this.subscriberusagechargelistField = new List<SubscriberUsageChargeListSubscriberusagecharge>();
            this.subscriberadjustmentlistField = new List<SubscriberAccountAdjustment>();
            this.subscriberchargelistField = new List<SubscriberAccountCharge>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", Order=0)]
        public string referenceptn {
            get {
                return this.referenceptnField;
            }
            set {
                this.referenceptnField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("subscriber-no", Order=1)]
        public string subscriberno {
            get {
                return this.subscribernoField;
            }
            set {
                this.subscribernoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("subscriber-charge-list", Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("subscriber-charge", IsNullable=false)]
        public List<SubscriberAccountCharge> subscriberchargelist {
            get {
                return this.subscriberchargelistField;
            }
            set {
                this.subscriberchargelistField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("subscriber-adjustment-list", Order=3)]
        [System.Xml.Serialization.XmlArrayItemAttribute("subscriber-adjustment", IsNullable=false)]
        public List<SubscriberAccountAdjustment> subscriberadjustmentlist {
            get {
                return this.subscriberadjustmentlistField;
            }
            set {
                this.subscriberadjustmentlistField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("subscriber-usage-charge-list", Order=4)]
        [System.Xml.Serialization.XmlArrayItemAttribute("subscriber-usage-charge", IsNullable=false)]
        public List<SubscriberUsageChargeListSubscriberusagecharge> subscriberusagechargelist {
            get {
                return this.subscriberusagechargelistField;
            }
            set {
                this.subscriberusagechargelistField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubscriberBillListSubscriberbillinfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubscriberBillListSubscriberbillinfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubscriberBillListSubscriberbillinfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubscriberBillListSubscriberbillinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubscriberBillListSubscriberbillinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberBillListSubscriberbillinfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubscriberBillListSubscriberbillinfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubscriberBillListSubscriberbillinfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubscriberBillListSubscriberbillinfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubscriberBillListSubscriberbillinfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubscriberBillListSubscriberbillinfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubscriberBillListSubscriberbillinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SubscriberBillListSubscriberbillinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberBillListSubscriberbillinfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberBillListSubscriberbillinfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberBillListSubscriberbillinfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubscriberBillListSubscriberbillinfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SubscriberBillListSubscriberbillinfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class SubscriberAccountCharge {
        
        private string soccodeField;
        
        private string descriptionField;
        
        private decimal amountField;
        
        private decimal taxField;
        
        private decimal totalField;
        
        private string fromdateField;
        
        private string todateField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("soc-code", Order=0)]
        public string soccode {
            get {
                return this.soccodeField;
            }
            set {
                this.soccodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public decimal amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public decimal tax {
            get {
                return this.taxField;
            }
            set {
                this.taxField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=4)]
        public decimal total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("from-date", Order=5)]
        public string fromdate {
            get {
                return this.fromdateField;
            }
            set {
                this.fromdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("to-date", Order=6)]
        public string todate {
            get {
                return this.todateField;
            }
            set {
                this.todateField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubscriberAccountCharge));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubscriberAccountCharge object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubscriberAccountCharge object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubscriberAccountCharge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubscriberAccountCharge obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberAccountCharge);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubscriberAccountCharge obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubscriberAccountCharge Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubscriberAccountCharge)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubscriberAccountCharge object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubscriberAccountCharge object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubscriberAccountCharge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SubscriberAccountCharge obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberAccountCharge);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberAccountCharge obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberAccountCharge obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubscriberAccountCharge LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SubscriberAccountCharge LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class SubscriberAccountAdjustment {
        
        private string adjustmentreasonField;
        
        private decimal amountField;
        
        private decimal taxField;
        
        private decimal totalField;
        
        private string fromdateField;
        
        private string todateField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("adjustment-reason", Order=0)]
        public string adjustmentreason {
            get {
                return this.adjustmentreasonField;
            }
            set {
                this.adjustmentreasonField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public decimal amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public decimal tax {
            get {
                return this.taxField;
            }
            set {
                this.taxField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public decimal total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("from-date", Order=4)]
        public string fromdate {
            get {
                return this.fromdateField;
            }
            set {
                this.fromdateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("to-date", Order=5)]
        public string todate {
            get {
                return this.todateField;
            }
            set {
                this.todateField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubscriberAccountAdjustment));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubscriberAccountAdjustment object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubscriberAccountAdjustment object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubscriberAccountAdjustment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubscriberAccountAdjustment obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberAccountAdjustment);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubscriberAccountAdjustment obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubscriberAccountAdjustment Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubscriberAccountAdjustment)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubscriberAccountAdjustment object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubscriberAccountAdjustment object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubscriberAccountAdjustment object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SubscriberAccountAdjustment obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberAccountAdjustment);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberAccountAdjustment obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberAccountAdjustment obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubscriberAccountAdjustment LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SubscriberAccountAdjustment LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class SubscriberUsageChargeListSubscriberusagecharge {
        
        private decimal usagechargeField;
        
        private decimal taxField;
        
        private decimal totalField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("usage-charge", Order=0)]
        public decimal usagecharge {
            get {
                return this.usagechargeField;
            }
            set {
                this.usagechargeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public decimal tax {
            get {
                return this.taxField;
            }
            set {
                this.taxField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public decimal total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SubscriberUsageChargeListSubscriberusagecharge));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SubscriberUsageChargeListSubscriberusagecharge object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SubscriberUsageChargeListSubscriberusagecharge object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SubscriberUsageChargeListSubscriberusagecharge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SubscriberUsageChargeListSubscriberusagecharge obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberUsageChargeListSubscriberusagecharge);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SubscriberUsageChargeListSubscriberusagecharge obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SubscriberUsageChargeListSubscriberusagecharge Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SubscriberUsageChargeListSubscriberusagecharge)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SubscriberUsageChargeListSubscriberusagecharge object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SubscriberUsageChargeListSubscriberusagecharge object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SubscriberUsageChargeListSubscriberusagecharge object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SubscriberUsageChargeListSubscriberusagecharge obj, out System.Exception exception) {
            exception = null;
            obj = default(SubscriberUsageChargeListSubscriberusagecharge);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberUsageChargeListSubscriberusagecharge obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SubscriberUsageChargeListSubscriberusagecharge obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SubscriberUsageChargeListSubscriberusagecharge LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SubscriberUsageChargeListSubscriberusagecharge LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class AccountBillList {
        
        private List<SubscriberAccountCharge> accountchargelistField;
        
        private List<SubscriberAccountAdjustment> accountadjustmentlistField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AccountBillList class constructor
        /// </summary>
        public AccountBillList() {
            this.accountadjustmentlistField = new List<SubscriberAccountAdjustment>();
            this.accountchargelistField = new List<SubscriberAccountCharge>();
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("account-charge-list", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("account-charge", IsNullable=false)]
        public List<SubscriberAccountCharge> accountchargelist {
            get {
                return this.accountchargelistField;
            }
            set {
                this.accountchargelistField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("account-adjustment-list", Order=1)]
        [System.Xml.Serialization.XmlArrayItemAttribute("account-adjustment", IsNullable=false)]
        public List<SubscriberAccountAdjustment> accountadjustmentlist {
            get {
                return this.accountadjustmentlistField;
            }
            set {
                this.accountadjustmentlistField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AccountBillList));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AccountBillList object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AccountBillList object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AccountBillList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AccountBillList obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountBillList);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AccountBillList obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AccountBillList Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AccountBillList)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AccountBillList object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AccountBillList object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AccountBillList object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AccountBillList obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountBillList);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AccountBillList obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AccountBillList obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AccountBillList LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AccountBillList LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum BillType {
        
        /// <remarks/>
        FIRST,
        
        /// <remarks/>
        SECOND,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType7 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bill-estimate")]
        billestimate,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("total-activation-fee")]
        totalactivationfee,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("total-feature-charges")]
        totalfeaturecharges,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("total-monthly-charges")]
        totalmonthlycharges,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("total-price-plan-charges")]
        totalpriceplancharges,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getCorporateDiscount", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class CorporateDiscountRequest {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType8> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CorporateDiscountRequest class constructor
        /// </summary>
        public CorporateDiscountRequest() {
            this.itemsElementNameField = new List<ItemsChoiceType8>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("company-id", typeof(string), DataType="positiveInteger", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("employee-proof", typeof(bool), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("master-company-name", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType8> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CorporateDiscountRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CorporateDiscountRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CorporateDiscountRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CorporateDiscountRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CorporateDiscountRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateDiscountRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CorporateDiscountRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CorporateDiscountRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CorporateDiscountRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CorporateDiscountRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CorporateDiscountRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CorporateDiscountRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CorporateDiscountRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateDiscountRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CorporateDiscountRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CorporateDiscountRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CorporateDiscountRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CorporateDiscountRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType8 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-number")]
        accountnumber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("company-id")]
        companyid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("corp-gov-id")]
        corpgovid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("employee-proof")]
        employeeproof,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("master-company-name")]
        mastercompanyname,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reference-ptn")]
        referenceptn,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getCorporateDiscountResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class CorporateDiscountResponse {
        
        private List<object> itemsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CorporateDiscountResponse class constructor
        /// </summary>
        public CorporateDiscountResponse() {
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-hierarchy", typeof(AccountHierarchy), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("company-info", typeof(CompanyInfo), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("corporate-discount-info", typeof(CorporateDiscountInfo), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("corporate-hierarchy", typeof(CorporateHierarchy), Order=0)]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CorporateDiscountResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CorporateDiscountResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CorporateDiscountResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CorporateDiscountResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CorporateDiscountResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateDiscountResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CorporateDiscountResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CorporateDiscountResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CorporateDiscountResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CorporateDiscountResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CorporateDiscountResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CorporateDiscountResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CorporateDiscountResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateDiscountResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CorporateDiscountResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CorporateDiscountResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CorporateDiscountResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CorporateDiscountResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class AccountHierarchy {
        
        private List<Node> accountnodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// AccountHierarchy class constructor
        /// </summary>
        public AccountHierarchy() {
            this.accountnodeField = new List<Node>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-node", Order=0)]
        public List<Node> accountnode {
            get {
                return this.accountnodeField;
            }
            set {
                this.accountnodeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(AccountHierarchy));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current AccountHierarchy object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an AccountHierarchy object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output AccountHierarchy object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out AccountHierarchy obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountHierarchy);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out AccountHierarchy obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static AccountHierarchy Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((AccountHierarchy)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current AccountHierarchy object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an AccountHierarchy object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output AccountHierarchy object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out AccountHierarchy obj, out System.Exception exception) {
            exception = null;
            obj = default(AccountHierarchy);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out AccountHierarchy obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out AccountHierarchy obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static AccountHierarchy LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static AccountHierarchy LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class Node {
        
        private string nodetypeField;
        
        private string nodenameField;
        
        private uint nodeidField;
        
        private uint parentnodeidField;
        
        private bool parentnodeidFieldSpecified;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("node-type", Order=0)]
        public string nodetype {
            get {
                return this.nodetypeField;
            }
            set {
                this.nodetypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("node-name", Order=1)]
        public string nodename {
            get {
                return this.nodenameField;
            }
            set {
                this.nodenameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("node-id", Order=2)]
        public uint nodeid {
            get {
                return this.nodeidField;
            }
            set {
                this.nodeidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("parent-node-id", Order=3)]
        public uint parentnodeid {
            get {
                return this.parentnodeidField;
            }
            set {
                this.parentnodeidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool parentnodeidSpecified {
            get {
                return this.parentnodeidFieldSpecified;
            }
            set {
                this.parentnodeidFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(Node));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current Node object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an Node object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output Node object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out Node obj, out System.Exception exception) {
            exception = null;
            obj = default(Node);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out Node obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static Node Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((Node)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current Node object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an Node object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output Node object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out Node obj, out System.Exception exception) {
            exception = null;
            obj = default(Node);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out Node obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out Node obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static Node LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static Node LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class CompanyInfo {
        
        private string mastercompanynameField;
        
        private string subcompanynameField;
        
        private string corpgovidField;
        
        private string companyidField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("master-company-name", Order=0)]
        public string mastercompanyname {
            get {
                return this.mastercompanynameField;
            }
            set {
                this.mastercompanynameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sub-company-name", Order=1)]
        public string subcompanyname {
            get {
                return this.subcompanynameField;
            }
            set {
                this.subcompanynameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-id", Order=2)]
        public string corpgovid {
            get {
                return this.corpgovidField;
            }
            set {
                this.corpgovidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("company-id", DataType="integer", Order=3)]
        public string companyid {
            get {
                return this.companyidField;
            }
            set {
                this.companyidField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CompanyInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CompanyInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CompanyInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CompanyInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CompanyInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(CompanyInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CompanyInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CompanyInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CompanyInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CompanyInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CompanyInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CompanyInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CompanyInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(CompanyInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CompanyInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CompanyInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CompanyInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CompanyInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class CorporateDiscountInfo {
        
        private string corpgovidField;
        
        private CustomerType customertypeField;
        
        private bool customertypeFieldSpecified;
        
        private string taxexemptidField;
        
        private YesNoType equipmentporeqField;
        
        private bool equipmentporeqFieldSpecified;
        
        private YesNoType serviceporeqField;
        
        private bool serviceporeqFieldSpecified;
        
        private YesNoType activationfeeField;
        
        private bool activationfeeFieldSpecified;
        
        private YesNoType upgradefeeField;
        
        private bool upgradefeeFieldSpecified;
        
        private YesNoType shippingfeeField;
        
        private bool shippingfeeFieldSpecified;
        
        private string handsetdiscountField;
        
        private string accessorydiscountField;
        
        private List<ServiceDiscountInfo> servicediscountlistField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CorporateDiscountInfo class constructor
        /// </summary>
        public CorporateDiscountInfo() {
            this.servicediscountlistField = new List<ServiceDiscountInfo>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-id", Order=0)]
        public string corpgovid {
            get {
                return this.corpgovidField;
            }
            set {
                this.corpgovidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("customer-type", Order=1)]
        public CustomerType customertype {
            get {
                return this.customertypeField;
            }
            set {
                this.customertypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customertypeSpecified {
            get {
                return this.customertypeFieldSpecified;
            }
            set {
                this.customertypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("tax-exempt-id", Order=2)]
        public string taxexemptid {
            get {
                return this.taxexemptidField;
            }
            set {
                this.taxexemptidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("equipment-po-req", Order=3)]
        public YesNoType equipmentporeq {
            get {
                return this.equipmentporeqField;
            }
            set {
                this.equipmentporeqField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool equipmentporeqSpecified {
            get {
                return this.equipmentporeqFieldSpecified;
            }
            set {
                this.equipmentporeqFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-po-req", Order=4)]
        public YesNoType serviceporeq {
            get {
                return this.serviceporeqField;
            }
            set {
                this.serviceporeqField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serviceporeqSpecified {
            get {
                return this.serviceporeqFieldSpecified;
            }
            set {
                this.serviceporeqFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-fee", Order=5)]
        public YesNoType activationfee {
            get {
                return this.activationfeeField;
            }
            set {
                this.activationfeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activationfeeSpecified {
            get {
                return this.activationfeeFieldSpecified;
            }
            set {
                this.activationfeeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("upgrade-fee", Order=6)]
        public YesNoType upgradefee {
            get {
                return this.upgradefeeField;
            }
            set {
                this.upgradefeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool upgradefeeSpecified {
            get {
                return this.upgradefeeFieldSpecified;
            }
            set {
                this.upgradefeeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("shipping-fee", Order=7)]
        public YesNoType shippingfee {
            get {
                return this.shippingfeeField;
            }
            set {
                this.shippingfeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool shippingfeeSpecified {
            get {
                return this.shippingfeeFieldSpecified;
            }
            set {
                this.shippingfeeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("handset-discount", Order=8)]
        public string handsetdiscount {
            get {
                return this.handsetdiscountField;
            }
            set {
                this.handsetdiscountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("accessory-discount", Order=9)]
        public string accessorydiscount {
            get {
                return this.accessorydiscountField;
            }
            set {
                this.accessorydiscountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("service-discount-list", Order=10)]
        [System.Xml.Serialization.XmlArrayItemAttribute("service-discount", IsNullable=false)]
        public List<ServiceDiscountInfo> servicediscountlist {
            get {
                return this.servicediscountlistField;
            }
            set {
                this.servicediscountlistField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CorporateDiscountInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CorporateDiscountInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CorporateDiscountInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CorporateDiscountInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CorporateDiscountInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateDiscountInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CorporateDiscountInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CorporateDiscountInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CorporateDiscountInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CorporateDiscountInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CorporateDiscountInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CorporateDiscountInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CorporateDiscountInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateDiscountInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CorporateDiscountInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CorporateDiscountInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CorporateDiscountInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CorporateDiscountInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class ServiceDiscountInfo {
        
        private string servicediscountcodeField;
        
        private string servicediscountdescField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("service-discount-code", Order=0)]
        public string servicediscountcode {
            get {
                return this.servicediscountcodeField;
            }
            set {
                this.servicediscountcodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-discount-desc", Order=1)]
        public string servicediscountdesc {
            get {
                return this.servicediscountdescField;
            }
            set {
                this.servicediscountdescField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ServiceDiscountInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ServiceDiscountInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ServiceDiscountInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ServiceDiscountInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ServiceDiscountInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceDiscountInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ServiceDiscountInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ServiceDiscountInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ServiceDiscountInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ServiceDiscountInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ServiceDiscountInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ServiceDiscountInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ServiceDiscountInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(ServiceDiscountInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ServiceDiscountInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ServiceDiscountInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ServiceDiscountInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ServiceDiscountInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class CorporateHierarchy {
        
        private List<CorporateHierarchyRoot> rootField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CorporateHierarchy class constructor
        /// </summary>
        public CorporateHierarchy() {
            this.rootField = new List<CorporateHierarchyRoot>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("root", Order=0)]
        public List<CorporateHierarchyRoot> root {
            get {
                return this.rootField;
            }
            set {
                this.rootField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CorporateHierarchy));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CorporateHierarchy object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CorporateHierarchy object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CorporateHierarchy object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CorporateHierarchy obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateHierarchy);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CorporateHierarchy obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CorporateHierarchy Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CorporateHierarchy)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CorporateHierarchy object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CorporateHierarchy object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CorporateHierarchy object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CorporateHierarchy obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateHierarchy);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CorporateHierarchy obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CorporateHierarchy obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CorporateHierarchy LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CorporateHierarchy LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class CorporateHierarchyRoot {
        
        private Node rootnodeField;
        
        private List<Node> subnodeField;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// CorporateHierarchyRoot class constructor
        /// </summary>
        public CorporateHierarchyRoot() {
            this.subnodeField = new List<Node>();
            this.rootnodeField = new Node();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("root-node", Order=0)]
        public Node rootnode {
            get {
                return this.rootnodeField;
            }
            set {
                this.rootnodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sub-node", Order=1)]
        public List<Node> subnode {
            get {
                return this.subnodeField;
            }
            set {
                this.subnodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(CorporateHierarchyRoot));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current CorporateHierarchyRoot object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an CorporateHierarchyRoot object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output CorporateHierarchyRoot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out CorporateHierarchyRoot obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateHierarchyRoot);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out CorporateHierarchyRoot obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static CorporateHierarchyRoot Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((CorporateHierarchyRoot)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current CorporateHierarchyRoot object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an CorporateHierarchyRoot object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output CorporateHierarchyRoot object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out CorporateHierarchyRoot obj, out System.Exception exception) {
            exception = null;
            obj = default(CorporateHierarchyRoot);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out CorporateHierarchyRoot obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out CorporateHierarchyRoot obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static CorporateHierarchyRoot LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static CorporateHierarchyRoot LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getNpaNxx", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class NpaNxxRequest {
        
        private string activationzipcodeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("activation-zip-code", Order=0)]
        public string activationzipcode {
            get {
                return this.activationzipcodeField;
            }
            set {
                this.activationzipcodeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(NpaNxxRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NpaNxxRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an NpaNxxRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output NpaNxxRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out NpaNxxRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(NpaNxxRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out NpaNxxRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static NpaNxxRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((NpaNxxRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current NpaNxxRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an NpaNxxRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NpaNxxRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out NpaNxxRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(NpaNxxRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out NpaNxxRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out NpaNxxRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static NpaNxxRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static NpaNxxRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getNpaNxxResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class NpaNxxResponse {
        
        private byte npanxxcountField;
        
        private bool npanxxcountFieldSpecified;
        
        private List<NpaNxxInfo> npanxxinfoField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// NpaNxxResponse class constructor
        /// </summary>
        public NpaNxxResponse() {
            this.npanxxinfoField = new List<NpaNxxInfo>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("npa-nxx-count", Order=0)]
        public byte npanxxcount {
            get {
                return this.npanxxcountField;
            }
            set {
                this.npanxxcountField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool npanxxcountSpecified {
            get {
                return this.npanxxcountFieldSpecified;
            }
            set {
                this.npanxxcountFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("npa-nxx-info", Order=1)]
        public List<NpaNxxInfo> npanxxinfo {
            get {
                return this.npanxxinfoField;
            }
            set {
                this.npanxxinfoField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(NpaNxxResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NpaNxxResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an NpaNxxResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output NpaNxxResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out NpaNxxResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(NpaNxxResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out NpaNxxResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static NpaNxxResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((NpaNxxResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current NpaNxxResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an NpaNxxResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NpaNxxResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out NpaNxxResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(NpaNxxResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out NpaNxxResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out NpaNxxResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static NpaNxxResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static NpaNxxResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class NpaNxxInfo {
        
        private string npanxxField;
        
        private string ratecenterField;
        
        private string nearestcityField;
        
        private string idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("npa-nxx", Order=0)]
        public string npanxx {
            get {
                return this.npanxxField;
            }
            set {
                this.npanxxField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("rate-center", Order=1)]
        public string ratecenter {
            get {
                return this.ratecenterField;
            }
            set {
                this.ratecenterField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("nearest-city", Order=2)]
        public string nearestcity {
            get {
                return this.nearestcityField;
            }
            set {
                this.nearestcityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute(DataType="nonNegativeInteger")]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(NpaNxxInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current NpaNxxInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an NpaNxxInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output NpaNxxInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out NpaNxxInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(NpaNxxInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out NpaNxxInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static NpaNxxInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((NpaNxxInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current NpaNxxInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an NpaNxxInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output NpaNxxInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out NpaNxxInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(NpaNxxInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out NpaNxxInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out NpaNxxInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static NpaNxxInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static NpaNxxInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getOptionsInfo", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class OptionsRequest {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType9> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// OptionsRequest class constructor
        /// </summary>
        public OptionsRequest() {
            this.itemsElementNameField = new List<ItemsChoiceType9>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("account-sub-type", typeof(AccountSubType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("account-type", typeof(AccountType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("credit-class", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("csa", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("customer-type", typeof(CustomerType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("hsn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("lts-rank", typeof(string), DataType="positiveInteger", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("mac-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("meid", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("model-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("num-subscribers", typeof(string), DataType="positiveInteger", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("order-type", typeof(OrderType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("plan-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("sales-channel", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("search", typeof(SearchType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("service-zip", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("submarket", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType9> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OptionsRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OptionsRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OptionsRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OptionsRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OptionsRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(OptionsRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OptionsRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OptionsRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OptionsRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OptionsRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OptionsRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OptionsRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OptionsRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(OptionsRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OptionsRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OptionsRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OptionsRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static OptionsRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class SearchType {
        
        private SearchFieldType fieldField;
        
        private string itemField;
        
        private ItemChoiceType11 itemElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SearchType class constructor
        /// </summary>
        public SearchType() {
            this.fieldField = new SearchFieldType();
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public SearchFieldType field {
            get {
                return this.fieldField;
            }
            set {
                this.fieldField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("hsn", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("mac-id", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("meid", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("model-id", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType11 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SearchType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SearchType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SearchType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SearchType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SearchType obj, out System.Exception exception) {
            exception = null;
            obj = default(SearchType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SearchType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SearchType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SearchType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SearchType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SearchType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SearchType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SearchType obj, out System.Exception exception) {
            exception = null;
            obj = default(SearchType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SearchType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SearchType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SearchType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SearchType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class SearchFieldType {
        
        private SearchFieldNameType fieldnameField;
        
        private string fieldvalueField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("field-name", Order=0)]
        public SearchFieldNameType fieldname {
            get {
                return this.fieldnameField;
            }
            set {
                this.fieldnameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("field-value", Order=1)]
        public string fieldvalue {
            get {
                return this.fieldvalueField;
            }
            set {
                this.fieldvalueField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SearchFieldType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SearchFieldType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SearchFieldType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SearchFieldType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SearchFieldType obj, out System.Exception exception) {
            exception = null;
            obj = default(SearchFieldType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SearchFieldType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SearchFieldType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SearchFieldType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SearchFieldType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SearchFieldType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SearchFieldType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SearchFieldType obj, out System.Exception exception) {
            exception = null;
            obj = default(SearchFieldType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SearchFieldType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SearchFieldType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SearchFieldType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SearchFieldType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public enum SearchFieldNameType {
        
        /// <remarks/>
        CODE,
        
        /// <remarks/>
        NAME,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType11 {
        
        /// <remarks/>
        hsn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mac-id")]
        macid,
        
        /// <remarks/>
        meid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("model-id")]
        modelid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType9 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-number")]
        accountnumber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-sub-type")]
        accountsubtype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-type")]
        accounttype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("corp-gov-id")]
        corpgovid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("credit-class")]
        creditclass,
        
        /// <remarks/>
        csa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("customer-type")]
        customertype,
        
        /// <remarks/>
        hsn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lts-rank")]
        ltsrank,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mac-id")]
        macid,
        
        /// <remarks/>
        meid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("model-id")]
        modelid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("num-subscribers")]
        numsubscribers,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("order-type")]
        ordertype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plan-id")]
        planid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reference-ptn")]
        referenceptn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sales-channel")]
        saleschannel,
        
        /// <remarks/>
        search,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("service-zip")]
        servicezip,
        
        /// <remarks/>
        submarket,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getOptionsInfoResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class OptionsResponse {
        
        private OptionsRequestInfo requestinfoField;
        
        private List<PricePlanOptionsType> planoptionsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// OptionsResponse class constructor
        /// </summary>
        public OptionsResponse() {
            this.planoptionsField = new List<PricePlanOptionsType>();
            this.requestinfoField = new OptionsRequestInfo();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("request-info", Order=0)]
        public OptionsRequestInfo requestinfo {
            get {
                return this.requestinfoField;
            }
            set {
                this.requestinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-options", Order=1)]
        public List<PricePlanOptionsType> planoptions {
            get {
                return this.planoptionsField;
            }
            set {
                this.planoptionsField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OptionsResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OptionsResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OptionsResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OptionsResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OptionsResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(OptionsResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OptionsResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OptionsResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OptionsResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OptionsResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OptionsResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OptionsResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OptionsResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(OptionsResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OptionsResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OptionsResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OptionsResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static OptionsResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class OptionsRequestInfo {
        
        private string requestidField;
        
        private string requesttimeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("request-id", Order=0)]
        public string requestid {
            get {
                return this.requestidField;
            }
            set {
                this.requestidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("request-time", Order=1)]
        public string requesttime {
            get {
                return this.requesttimeField;
            }
            set {
                this.requesttimeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OptionsRequestInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OptionsRequestInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OptionsRequestInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OptionsRequestInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OptionsRequestInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(OptionsRequestInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OptionsRequestInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OptionsRequestInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OptionsRequestInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OptionsRequestInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OptionsRequestInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OptionsRequestInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OptionsRequestInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(OptionsRequestInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OptionsRequestInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OptionsRequestInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OptionsRequestInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static OptionsRequestInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class PricePlanOptionsType {
        
        private string planidField;
        
        private List<AddOnOptionType> optionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PricePlanOptionsType class constructor
        /// </summary>
        public PricePlanOptionsType() {
            this.optionField = new List<AddOnOptionType>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-id", Order=0)]
        public string planid {
            get {
                return this.planidField;
            }
            set {
                this.planidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("option", Order=1)]
        public List<AddOnOptionType> option {
            get {
                return this.optionField;
            }
            set {
                this.optionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PricePlanOptionsType));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PricePlanOptionsType object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PricePlanOptionsType object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PricePlanOptionsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PricePlanOptionsType obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanOptionsType);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PricePlanOptionsType obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PricePlanOptionsType Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PricePlanOptionsType)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PricePlanOptionsType object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PricePlanOptionsType object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PricePlanOptionsType object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PricePlanOptionsType obj, out System.Exception exception) {
            exception = null;
            obj = default(PricePlanOptionsType);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanOptionsType obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PricePlanOptionsType obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PricePlanOptionsType LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PricePlanOptionsType LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getPortInInfo", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class PortRequest {
        
        private List<string> portinnumberField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PortRequest class constructor
        /// </summary>
        public PortRequest() {
            this.portinnumberField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("port-in-number", Order=0)]
        public List<string> portinnumber {
            get {
                return this.portinnumberField;
            }
            set {
                this.portinnumberField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PortRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PortRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PortRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PortRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PortRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(PortRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PortRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PortRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PortRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PortRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PortRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PortRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PortRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(PortRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PortRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PortRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PortRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PortRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getPortInInfoResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class PortResponse {
        
        private List<PortResponseInfo> portresponseinfoField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PortResponse class constructor
        /// </summary>
        public PortResponse() {
            this.portresponseinfoField = new List<PortResponseInfo>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("port-response-info", Order=0)]
        public List<PortResponseInfo> portresponseinfo {
            get {
                return this.portresponseinfoField;
            }
            set {
                this.portresponseinfoField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PortResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PortResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PortResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PortResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PortResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(PortResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PortResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PortResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PortResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PortResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PortResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PortResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PortResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(PortResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PortResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PortResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PortResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PortResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class PortResponseInfo {
        
        private string portinnumberField;
        
        private bool porteligibilityField;
        
        private string porteligibilitydetailsField;
        
        private string carrierField;
        
        private System.DateTime estimatedduedateField;
        
        private bool estimatedduedateFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("port-in-number", Order=0)]
        public string portinnumber {
            get {
                return this.portinnumberField;
            }
            set {
                this.portinnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("port-eligibility", Order=1)]
        public bool porteligibility {
            get {
                return this.porteligibilityField;
            }
            set {
                this.porteligibilityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("port-eligibility-details", Order=2)]
        public string porteligibilitydetails {
            get {
                return this.porteligibilitydetailsField;
            }
            set {
                this.porteligibilitydetailsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string carrier {
            get {
                return this.carrierField;
            }
            set {
                this.carrierField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("estimated-due-date", Order=4)]
        public System.DateTime estimatedduedate {
            get {
                return this.estimatedduedateField;
            }
            set {
                this.estimatedduedateField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool estimatedduedateSpecified {
            get {
                return this.estimatedduedateFieldSpecified;
            }
            set {
                this.estimatedduedateFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PortResponseInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PortResponseInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PortResponseInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PortResponseInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PortResponseInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PortResponseInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PortResponseInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PortResponseInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PortResponseInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PortResponseInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PortResponseInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PortResponseInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PortResponseInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PortResponseInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PortResponseInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PortResponseInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PortResponseInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PortResponseInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getPortInStatus", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class PortStatusRequest {
        
        private string portinnumberField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("port-in-number", Order=0)]
        public string portinnumber {
            get {
                return this.portinnumberField;
            }
            set {
                this.portinnumberField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PortStatusRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PortStatusRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PortStatusRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PortStatusRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PortStatusRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(PortStatusRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PortStatusRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PortStatusRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PortStatusRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PortStatusRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PortStatusRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PortStatusRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PortStatusRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(PortStatusRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PortStatusRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PortStatusRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PortStatusRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PortStatusRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getPortInStatusResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class PortStatusResponse {
        
        private string portinnumberField;
        
        private string portstatusmessageField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("port-in-number", Order=0)]
        public string portinnumber {
            get {
                return this.portinnumberField;
            }
            set {
                this.portinnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("port-status-message", Order=1)]
        public string portstatusmessage {
            get {
                return this.portstatusmessageField;
            }
            set {
                this.portstatusmessageField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PortStatusResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PortStatusResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PortStatusResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PortStatusResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PortStatusResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(PortStatusResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PortStatusResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PortStatusResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PortStatusResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PortStatusResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PortStatusResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PortStatusResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PortStatusResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(PortStatusResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PortStatusResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PortStatusResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PortStatusResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PortStatusResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getSecurityQuestion", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class SecurityQuestionRequest {
        
        private bool securityinfoindField;
        
        private CustomerType customertypeField;
        
        private bool customertypeFieldSpecified;
        
        private string corpgovidField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("security-info-ind", Order=0)]
        public bool securityinfoind {
            get {
                return this.securityinfoindField;
            }
            set {
                this.securityinfoindField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("customer-type", Order=1)]
        public CustomerType customertype {
            get {
                return this.customertypeField;
            }
            set {
                this.customertypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool customertypeSpecified {
            get {
                return this.customertypeFieldSpecified;
            }
            set {
                this.customertypeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-id", Order=2)]
        public string corpgovid {
            get {
                return this.corpgovidField;
            }
            set {
                this.corpgovidField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SecurityQuestionRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SecurityQuestionRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SecurityQuestionRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SecurityQuestionRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SecurityQuestionRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(SecurityQuestionRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SecurityQuestionRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SecurityQuestionRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SecurityQuestionRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SecurityQuestionRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SecurityQuestionRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SecurityQuestionRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SecurityQuestionRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(SecurityQuestionRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SecurityQuestionRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SecurityQuestionRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SecurityQuestionRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SecurityQuestionRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getSecurityQuestionResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class SecurityQuestionResponse {
        
        private List<SecurityQuestionInfo> securityquestionsField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// SecurityQuestionResponse class constructor
        /// </summary>
        public SecurityQuestionResponse() {
            this.securityquestionsField = new List<SecurityQuestionInfo>();
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("security-questions", Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("security-question-info", IsNullable=false)]
        public List<SecurityQuestionInfo> securityquestions {
            get {
                return this.securityquestionsField;
            }
            set {
                this.securityquestionsField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SecurityQuestionResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SecurityQuestionResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SecurityQuestionResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SecurityQuestionResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SecurityQuestionResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(SecurityQuestionResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SecurityQuestionResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SecurityQuestionResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SecurityQuestionResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SecurityQuestionResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SecurityQuestionResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SecurityQuestionResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SecurityQuestionResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(SecurityQuestionResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SecurityQuestionResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SecurityQuestionResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SecurityQuestionResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SecurityQuestionResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class SecurityQuestionInfo {
        
        private string questioncodeField;
        
        private string questionField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("question-code", Order=0)]
        public string questioncode {
            get {
                return this.questioncodeField;
            }
            set {
                this.questioncodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string question {
            get {
                return this.questionField;
            }
            set {
                this.questionField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(SecurityQuestionInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current SecurityQuestionInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an SecurityQuestionInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output SecurityQuestionInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out SecurityQuestionInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(SecurityQuestionInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out SecurityQuestionInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static SecurityQuestionInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((SecurityQuestionInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current SecurityQuestionInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an SecurityQuestionInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output SecurityQuestionInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out SecurityQuestionInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(SecurityQuestionInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out SecurityQuestionInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out SecurityQuestionInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static SecurityQuestionInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static SecurityQuestionInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("queryPlansDetailInfo", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class PlansRequest {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType10> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PlansRequest class constructor
        /// </summary>
        public PlansRequest() {
            this.itemsElementNameField = new List<ItemsChoiceType10>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("account-sub-type", typeof(AccountSubType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("account-type", typeof(AccountType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("credit-class", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("csa", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("customer-type", typeof(CustomerType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("hca", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("hsn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("lts-rank", typeof(string), DataType="positiveInteger", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("mac-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("meid", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("model-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("num-subscribers", typeof(string), DataType="positiveInteger", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("order-type", typeof(OrderType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("plan-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("plan-type", typeof(PlanType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("promo-code", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("sales-channel", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("search", typeof(SearchType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("service-zip", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("submarket", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType10> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PlansRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PlansRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PlansRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PlansRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PlansRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(PlansRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PlansRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PlansRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PlansRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PlansRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PlansRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PlansRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PlansRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(PlansRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PlansRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PlansRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PlansRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PlansRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType10 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-number")]
        accountnumber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-sub-type")]
        accountsubtype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-type")]
        accounttype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("corp-gov-id")]
        corpgovid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("credit-class")]
        creditclass,
        
        /// <remarks/>
        csa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("customer-type")]
        customertype,
        
        /// <remarks/>
        hca,
        
        /// <remarks/>
        hsn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("lts-rank")]
        ltsrank,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mac-id")]
        macid,
        
        /// <remarks/>
        meid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("model-id")]
        modelid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("num-subscribers")]
        numsubscribers,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("order-type")]
        ordertype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plan-id")]
        planid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plan-type")]
        plantype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("promo-code")]
        promocode,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reference-ptn")]
        referenceptn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sales-channel")]
        saleschannel,
        
        /// <remarks/>
        search,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("service-zip")]
        servicezip,
        
        /// <remarks/>
        submarket,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("queryPlansDetailInfoResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class PlansResponse {
        
        private PlanRequestInfo requestinfoField;
        
        private List<PricePlanType> priceplanField;
        
        private bool promocodevalidField;
        
        private bool promocodevalidFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// PlansResponse class constructor
        /// </summary>
        public PlansResponse() {
            this.priceplanField = new List<PricePlanType>();
            this.requestinfoField = new PlanRequestInfo();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("request-info", Order=0)]
        public PlanRequestInfo requestinfo {
            get {
                return this.requestinfoField;
            }
            set {
                this.requestinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("price-plan", Order=1)]
        public List<PricePlanType> priceplan {
            get {
                return this.priceplanField;
            }
            set {
                this.priceplanField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("promo-code-valid", Order=2)]
        public bool promocodevalid {
            get {
                return this.promocodevalidField;
            }
            set {
                this.promocodevalidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool promocodevalidSpecified {
            get {
                return this.promocodevalidFieldSpecified;
            }
            set {
                this.promocodevalidFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PlansResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PlansResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PlansResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PlansResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PlansResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(PlansResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PlansResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PlansResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PlansResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PlansResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PlansResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PlansResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PlansResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(PlansResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PlansResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PlansResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PlansResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PlansResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    public partial class PlanRequestInfo {
        
        private string requestidField;
        
        private string requesttimeField;
        
        private string servicezipField;
        
        private string modelidField;
        
        private string numsubscribersField;
        
        private OrderType ordertypeField;
        
        private string submarketField;
        
        private string planidField;
        
        private string hcaField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("request-id", Order=0)]
        public string requestid {
            get {
                return this.requestidField;
            }
            set {
                this.requestidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("request-time", Order=1)]
        public string requesttime {
            get {
                return this.requesttimeField;
            }
            set {
                this.requesttimeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("service-zip", Order=2)]
        public string servicezip {
            get {
                return this.servicezipField;
            }
            set {
                this.servicezipField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("model-id", Order=3)]
        public string modelid {
            get {
                return this.modelidField;
            }
            set {
                this.modelidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("num-subscribers", DataType="positiveInteger", Order=4)]
        public string numsubscribers {
            get {
                return this.numsubscribersField;
            }
            set {
                this.numsubscribersField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-type", Order=5)]
        public OrderType ordertype {
            get {
                return this.ordertypeField;
            }
            set {
                this.ordertypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string submarket {
            get {
                return this.submarketField;
            }
            set {
                this.submarketField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("plan-id", Order=7)]
        public string planid {
            get {
                return this.planidField;
            }
            set {
                this.planidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string hca {
            get {
                return this.hcaField;
            }
            set {
                this.hcaField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(PlanRequestInfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current PlanRequestInfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an PlanRequestInfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output PlanRequestInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out PlanRequestInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PlanRequestInfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out PlanRequestInfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static PlanRequestInfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((PlanRequestInfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current PlanRequestInfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an PlanRequestInfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output PlanRequestInfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out PlanRequestInfo obj, out System.Exception exception) {
            exception = null;
            obj = default(PlanRequestInfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out PlanRequestInfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out PlanRequestInfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static PlanRequestInfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static PlanRequestInfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doActivateReservedDevice", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ActivateReservedDeviceRequest {
        
        private string itemField;
        
        private ItemChoiceType12 itemElementNameField;
        
        private List<string> ptnlistField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivateReservedDeviceRequest class constructor
        /// </summary>
        public ActivateReservedDeviceRequest() {
            this.ptnlistField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("order-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("sprint-order-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType12 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlArrayAttribute("ptn-list", Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("reference-ptn", IsNullable=false)]
        public List<string> ptnlist {
            get {
                return this.ptnlistField;
            }
            set {
                this.ptnlistField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivateReservedDeviceRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivateReservedDeviceRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivateReservedDeviceRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivateReservedDeviceRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivateReservedDeviceRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateReservedDeviceRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivateReservedDeviceRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivateReservedDeviceRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivateReservedDeviceRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivateReservedDeviceRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivateReservedDeviceRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivateReservedDeviceRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivateReservedDeviceRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateReservedDeviceRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivateReservedDeviceRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivateReservedDeviceRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivateReservedDeviceRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivateReservedDeviceRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType12 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("order-id")]
        orderid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sprint-order-id")]
        sprintorderid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doActivateReservedDeviceResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ActivateReservedDeviceResponse {
        
        private List<object> serviceField;
        
        private decimal activationfeeField;
        
        private bool activationfeeFieldSpecified;
        
        private string accountnumberField;
        
        private string commentField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivateReservedDeviceResponse class constructor
        /// </summary>
        public ActivateReservedDeviceResponse() {
            this.serviceField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlArrayAttribute(Order=0)]
        [System.Xml.Serialization.XmlArrayItemAttribute("accessory", typeof(ActivateReservedDeviceResponseAccessory), IsNullable=false)]
        [System.Xml.Serialization.XmlArrayItemAttribute("plan", typeof(ActivateReservedDeviceResponsePlan), IsNullable=false)]
        public List<object> service {
            get {
                return this.serviceField;
            }
            set {
                this.serviceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activation-fee", Order=1)]
        public decimal activationfee {
            get {
                return this.activationfeeField;
            }
            set {
                this.activationfeeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool activationfeeSpecified {
            get {
                return this.activationfeeFieldSpecified;
            }
            set {
                this.activationfeeFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", Order=2)]
        public string accountnumber {
            get {
                return this.accountnumberField;
            }
            set {
                this.accountnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivateReservedDeviceResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivateReservedDeviceResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivateReservedDeviceResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivateReservedDeviceResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivateReservedDeviceResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateReservedDeviceResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivateReservedDeviceResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivateReservedDeviceResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivateReservedDeviceResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivateReservedDeviceResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivateReservedDeviceResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivateReservedDeviceResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivateReservedDeviceResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateReservedDeviceResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivateReservedDeviceResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivateReservedDeviceResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivateReservedDeviceResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivateReservedDeviceResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ActivateReservedDeviceResponseAccessory {
        
        private string accessoryorderkeyField;
        
        private ulong idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("accessory-order-key", Order=0)]
        public string accessoryorderkey {
            get {
                return this.accessoryorderkeyField;
            }
            set {
                this.accessoryorderkeyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ulong id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivateReservedDeviceResponseAccessory));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivateReservedDeviceResponseAccessory object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivateReservedDeviceResponseAccessory object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivateReservedDeviceResponseAccessory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivateReservedDeviceResponseAccessory obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateReservedDeviceResponseAccessory);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivateReservedDeviceResponseAccessory obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivateReservedDeviceResponseAccessory Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivateReservedDeviceResponseAccessory)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivateReservedDeviceResponseAccessory object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivateReservedDeviceResponseAccessory object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivateReservedDeviceResponseAccessory object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivateReservedDeviceResponseAccessory obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateReservedDeviceResponseAccessory);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivateReservedDeviceResponseAccessory obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivateReservedDeviceResponseAccessory obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivateReservedDeviceResponseAccessory LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivateReservedDeviceResponseAccessory LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ActivateReservedDeviceResponsePlan {
        
        private List<PhoneResponse> phoneField;
        
        private string resultdetailsField;
        
        private ulong idField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivateReservedDeviceResponsePlan class constructor
        /// </summary>
        public ActivateReservedDeviceResponsePlan() {
            this.phoneField = new List<PhoneResponse>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone", Order=0)]
        public List<PhoneResponse> phone {
            get {
                return this.phoneField;
            }
            set {
                this.phoneField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("result-details", Order=1)]
        public string resultdetails {
            get {
                return this.resultdetailsField;
            }
            set {
                this.resultdetailsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public ulong id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivateReservedDeviceResponsePlan));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivateReservedDeviceResponsePlan object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivateReservedDeviceResponsePlan object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivateReservedDeviceResponsePlan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivateReservedDeviceResponsePlan obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateReservedDeviceResponsePlan);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivateReservedDeviceResponsePlan obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivateReservedDeviceResponsePlan Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivateReservedDeviceResponsePlan)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivateReservedDeviceResponsePlan object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivateReservedDeviceResponsePlan object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivateReservedDeviceResponsePlan object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivateReservedDeviceResponsePlan obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateReservedDeviceResponsePlan);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivateReservedDeviceResponsePlan obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivateReservedDeviceResponsePlan obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivateReservedDeviceResponsePlan LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivateReservedDeviceResponsePlan LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getDeviceInfo", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class DeviceInfoRequest {
        
        private DeviceInfoRequestAccountinfo accountinfoField;
        
        private DeviceInfoRequestDeviceinfo deviceinfoField;
        
        private string saleschannelField;
        
        private DeviceInfoRequestPricinginfo pricinginfoField;
        
        private bool deviceattributesField;
        
        private bool deviceattributesFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DeviceInfoRequest class constructor
        /// </summary>
        public DeviceInfoRequest() {
            this.pricinginfoField = new DeviceInfoRequestPricinginfo();
            this.deviceinfoField = new DeviceInfoRequestDeviceinfo();
            this.accountinfoField = new DeviceInfoRequestAccountinfo();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-info", Order=0)]
        public DeviceInfoRequestAccountinfo accountinfo {
            get {
                return this.accountinfoField;
            }
            set {
                this.accountinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-info", Order=1)]
        public DeviceInfoRequestDeviceinfo deviceinfo {
            get {
                return this.deviceinfoField;
            }
            set {
                this.deviceinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("sales-channel", Order=2)]
        public string saleschannel {
            get {
                return this.saleschannelField;
            }
            set {
                this.saleschannelField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("pricing-info", Order=3)]
        public DeviceInfoRequestPricinginfo pricinginfo {
            get {
                return this.pricinginfoField;
            }
            set {
                this.pricinginfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-attributes", Order=4)]
        public bool deviceattributes {
            get {
                return this.deviceattributesField;
            }
            set {
                this.deviceattributesField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool deviceattributesSpecified {
            get {
                return this.deviceattributesFieldSpecified;
            }
            set {
                this.deviceattributesFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeviceInfoRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeviceInfoRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeviceInfoRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeviceInfoRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeviceInfoRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeviceInfoRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeviceInfoRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeviceInfoRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeviceInfoRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeviceInfoRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeviceInfoRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeviceInfoRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeviceInfoRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeviceInfoRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class DeviceInfoRequestAccountinfo {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType11> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DeviceInfoRequestAccountinfo class constructor
        /// </summary>
        public DeviceInfoRequestAccountinfo() {
            this.itemsElementNameField = new List<ItemsChoiceType11>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("account-sub-type", typeof(AccountSubType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("account-type", typeof(AccountType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("corp-gov-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("customer-type", typeof(CustomerType), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("subscriber-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType11> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeviceInfoRequestAccountinfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeviceInfoRequestAccountinfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeviceInfoRequestAccountinfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeviceInfoRequestAccountinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeviceInfoRequestAccountinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoRequestAccountinfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeviceInfoRequestAccountinfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeviceInfoRequestAccountinfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeviceInfoRequestAccountinfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeviceInfoRequestAccountinfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeviceInfoRequestAccountinfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeviceInfoRequestAccountinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeviceInfoRequestAccountinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoRequestAccountinfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoRequestAccountinfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoRequestAccountinfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeviceInfoRequestAccountinfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeviceInfoRequestAccountinfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType11 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-number")]
        accountnumber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-sub-type")]
        accountsubtype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-type")]
        accounttype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("corp-gov-id")]
        corpgovid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("customer-type")]
        customertype,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reference-ptn")]
        referenceptn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("subscriber-id")]
        subscriberid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class DeviceInfoRequestDeviceinfo {
        
        private List<string> itemsField;
        
        private List<ItemsChoiceType12> itemsElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DeviceInfoRequestDeviceinfo class constructor
        /// </summary>
        public DeviceInfoRequestDeviceinfo() {
            this.itemsElementNameField = new List<ItemsChoiceType12>();
            this.itemsField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("hsn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("meid", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("model-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<string> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType12> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeviceInfoRequestDeviceinfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeviceInfoRequestDeviceinfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeviceInfoRequestDeviceinfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeviceInfoRequestDeviceinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeviceInfoRequestDeviceinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoRequestDeviceinfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeviceInfoRequestDeviceinfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeviceInfoRequestDeviceinfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeviceInfoRequestDeviceinfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeviceInfoRequestDeviceinfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeviceInfoRequestDeviceinfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeviceInfoRequestDeviceinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeviceInfoRequestDeviceinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoRequestDeviceinfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoRequestDeviceinfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoRequestDeviceinfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeviceInfoRequestDeviceinfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeviceInfoRequestDeviceinfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType12 {
        
        /// <remarks/>
        hsn,
        
        /// <remarks/>
        meid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("model-id")]
        modelid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class DeviceInfoRequestPricinginfo {
        
        private List<object> itemsField;
        
        private List<ItemsChoiceType13> itemsElementNameField;
        
        private byte contracttermField;
        
        private bool contracttermFieldSpecified;
        
        private bool flatpricingField;
        
        private bool flatpricingFieldSpecified;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DeviceInfoRequestPricinginfo class constructor
        /// </summary>
        public DeviceInfoRequestPricinginfo() {
            this.itemsElementNameField = new List<ItemsChoiceType13>();
            this.itemsField = new List<object>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-swap", typeof(bool), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("new-activation", typeof(bool), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("service-area", typeof(DeviceInfoRequestPricinginfoServicearea), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<object> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType13> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("contract-term", Order=2)]
        public byte contractterm {
            get {
                return this.contracttermField;
            }
            set {
                this.contracttermField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool contracttermSpecified {
            get {
                return this.contracttermFieldSpecified;
            }
            set {
                this.contracttermFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("flat-pricing", Order=3)]
        public bool flatpricing {
            get {
                return this.flatpricingField;
            }
            set {
                this.flatpricingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool flatpricingSpecified {
            get {
                return this.flatpricingFieldSpecified;
            }
            set {
                this.flatpricingFieldSpecified = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeviceInfoRequestPricinginfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeviceInfoRequestPricinginfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeviceInfoRequestPricinginfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeviceInfoRequestPricinginfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeviceInfoRequestPricinginfo obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoRequestPricinginfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeviceInfoRequestPricinginfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeviceInfoRequestPricinginfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeviceInfoRequestPricinginfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeviceInfoRequestPricinginfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeviceInfoRequestPricinginfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeviceInfoRequestPricinginfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeviceInfoRequestPricinginfo obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoRequestPricinginfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoRequestPricinginfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoRequestPricinginfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeviceInfoRequestPricinginfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeviceInfoRequestPricinginfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class DeviceInfoRequestPricinginfoServicearea {
        
        private string itemField;
        
        private ItemChoiceType13 itemElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("csa", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("service-zip", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("submarket", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType13 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeviceInfoRequestPricinginfoServicearea));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeviceInfoRequestPricinginfoServicearea object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeviceInfoRequestPricinginfoServicearea object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeviceInfoRequestPricinginfoServicearea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeviceInfoRequestPricinginfoServicearea obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoRequestPricinginfoServicearea);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeviceInfoRequestPricinginfoServicearea obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeviceInfoRequestPricinginfoServicearea Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeviceInfoRequestPricinginfoServicearea)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeviceInfoRequestPricinginfoServicearea object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeviceInfoRequestPricinginfoServicearea object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeviceInfoRequestPricinginfoServicearea object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeviceInfoRequestPricinginfoServicearea obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoRequestPricinginfoServicearea);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoRequestPricinginfoServicearea obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoRequestPricinginfoServicearea obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeviceInfoRequestPricinginfoServicearea LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeviceInfoRequestPricinginfoServicearea LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType13 {
        
        /// <remarks/>
        csa,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("service-zip")]
        servicezip,
        
        /// <remarks/>
        submarket,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType13 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("device-swap")]
        deviceswap,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("new-activation")]
        newactivation,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("service-area")]
        servicearea,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("getDeviceInfoResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class DeviceInfoResponse {
        
        private List<DeviceInfoResponseDeviceinfo> deviceinfoField;
        
        private UpgradeData upgradeeligibilityField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DeviceInfoResponse class constructor
        /// </summary>
        public DeviceInfoResponse() {
            this.upgradeeligibilityField = new UpgradeData();
            this.deviceinfoField = new List<DeviceInfoResponseDeviceinfo>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-info", Order=0)]
        public List<DeviceInfoResponseDeviceinfo> deviceinfo {
            get {
                return this.deviceinfoField;
            }
            set {
                this.deviceinfoField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("upgrade-eligibility", Order=1)]
        public UpgradeData upgradeeligibility {
            get {
                return this.upgradeeligibilityField;
            }
            set {
                this.upgradeeligibilityField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeviceInfoResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeviceInfoResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeviceInfoResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeviceInfoResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeviceInfoResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeviceInfoResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeviceInfoResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeviceInfoResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeviceInfoResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeviceInfoResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeviceInfoResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeviceInfoResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeviceInfoResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeviceInfoResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class DeviceInfoResponseDeviceinfo {
        
        private string modelidField;
        
        private string itemField;
        
        private ItemChoiceType14 itemElementNameField;
        
        private string devicenameField;
        
        private List<DeviceInfoResponseDeviceinfoDevicepricing> devicepricingField;
        
        private DeviceInfoResponseDeviceinfoDeviceattributes deviceattributesField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// DeviceInfoResponseDeviceinfo class constructor
        /// </summary>
        public DeviceInfoResponseDeviceinfo() {
            this.deviceattributesField = new DeviceInfoResponseDeviceinfoDeviceattributes();
            this.devicepricingField = new List<DeviceInfoResponseDeviceinfoDevicepricing>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("model-id", Order=0)]
        public string modelid {
            get {
                return this.modelidField;
            }
            set {
                this.modelidField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("hsn", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlElementAttribute("meid", typeof(string), Order=1)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType14 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-name", Order=3)]
        public string devicename {
            get {
                return this.devicenameField;
            }
            set {
                this.devicenameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-pricing", Order=4)]
        public List<DeviceInfoResponseDeviceinfoDevicepricing> devicepricing {
            get {
                return this.devicepricingField;
            }
            set {
                this.devicepricingField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-attributes", Order=5)]
        public DeviceInfoResponseDeviceinfoDeviceattributes deviceattributes {
            get {
                return this.deviceattributesField;
            }
            set {
                this.deviceattributesField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeviceInfoResponseDeviceinfo));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeviceInfoResponseDeviceinfo object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeviceInfoResponseDeviceinfo object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeviceInfoResponseDeviceinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeviceInfoResponseDeviceinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoResponseDeviceinfo);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeviceInfoResponseDeviceinfo obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeviceInfoResponseDeviceinfo Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeviceInfoResponseDeviceinfo)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeviceInfoResponseDeviceinfo object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeviceInfoResponseDeviceinfo object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeviceInfoResponseDeviceinfo object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeviceInfoResponseDeviceinfo obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoResponseDeviceinfo);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoResponseDeviceinfo obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoResponseDeviceinfo obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeviceInfoResponseDeviceinfo LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeviceInfoResponseDeviceinfo LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType14 {
        
        /// <remarks/>
        hsn,
        
        /// <remarks/>
        meid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class DeviceInfoResponseDeviceinfoDevicepricing {
        
        private decimal modelpriceField;
        
        private string modelpricecodeField;
        
        private byte contracttermField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("model-price", Order=0)]
        public decimal modelprice {
            get {
                return this.modelpriceField;
            }
            set {
                this.modelpriceField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("model-price-code", Order=1)]
        public string modelpricecode {
            get {
                return this.modelpricecodeField;
            }
            set {
                this.modelpricecodeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("contract-term", Order=2)]
        public byte contractterm {
            get {
                return this.contracttermField;
            }
            set {
                this.contracttermField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeviceInfoResponseDeviceinfoDevicepricing));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeviceInfoResponseDeviceinfoDevicepricing object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeviceInfoResponseDeviceinfoDevicepricing object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeviceInfoResponseDeviceinfoDevicepricing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeviceInfoResponseDeviceinfoDevicepricing obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoResponseDeviceinfoDevicepricing);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeviceInfoResponseDeviceinfoDevicepricing obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeviceInfoResponseDeviceinfoDevicepricing Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeviceInfoResponseDeviceinfoDevicepricing)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeviceInfoResponseDeviceinfoDevicepricing object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeviceInfoResponseDeviceinfoDevicepricing object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeviceInfoResponseDeviceinfoDevicepricing object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeviceInfoResponseDeviceinfoDevicepricing obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoResponseDeviceinfoDevicepricing);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoResponseDeviceinfoDevicepricing obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoResponseDeviceinfoDevicepricing obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeviceInfoResponseDeviceinfoDevicepricing LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeviceInfoResponseDeviceinfoDevicepricing LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class DeviceInfoResponseDeviceinfoDeviceattributes {
        
        private string manufacturerField;
        
        private string upcnumberField;
        
        private string technologyField;
        
        private string devicecategoryField;
        
        private string phonecapabilityField;
        
        private YesNoType mmscapableField;
        
        private bool mmscapableFieldSpecified;
        
        private string networkField;
        
        private string devicedescField;
        
        private string colorField;
        
        private string dimensionsField;
        
        private string screensizeField;
        
        private decimal weightField;
        
        private bool weightFieldSpecified;
        
        private string batterytypeField;
        
        private string batterystrengthField;
        
        private string talktimeField;
        
        private string standbytimeField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string manufacturer {
            get {
                return this.manufacturerField;
            }
            set {
                this.manufacturerField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("upc-number", Order=1)]
        public string upcnumber {
            get {
                return this.upcnumberField;
            }
            set {
                this.upcnumberField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string technology {
            get {
                return this.technologyField;
            }
            set {
                this.technologyField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-category", Order=3)]
        public string devicecategory {
            get {
                return this.devicecategoryField;
            }
            set {
                this.devicecategoryField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("phone-capability", Order=4)]
        public string phonecapability {
            get {
                return this.phonecapabilityField;
            }
            set {
                this.phonecapabilityField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("mms-capable", Order=5)]
        public YesNoType mmscapable {
            get {
                return this.mmscapableField;
            }
            set {
                this.mmscapableField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool mmscapableSpecified {
            get {
                return this.mmscapableFieldSpecified;
            }
            set {
                this.mmscapableFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=6)]
        public string network {
            get {
                return this.networkField;
            }
            set {
                this.networkField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("device-desc", Order=7)]
        public string devicedesc {
            get {
                return this.devicedescField;
            }
            set {
                this.devicedescField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=8)]
        public string color {
            get {
                return this.colorField;
            }
            set {
                this.colorField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=9)]
        public string dimensions {
            get {
                return this.dimensionsField;
            }
            set {
                this.dimensionsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("screen-size", Order=10)]
        public string screensize {
            get {
                return this.screensizeField;
            }
            set {
                this.screensizeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=11)]
        public decimal weight {
            get {
                return this.weightField;
            }
            set {
                this.weightField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool weightSpecified {
            get {
                return this.weightFieldSpecified;
            }
            set {
                this.weightFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("battery-type", Order=12)]
        public string batterytype {
            get {
                return this.batterytypeField;
            }
            set {
                this.batterytypeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("battery-strength", Order=13)]
        public string batterystrength {
            get {
                return this.batterystrengthField;
            }
            set {
                this.batterystrengthField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("talk-time", Order=14)]
        public string talktime {
            get {
                return this.talktimeField;
            }
            set {
                this.talktimeField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("standby-time", Order=15)]
        public string standbytime {
            get {
                return this.standbytimeField;
            }
            set {
                this.standbytimeField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(DeviceInfoResponseDeviceinfoDeviceattributes));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current DeviceInfoResponseDeviceinfoDeviceattributes object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an DeviceInfoResponseDeviceinfoDeviceattributes object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output DeviceInfoResponseDeviceinfoDeviceattributes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out DeviceInfoResponseDeviceinfoDeviceattributes obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoResponseDeviceinfoDeviceattributes);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out DeviceInfoResponseDeviceinfoDeviceattributes obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static DeviceInfoResponseDeviceinfoDeviceattributes Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((DeviceInfoResponseDeviceinfoDeviceattributes)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current DeviceInfoResponseDeviceinfoDeviceattributes object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an DeviceInfoResponseDeviceinfoDeviceattributes object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output DeviceInfoResponseDeviceinfoDeviceattributes object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out DeviceInfoResponseDeviceinfoDeviceattributes obj, out System.Exception exception) {
            exception = null;
            obj = default(DeviceInfoResponseDeviceinfoDeviceattributes);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoResponseDeviceinfoDeviceattributes obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out DeviceInfoResponseDeviceinfoDeviceattributes obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static DeviceInfoResponseDeviceinfoDeviceattributes LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static DeviceInfoResponseDeviceinfoDeviceattributes LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doActivateNow", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ActivateNowRequest {
        
        private List<string> itemsField;
        
        private List<ItemsChoiceType14> itemsElementNameField;
        
        private string itemField;
        
        private ItemChoiceType15 itemElementNameField;
        
        private bool item1Field;
        
        private Item1ChoiceType3 item1ElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ActivateNowRequest class constructor
        /// </summary>
        public ActivateNowRequest() {
            this.itemsElementNameField = new List<ItemsChoiceType14>();
            this.itemsField = new List<string>();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("hsn", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("icc-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("mac-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("meid", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemsElementName")]
        public List<string> Items {
            get {
                return this.itemsField;
            }
            set {
                this.itemsField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ItemsElementName", Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public List<ItemsChoiceType14> ItemsElementName {
            get {
                return this.itemsElementNameField;
            }
            set {
                this.itemsElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", typeof(string), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("reference-ptn", typeof(string), Order=2)]
        [System.Xml.Serialization.XmlElementAttribute("subscriber-id", typeof(string), Order=2)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=3)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType15 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("activate-device", typeof(bool), Order=4)]
        [System.Xml.Serialization.XmlElementAttribute("start-port-in", typeof(bool), Order=4)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("Item1ElementName")]
        public bool Item1 {
            get {
                return this.item1Field;
            }
            set {
                this.item1Field = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=5)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Item1ChoiceType3 Item1ElementName {
            get {
                return this.item1ElementNameField;
            }
            set {
                this.item1ElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivateNowRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivateNowRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivateNowRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivateNowRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivateNowRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateNowRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivateNowRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivateNowRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivateNowRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivateNowRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivateNowRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivateNowRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivateNowRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateNowRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivateNowRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivateNowRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivateNowRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivateNowRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemsChoiceType14 {
        
        /// <remarks/>
        hsn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("icc-id")]
        iccid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("mac-id")]
        macid,
        
        /// <remarks/>
        meid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType15 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-number")]
        accountnumber,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("reference-ptn")]
        referenceptn,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("subscriber-id")]
        subscriberid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum Item1ChoiceType3 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activate-device")]
        activatedevice,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("start-port-in")]
        startportin,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("doActivateNowResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ActivateNowResponse {
        
        private bool successField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public bool success {
            get {
                return this.successField;
            }
            set {
                this.successField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ActivateNowResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ActivateNowResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ActivateNowResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ActivateNowResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ActivateNowResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateNowResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ActivateNowResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ActivateNowResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ActivateNowResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ActivateNowResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ActivateNowResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ActivateNowResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ActivateNowResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(ActivateNowResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ActivateNowResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ActivateNowResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ActivateNowResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ActivateNowResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("checkOrderStatus", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class OrderStatusRequest {
        
        private string itemField;
        
        private ItemChoiceType16 itemElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("order-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("sprint-order-id", typeof(string), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public string Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType16 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OrderStatusRequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrderStatusRequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OrderStatusRequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrderStatusRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OrderStatusRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderStatusRequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OrderStatusRequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OrderStatusRequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OrderStatusRequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OrderStatusRequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OrderStatusRequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrderStatusRequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OrderStatusRequest obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderStatusRequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OrderStatusRequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OrderStatusRequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OrderStatusRequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static OrderStatusRequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType16 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("order-id")]
        orderid,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("sprint-order-id")]
        sprintorderid,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute("checkOrderStatusResponse", Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class OrderStatusResponse {
        
        private bool ordercompleteField;
        
        private bool cashpaymentstatusField;
        
        private bool cashpaymentstatusFieldSpecified;
        
        private string accountnumberField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("order-complete", Order=0)]
        public bool ordercomplete {
            get {
                return this.ordercompleteField;
            }
            set {
                this.ordercompleteField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("cash-payment-status", Order=1)]
        public bool cashpaymentstatus {
            get {
                return this.cashpaymentstatusField;
            }
            set {
                this.cashpaymentstatusField = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool cashpaymentstatusSpecified {
            get {
                return this.cashpaymentstatusFieldSpecified;
            }
            set {
                this.cashpaymentstatusFieldSpecified = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("account-number", Order=2)]
        public string accountnumber {
            get {
                return this.accountnumberField;
            }
            set {
                this.accountnumberField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(OrderStatusResponse));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current OrderStatusResponse object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an OrderStatusResponse object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output OrderStatusResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out OrderStatusResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderStatusResponse);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out OrderStatusResponse obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static OrderStatusResponse Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((OrderStatusResponse)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current OrderStatusResponse object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an OrderStatusResponse object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output OrderStatusResponse object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out OrderStatusResponse obj, out System.Exception exception) {
            exception = null;
            obj = default(OrderStatusResponse);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out OrderStatusResponse obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out OrderStatusResponse obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static OrderStatusResponse LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static OrderStatusResponse LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://nextel.com/ovm", IsNullable=false)]
    public partial class ovm {
        
        private RequestMessageHeader ovmheaderField;
        
        private ovmOvmrequest ovmrequestField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        /// <summary>
        /// ovm class constructor
        /// </summary>
        public ovm() {
            this.ovmrequestField = new ovmOvmrequest();
            this.ovmheaderField = new RequestMessageHeader();
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ovm-header", Order=0)]
        public RequestMessageHeader ovmheader {
            get {
                return this.ovmheaderField;
            }
            set {
                this.ovmheaderField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute("ovm-request", Order=1)]
        public ovmOvmrequest ovmrequest {
            get {
                return this.ovmrequestField;
            }
            set {
                this.ovmrequestField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ovm));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ovm object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ovm object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ovm object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ovm obj, out System.Exception exception) {
            exception = null;
            obj = default(ovm);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ovm obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ovm Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ovm)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ovm object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ovm object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ovm object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ovm obj, out System.Exception exception) {
            exception = null;
            obj = default(ovm);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ovm obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ovm obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ovm LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ovm LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://nextel.com/ovm")]
    public partial class ovmOvmrequest {
        
        private object itemField;
        
        private ItemChoiceType17 itemElementNameField;
        
        private static System.Xml.Serialization.XmlSerializer serializer;
        
        [System.Xml.Serialization.XmlElementAttribute("account-validation-request", typeof(AccountValidationRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("activate-now-request", typeof(ActivateNowRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("activate-reserved-device-request", typeof(ActivateReservedDeviceRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("activation-request", typeof(ActivationRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("authenticate-resend-pin-request", typeof(AuthenticationResendPinRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("bill-summary-request", typeof(BillSummaryRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("corporate-discount-request", typeof(CorporateDiscountRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("coverage-check-request", typeof(CoverageCheckRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("credit-cancel-request", typeof(CreditCancelRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("credit-request", typeof(CreditRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("deactivation-request", typeof(DeactivationRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("device-info-request", typeof(DeviceInfoRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("inventory-check-request", typeof(InventoryCheckRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("npa-nxx-request", typeof(NpaNxxRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("options-request", typeof(OptionsRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("order-status-request", typeof(OrderStatusRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("plans-request", typeof(PlansRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("port-request", typeof(PortRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("port-status-request", typeof(PortStatusRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("pre-authorization-request", typeof(PreAuthorizationRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("security-question-request", typeof(SecurityQuestionRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("service-validation-request", typeof(ServiceValidationRequest), Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("validation-request", typeof(ValidationRequest), Order=0)]
        [System.Xml.Serialization.XmlChoiceIdentifierAttribute("ItemElementName")]
        public object Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public ItemChoiceType17 ItemElementName {
            get {
                return this.itemElementNameField;
            }
            set {
                this.itemElementNameField = value;
            }
        }
        
        private static System.Xml.Serialization.XmlSerializer Serializer {
            get {
                if ((serializer == null)) {
                    serializer = new System.Xml.Serialization.XmlSerializer(typeof(ovmOvmrequest));
                }
                return serializer;
            }
        }
        
        #region Serialize/Deserialize
        /// <summary>
        /// Serializes current ovmOvmrequest object into an XML document
        /// </summary>
        /// <returns>string XML value</returns>
        public virtual string Serialize(System.Text.Encoding encoding) {
            System.IO.StreamReader streamReader = null;
            System.IO.MemoryStream memoryStream = null;
            try {
                memoryStream = new System.IO.MemoryStream();
                System.Xml.XmlWriterSettings xmlWriterSettings = new System.Xml.XmlWriterSettings();
                xmlWriterSettings.Encoding = encoding;
                System.Xml.XmlWriter xmlWriter = XmlWriter.Create(memoryStream, xmlWriterSettings);
                Serializer.Serialize(xmlWriter, this);
                memoryStream.Seek(0, System.IO.SeekOrigin.Begin);
                streamReader = new System.IO.StreamReader(memoryStream);
                return streamReader.ReadToEnd();
            }
            finally {
                if ((streamReader != null)) {
                    streamReader.Dispose();
                }
                if ((memoryStream != null)) {
                    memoryStream.Dispose();
                }
            }
        }
        
        public virtual string Serialize() {
            return Serialize(Encoding.UTF8);
        }
        
        /// <summary>
        /// Deserializes workflow markup into an ovmOvmrequest object
        /// </summary>
        /// <param name="xml">string workflow markup to deserialize</param>
        /// <param name="obj">Output ovmOvmrequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool Deserialize(string xml, out ovmOvmrequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ovmOvmrequest);
            try {
                obj = Deserialize(xml);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool Deserialize(string xml, out ovmOvmrequest obj) {
            System.Exception exception = null;
            return Deserialize(xml, out obj, out exception);
        }
        
        public static ovmOvmrequest Deserialize(string xml) {
            System.IO.StringReader stringReader = null;
            try {
                stringReader = new System.IO.StringReader(xml);
                return ((ovmOvmrequest)(Serializer.Deserialize(System.Xml.XmlReader.Create(stringReader))));
            }
            finally {
                if ((stringReader != null)) {
                    stringReader.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Serializes current ovmOvmrequest object into file
        /// </summary>
        /// <param name="fileName">full path of outupt xml file</param>
        /// <param name="exception">output Exception value if failed</param>
        /// <returns>true if can serialize and save into file; otherwise, false</returns>
        public virtual bool SaveToFile(string fileName, System.Text.Encoding encoding, out System.Exception exception) {
            exception = null;
            try {
                SaveToFile(fileName, encoding);
                return true;
            }
            catch (System.Exception e) {
                exception = e;
                return false;
            }
        }
        
        public virtual bool SaveToFile(string fileName, out System.Exception exception) {
            return SaveToFile(fileName, Encoding.UTF8, out exception);
        }
        
        public virtual void SaveToFile(string fileName) {
            SaveToFile(fileName, Encoding.UTF8);
        }
        
        public virtual void SaveToFile(string fileName, System.Text.Encoding encoding) {
            System.IO.StreamWriter streamWriter = null;
            try {
                string xmlString = Serialize(encoding);
                streamWriter = new System.IO.StreamWriter(fileName, false, Encoding.UTF8);
                streamWriter.WriteLine(xmlString);
                streamWriter.Close();
            }
            finally {
                if ((streamWriter != null)) {
                    streamWriter.Dispose();
                }
            }
        }
        
        /// <summary>
        /// Deserializes xml markup from file into an ovmOvmrequest object
        /// </summary>
        /// <param name="fileName">string xml file to load and deserialize</param>
        /// <param name="obj">Output ovmOvmrequest object</param>
        /// <param name="exception">output Exception value if deserialize failed</param>
        /// <returns>true if this XmlSerializer can deserialize the object; otherwise, false</returns>
        public static bool LoadFromFile(string fileName, System.Text.Encoding encoding, out ovmOvmrequest obj, out System.Exception exception) {
            exception = null;
            obj = default(ovmOvmrequest);
            try {
                obj = LoadFromFile(fileName, encoding);
                return true;
            }
            catch (System.Exception ex) {
                exception = ex;
                return false;
            }
        }
        
        public static bool LoadFromFile(string fileName, out ovmOvmrequest obj, out System.Exception exception) {
            return LoadFromFile(fileName, Encoding.UTF8, out obj, out exception);
        }
        
        public static bool LoadFromFile(string fileName, out ovmOvmrequest obj) {
            System.Exception exception = null;
            return LoadFromFile(fileName, out obj, out exception);
        }
        
        public static ovmOvmrequest LoadFromFile(string fileName) {
            return LoadFromFile(fileName, Encoding.UTF8);
        }
        
        public static ovmOvmrequest LoadFromFile(string fileName, System.Text.Encoding encoding) {
            System.IO.FileStream file = null;
            System.IO.StreamReader sr = null;
            try {
                file = new System.IO.FileStream(fileName, FileMode.Open, FileAccess.Read);
                sr = new System.IO.StreamReader(file, encoding);
                string xmlString = sr.ReadToEnd();
                sr.Close();
                file.Close();
                return Deserialize(xmlString);
            }
            finally {
                if ((file != null)) {
                    file.Dispose();
                }
                if ((sr != null)) {
                    sr.Dispose();
                }
            }
        }
        #endregion
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://nextel.com/ovm", IncludeInSchema=false)]
    public enum ItemChoiceType17 {
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("account-validation-request")]
        accountvalidationrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activate-now-request")]
        activatenowrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activate-reserved-device-request")]
        activatereserveddevicerequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("activation-request")]
        activationrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("authenticate-resend-pin-request")]
        authenticateresendpinrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("bill-summary-request")]
        billsummaryrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("corporate-discount-request")]
        corporatediscountrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("coverage-check-request")]
        coveragecheckrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("credit-cancel-request")]
        creditcancelrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("credit-request")]
        creditrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("deactivation-request")]
        deactivationrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("device-info-request")]
        deviceinforequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("inventory-check-request")]
        inventorycheckrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("npa-nxx-request")]
        npanxxrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("options-request")]
        optionsrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("order-status-request")]
        orderstatusrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("plans-request")]
        plansrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("port-request")]
        portrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("port-status-request")]
        portstatusrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("pre-authorization-request")]
        preauthorizationrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("security-question-request")]
        securityquestionrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("service-validation-request")]
        servicevalidationrequest,
        
        /// <remarks/>
        [System.Xml.Serialization.XmlEnumAttribute("validation-request")]
        validationrequest,
    }
}
