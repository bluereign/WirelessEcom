<!--- COMPONENT --->
<cfcomponent displayname="CampaignService" output="false" hint="I am the CampaignService class.">

<!--- INIT --->
<cffunction name="init" access="public" output="false" returntype="any" hint="I am the constructor method of the CampaignService class.">
  <cfset variables.CssPropsService = CreateObject('component','model.CssPropsService').init() />
  <cfset variables.utils = CreateObject('component','model.utils').init() />
  <cfset variables.datasource = application.getApplicationSettings().datasource />
  <cfreturn this>
</cffunction>

<!--- PUBLIC METHODS --->
<!--- CREATE --->
<cffunction name="createNewCampaign" access="public" output="false" returntype="numeric" hint="I insert a new campaign record into the campaigns table in the database.">
  <cfargument name="campaign" type="any" required="true" hint="I am the Campaign bean." />
  <cfset var qPutCampaign = '' />
  <cfset var insertResult = '' />
  <cftry>
  <cfquery name="qPutCampaign" datasource="#variables.datasource#" result="insertResult">
  	INSERT INTO campaign.Campaign
  		(
  		  companyName,
  		  startDateTime,
  		  endDateTime,
        smsMessage,
        disclaimer,
        subdomain,
        logoImage,
        bgImage,
        adImage,
        headerImage,
        adUrl,
        version,
  		  isActive
  		) VALUES (
  		  <cfqueryparam value="#ARGUMENTS.campaign.getCompanyName()#" cfsqltype="cf_sql_varchar" />,
  		  <cfqueryparam value="#ARGUMENTS.campaign.getStartDateTime()#" cfsqltype="cf_sql_timestamp" />,
  		  <cfqueryparam value="#ARGUMENTS.campaign.getEndDateTime()#" cfsqltype="cf_sql_timestamp" />,
        <cfqueryparam value="#ARGUMENTS.campaign.getSmsMessage()#" cfsqltype="cf_sql_varchar" />,
        <cfqueryparam value="#ARGUMENTS.campaign.getDisclaimer()#" cfsqltype="cf_sql_varchar" />,
        <cfqueryparam value="#ARGUMENTS.campaign.getSubdomain()#" cfsqltype="cf_sql_varchar" />,
        <cfqueryparam value="#ARGUMENTS.campaign.getLogoImage()#" cfsqltype="cf_sql_blob" />,
        <cfqueryparam value="#ARGUMENTS.campaign.getBgImage()#" cfsqltype="cf_sql_blob" null="#NOT len( ARGUMENTS.campaign.getBgImage() )#" />,
        <cfqueryparam value="#ARGUMENTS.campaign.getAdImage()#" cfsqltype="cf_sql_blob" null="#NOT len( ARGUMENTS.campaign.getAdImage() )#" />,
        <cfqueryparam value="#ARGUMENTS.campaign.getHeaderImage()#" cfsqltype="cf_sql_blob" null="#NOT len( ARGUMENTS.campaign.getHeaderImage() )#" />,
        <cfqueryparam value="#ARGUMENTS.campaign.getAdUrl()#" cfsqltype="cf_sql_varchar" />,
        <cfqueryparam value="#ARGUMENTS.campaign.getVersion()#" cfsqltype="cf_sql_integer" />,
  		  <cfqueryparam value="#ARGUMENTS.campaign.getIsActive()#" cfsqltype="cf_sql_bit" />
  		)
  </cfquery>
  <!--- catch any errors --->
  <cfcatch type="any">
  	<cfset variables.utils.errorHandler(cfcatch) />
  	<cfreturn 0 />
  </cfcatch>
  </cftry>
  <!--- return the id generated by the database (SQL Server) --->
  <cfreturn insertResult.IDENTITYCOL />
</cffunction>

<!--- RETRIEVE - BY ID --->
<cffunction name="getCampaignByID" access="public" output="false" returntype="any" hint="I return a Campaign bean populated with the details of a specific campaign record.">
  <cfargument name="id" type="numeric" required="true" hint="I am the numeric auto-increment id of the campaign to search for." />
  <cfset var qGetCampaign = '' />
  <cfset var qGetCssProps = '' />
  <cfset var campaignObject = '' />
  <cfset var propStruct = StructNew() />
  <cfset var formFields = '' />
  <cfset var iX = 0 />
  <cftry>

    <!--- get the campaign by campaignId --->
    <cfquery name="qGetCampaign" datasource="#variables.datasource#">
    	SELECT campaignId, companyName, startDateTime, endDateTime, smsMessage, disclaimer, subdomain, logoImage, bgImage, adImage, headerImage, adUrl, version, isActive
    	FROM campaign.Campaign
    	WHERE campaignId = <cfqueryparam value="#ARGUMENTS.id#" cfsqltype="cf_sql_integer" />
    </cfquery>

  	<!--- build css properties struct (handles all defined and undefined values) --->
  	<cfset propStruct = getCssPropertyStruct( variables.CssPropsService.filter( campaignId = ARGUMENTS.id ) ) />

  <!--- catch any errors --->
  <cfcatch type="any">
  	<cfset variables.utils.errorHandler(cfcatch) />
  	<cfreturn createObject('component','model.Campaign').init() />
  </cfcatch>
  </cftry>

  <!--- check if a campaign was found --->
  <cfif qGetCampaign.RecordCount>
    <!--- it was, return a campaign bean --->
    <cfreturn createObject('component','model.Campaign').init(
    	campaignId    = qGetCampaign.campaignId,
    	companyName 	= qGetCampaign.companyName,
    	startDateTime = qGetCampaign.startDateTime,
    	endDateTime	  = qGetCampaign.endDateTime,
      smsMessage    = qGetCampaign.smsMessage,
      disclaimer    = qGetCampaign.disclaimer,
      logoImage     = qGetCampaign.logoImage,
      bgImage       = qGetCampaign.bgImage,
      adImage       = qGetCampaign.adImage,
      headerImage   = qGetCampaign.headerImage,
      adUrl         = qGetCampaign.adUrl,
      subdomain     = qGetCampaign.subdomain,
      version       = qGetCampaign.version,
    	isActive    	= qGetCampaign.isActive,
      cssProps      = propStruct
    ) />  
  <cfelse>
    <!--- no campaign found, generate an empty props struct --->
	  <cfset propStruct = getCssPropertyStruct() />	
    <!--- return an empty bean --->
    <cfreturn createObject('component','model.Campaign').init(
      cssProps    = propStruct
    ) />
  </cfif>
</cffunction>

<!--- UPDATE --->
<cffunction name="updateCampaign" access="public" output="false" returntype="numeric" hint="I update this campaign record in the campaigns table of the database.">
  <cfargument name="campaign" type="any" required="true" hint="I am the Campaign bean." />
  <cfset var qUpdCampaign = '' />
  <cftry>
    <cfquery name="qUpdCampaign" datasource="#variables.datasource#">
    	UPDATE campaign.Campaign 
		SET
    	  companyName = <cfqueryparam value="#ARGUMENTS.campaign.getCompanyName()#" cfsqltype="cf_sql_varchar" />,
    	  startDateTime = <cfqueryparam value="#ARGUMENTS.campaign.getStartDateTime()#" cfsqltype="cf_sql_timestamp" />,
    	  endDateTime = <cfqueryparam value="#ARGUMENTS.campaign.getEndDateTime()#" cfsqltype="cf_sql_timestamp" />,
        smsMessage = <cfqueryparam value="#ARGUMENTS.campaign.getSmsMessage()#" cfsqltype="cf_sql_varchar" />,
        disclaimer = <cfqueryparam value="#ARGUMENTS.campaign.getDisclaimer()#" cfsqltype="cf_sql_varchar" />,
        logoImage = <cfqueryparam value="#ARGUMENTS.campaign.getLogoImage()#" cfsqltype="cf_sql_blob" />,
        bgImage = <cfqueryparam value="#ARGUMENTS.campaign.getBgImage()#" cfsqltype="cf_sql_blob" null="#NOT len( ARGUMENTS.campaign.getBgImage() )#" />,
        adImage = <cfqueryparam value="#ARGUMENTS.campaign.getAdImage()#" cfsqltype="cf_sql_blob" null="#NOT len( ARGUMENTS.campaign.getAdImage() )#" />,
        headerImage = <cfqueryparam value="#ARGUMENTS.campaign.getHeaderImage()#" cfsqltype="cf_sql_blob" null="#NOT len( ARGUMENTS.campaign.getHeaderImage() )#" />,
        adUrl = <cfqueryparam value="#ARGUMENTS.campaign.getAdUrl()#" cfsqltype="cf_sql_varchar" />,
        subdomain = <cfqueryparam value="#ARGUMENTS.campaign.getSubdomain()#" cfsqltype="cf_sql_varchar" />,
        version = <cfqueryparam value="#ARGUMENTS.campaign.getVersion()#" cfsqltype="cf_sql_integer" />,
    	  isActive = <cfqueryparam value="#ARGUMENTS.campaign.getIsActive()#" cfsqltype="cf_sql_bit" />
    	WHERE campaignId = <cfqueryparam value="#ARGUMENTS.campaign.getCampaignId()#" cfsqltype="cf_sql_integer" />
    </cfquery>
  <!--- catch any errors --->
  <cfcatch type="any">
  	<cfset variables.utils.errorHandler(cfcatch) />
  	<cfreturn 0 />
  </cfcatch>
  </cftry>
  <cfreturn ARGUMENTS.campaign.getCampaignId() />
</cffunction>

<!--- DELETE --->
<cffunction name="deleteCampaignByID" access="public" output="false" returntype="boolean" hint="I delete a campaign from campaign table in the database.">
  <cfargument name="id" type="numeric" required="true" hint="I am the numeric auto-increment id of the campaign to delete." />
  <cfset var qDelCampaign = '' />
  <cftry>
    <cfquery name="qDelCampaign" datasource="#variables.datasource#">
  		DELETE FROM campaign.Campaign
  		WHERE campaignId = <cfqueryparam value="#ARGUMENTS.id#" cfsqltype="cf_sql_integer" />
	  </cfquery>
  <cfcatch type="database">
    <cfreturn false />
  </cfcatch>
  </cftry>
  <cfreturn true />
</cffunction>

<!--- PROCESS FORM --->
<cffunction name="processForm" access="public" output="false" returntype="void" hint="I process the campaign form into the appropriate objects and save them.">
  <cfargument name="rc" type="any" required="true" hint="I am the request context containing the submitted form values." />
  <cfset var campaignObj = getCampaignById( rc.campaignId ) />
  <cfset var formFieldArr = getFormFields() />
  <cfset var formField = '' />
  <cfset var localLogo = '' />
  <cfset var localBg = '' />
  <cfset var localAd = '' />
  <cfset var localCart = '' />

  <!--- check if a logo was uploaded --->
  <cfif isDefined( 'rc.logoFile' ) AND len( rc.logoFile )>
    <!--- read in the logo file --->
    <cffile action="readbinary" file="#ExpandPath('assets/img/logos/')##rc.subdomain#/#rc.logoFile#" variable="localLogo" />
    <!--- set the logo image data to the bean --->
    <cfset campaignObj.setLogoImage( localLogo ) />
  </cfif>

  <!--- check if a background was uploaded --->
  <cfif isDefined( 'rc.bgFile' ) AND len( rc.bgFile )>
    <!--- read in the background file --->
    <cffile action="readbinary" file="#ExpandPath('assets/img/logos/')##rc.subdomain#/#rc.bgFile#" variable="localBg" />
    <!--- set the background image data to the bean --->
    <cfset campaignObj.setBgImage( localBg ) />
  </cfif>

  <!--- check if an ad was uploaded --->
  <cfif isDefined( 'rc.adFile' ) AND len( rc.adFile )>
    <!--- read in the ad file --->
    <cffile action="readbinary" file="#ExpandPath('assets/img/logos/')##rc.subdomain#/#rc.adFile#" variable="localAd" />
    <!--- set the ad image data to the bean --->
    <cfset campaignObj.setAdImage( localAd ) />
  </cfif>

  <!--- check if a cart logo was uploaded --->
  <cfif isDefined( 'rc.headerFile' ) AND len( rc.headerFile )>
    <!--- read in the cart file --->
    <cffile action="readbinary" file="#ExpandPath('assets/img/logos/')##rc.subdomain#/#rc.headerFile#" variable="localCart" />
    <!--- set the ad image data to the bean --->
    <cfset campaignObj.setHeaderImage( localCart ) />
  </cfif>

  <!--- update/add campaignObj data --->
  <cfset campaignObj.setCompanyName( rc.companyName ) />
  <cfset campaignObj.setStartDateTime( rc.startDateTime ) />
  <cfset campaignObj.setEndDateTime( rc.endDateTime ) />
  <cfset campaignObj.setSmsMessage( rc.smsMessage ) />
  <cfset campaignObj.setDisclaimer( rc.disclaimer ) />
  <cfset campaignObj.setAdUrl( rc.adUrl ) />
  <cfset campaignObj.setSubdomain( LCase( reReplace( rc.subdomain, '[^a-zA-Z0-9\-]', '', 'all' ) ) ) />
  <cfset campaignObj.setVersion( campaignObj.getVersion() + 1 ) />
  <cfif IsDefined('rc.isActive') >
    <cfset campaignObj.setIsActive( rc.isActive ) />
  <cfelse>
    <cfset campaignObj.setIsActive( 0 ) />    
  </cfif>

  <!--- save the campaign object (persist changes/addition to database) --->
  <cfset rc.campaignId = saveCampaign( campaignObj ) />

  <!--- update CSS properties --->
  <cfloop array="#formFieldArr#" index="formField">

    <cfswitch expression="#formField#">
      
      <cfcase value="topNavBarBg">
        <cfset campaignObj.getCssProps().topNavBarBg.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().topNavBarBg.setFormField('topNavBarBg') />
        <cfset campaignObj.getCssProps().topNavBarBg.setValue(rc.topNavBarBg) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().topNavBarBg) />
      </cfcase>
      
      <cfcase value="topNavBarText">
        <cfset campaignObj.getCssProps().topNavBarText.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().topNavBarText.setFormField('topNavBarText') />
        <cfset campaignObj.getCssProps().topNavBarText.setValue(rc.topNavBarText) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().topNavBarText) />
      </cfcase>
      
      <cfcase value="topNavBarTextActive">
        <cfset campaignObj.getCssProps().topNavBarTextActive.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().topNavBarTextActive.setFormField('topNavBarTextActive') />
        <cfset campaignObj.getCssProps().topNavBarTextActive.setValue(rc.topNavBarTextActive) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().topNavBarTextActive) />
      </cfcase>
      
      <cfcase value="menuNavText">
        <cfset campaignObj.getCssProps().menuNavText.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().menuNavText.setFormField('menuNavText') />
        <cfset campaignObj.getCssProps().menuNavText.setValue(rc.menuNavText) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().menuNavText) />
      </cfcase>
      
      <cfcase value="menuNavBg">
        <cfset campaignObj.getCssProps().menuNavBg.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().menuNavBg.setFormField('menuNavBg') />
        <cfset campaignObj.getCssProps().menuNavBg.setValue(rc.menuNavBg) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().menuNavBg) />
      </cfcase>
      
      <cfcase value="menuNavTextActive">
        <cfset campaignObj.getCssProps().menuNavTextActive.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().menuNavTextActive.setFormField('menuNavTextActive') />
        <cfset campaignObj.getCssProps().menuNavTextActive.setValue(rc.menuNavTextActive) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().menuNavTextActive) />
      </cfcase>
      
      <cfcase value="menuNavBgActive">
        <cfset campaignObj.getCssProps().menuNavBgActive.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().menuNavBgActive.setFormField('menuNavBgActive') />
        <cfset campaignObj.getCssProps().menuNavBgActive.setValue(rc.menuNavBgActive) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().menuNavBgActive) />
      </cfcase>

      <cfcase value="gridHdrText">
        <cfset campaignObj.getCssProps().gridHdrText.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().gridHdrText.setFormField('gridHdrText') />
        <cfset campaignObj.getCssProps().gridHdrText.setValue(rc.gridHdrText) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().gridHdrText) />
      </cfcase>
      
      <cfcase value="gridHoverText">
        <cfset campaignObj.getCssProps().gridHoverText.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().gridHoverText.setFormField('gridHoverText') />
        <cfset campaignObj.getCssProps().gridHoverText.setValue(rc.gridHoverText) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().gridHoverText) />
      </cfcase>
      
      <cfcase value="gridBtnBg">
        <cfset campaignObj.getCssProps().gridBtnBg.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().gridBtnBg.setFormField('gridBtnBg') />
        <cfset campaignObj.getCssProps().gridBtnBg.setValue(rc.gridBtnBg) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().gridBtnBg) />
      </cfcase>
      
      <cfcase value="gridBtnText">
        <cfset campaignObj.getCssProps().gridBtnText.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().gridBtnText.setFormField('gridBtnText') />
        <cfset campaignObj.getCssProps().gridBtnText.setValue(rc.gridBtnText) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().gridBtnText) />
      </cfcase>
      
      <cfcase value="gridBtnBgActive">
        <cfset campaignObj.getCssProps().gridBtnBgActive.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().gridBtnBgActive.setFormField('gridBtnBgActive') />
        <cfset campaignObj.getCssProps().gridBtnBgActive.setValue(rc.gridBtnBgActive) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().gridBtnBgActive) />
      </cfcase>
      
      <cfcase value="gridBtnTextActive">
        <cfset campaignObj.getCssProps().gridBtnTextActive.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().gridBtnTextActive.setFormField('gridBtnTextActive') />
        <cfset campaignObj.getCssProps().gridBtnTextActive.setValue(rc.gridBtnTextActive) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().gridBtnTextActive) />
      </cfcase>
      
      <cfcase value="bgClr">
        <cfset campaignObj.getCssProps().bgClr.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().bgClr.setFormField('bgClr') />
        <cfset campaignObj.getCssProps().bgClr.setValue(rc.bgClr) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().bgClr) />
      </cfcase>
      
      <cfcase value="cartBg">
        <cfset campaignObj.getCssProps().cartBg.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().cartBg.setFormField('cartBg') />
        <cfset campaignObj.getCssProps().cartBg.setValue(rc.cartBg) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().cartBg) />
      </cfcase>
      
      <cfcase value="cartText">
        <cfset campaignObj.getCssProps().cartText.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().cartText.setFormField('cartText') />
        <cfset campaignObj.getCssProps().cartText.setValue(rc.cartText) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().cartText) />
      </cfcase>
      
      <cfcase value="cartTextActive">
        <cfset campaignObj.getCssProps().cartTextActive.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().cartTextActive.setFormField('cartTextActive') />
        <cfset campaignObj.getCssProps().cartTextActive.setValue(rc.cartTextActive) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().cartTextActive) />
      </cfcase>
      
      <cfcase value="footerNavBarBg">
        <cfset campaignObj.getCssProps().footerNavBarBg.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().footerNavBarBg.setFormField('footerNavBarBg') />
        <cfset campaignObj.getCssProps().footerNavBarBg.setValue(rc.footerNavBarBg) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().footerNavBarBg) />
      </cfcase>

      <cfcase value="footerNavBarText">
        <cfset campaignObj.getCssProps().footerNavBarText.setCampaignId(rc.campaignId) />
        <cfset campaignObj.getCssProps().footerNavBarText.setFormField('footerNavBarText') />
        <cfset campaignObj.getCssProps().footerNavBarText.setValue(rc.footerNavBarText) />
        <cfset variables.CssPropsService.saveCssProps(campaignObj.getCssProps().footerNavBarText) />
      </cfcase>

    </cfswitch>

  </cfloop>

</cffunction>

<!--- NO FILTER - GET ALL RECORDS --->
<cffunction name="getAllCampaigns" access="public" output="false" returntype="query" hint="I return a query of all records in the campaigns table in the database.">
  <cfargument name="cache" type="any" required="false" default="false" hint="I am a flag to determine if this query should be cached." />
  <cfargument name="cacheTime" type="any" required="false" default="#CreateTimeSpan(0,1,0,0)#" hint="I am timespan to cache this query (Use CreateTimeSpan() or use the default cache time of one hour by not passing this variable." />
  <cfargument name="incSub" type="boolean" required="false" default="false" hint="I am a flag to determine if the query should also return the subdomain in results." />
 
    <cfset var thisFilter = {
      cache = ARGUMENTS.cache,
      cacheTime = ARGUMENTS.cacheTime,
      incSub = ARGUMENTS.incSub
    } />

  <cfreturn filterAllCampaigns(thisFilter) />
</cffunction>

<!--- FILTER --->
<cffunction name="filter" access="public" output="false" returntype="any" hint="I run a query of all records within the database table.">
  <cfargument name="companyName" type="any" required="false" default="" hint="I am the companyName string to return records for." />
  <cfargument name="startDateTime" type="any" required="false" default="" hint="I am the startDateTime date to return records for." />
  <cfargument name="beginStartDateTime" type="any" required="false" default="" hint="I am the beginning startDateTime date to return records for." />
  <cfargument name="endStartDateTime" type="any" required="false" default="" hint="I am the ending startDateTime date to return records for." />
  <cfargument name="endDateTime" type="any" required="false" default="" hint="I am the endDateTime date to return records for." />
  <cfargument name="beginEndDateTime" type="any" required="false" default="" hint="I am the beginning endDateTime date to return records for." />
  <cfargument name="endEndDateTime" type="any" required="false" default="" hint="I am the ending endDateTime date to return records for." />
  <cfargument name="smsMessage" type="any" required="false" default="" hint="I am the smsMessage string to return records for." />
  <cfargument name="disclaimer" type="any" required="false" default="" hint="I am the disclaimer string to return records for." />
  <cfargument name="subdomain" type="any" required="false" default="" hint="I am the subdomain string to return records for." />
  <cfargument name="version" type="any" required="false" default="" hint="I am the version numeric to return records for." />
  <cfargument name="isActive" type="any" required="false" default="" hint="I am the isActive boolean to return records for." />
  <cfargument name="orderBy" type="any" required="false" default="" hint="I am the column (and optional ordinal ASC or DESC) that records should be ordered by." />
  <cfargument name="cache" type="any" required="false" default="false" hint="I am a flag to determine if this query should be cached." />
  <cfargument name="cacheTime" type="any" required="false" default="#CreateTimeSpan(0,1,0,0)#" hint="I am timespan to cache this query (Use CreateTimeSpan() or use the default cache time of one hour by not passing this variable." />
  <cfargument name="useSearch" type="boolean" required="false" default="false" hint="I am a flag to determine if this query should use 'LIKE' to search for records." />
    <cfset var thisFilter = StructNew() />
    <cfif IsDefined('ARGUMENTS.companyName') AND ARGUMENTS.companyName NEQ "">
      <cfset thisFilter.companyName = ARGUMENTS.companyName />
    </cfif>
    <cfif IsDefined('ARGUMENTS.startDateTime') AND ARGUMENTS.startDateTime NEQ "">
      <cfset thisFilter.startDateTime = ARGUMENTS.startDateTime />
    </cfif>
    <cfif IsDefined('ARGUMENTS.beginStartDateTime') AND ARGUMENTS.beginStartDateTime NEQ "">
      <cfset thisFilter.beginStartDateTime = ARGUMENTS.beginStartDateTime />
    </cfif>
    <cfif IsDefined('ARGUMENTS.endStartDateTime') AND ARGUMENTS.endStartDateTime NEQ "">
      <cfset thisFilter.endStartDateTime = ARGUMENTS.endStartDateTime />
    </cfif>
    <cfif IsDefined('ARGUMENTS.endDateTime') AND ARGUMENTS.endDateTime NEQ "">
      <cfset thisFilter.endDateTime = ARGUMENTS.endDateTime />
    </cfif>
    <cfif IsDefined('ARGUMENTS.beginEndDateTime') AND ARGUMENTS.beginEndDateTime NEQ "">
      <cfset thisFilter.beginEndDateTime = ARGUMENTS.beginEndDateTime />
    </cfif>
    <cfif IsDefined('ARGUMENTS.endEndDateTime') AND ARGUMENTS.endEndDateTime NEQ "">
      <cfset thisFilter.endEndDateTime = ARGUMENTS.endEndDateTime />
    </cfif>
    <cfif IsDefined('ARGUMENTS.smsMessage') AND ARGUMENTS.smsMessage NEQ "">
      <cfset thisFilter.smsMessage = ARGUMENTS.smsMessage />
    </cfif>
    <cfif IsDefined('ARGUMENTS.disclaimer') AND ARGUMENTS.disclaimer NEQ "">
      <cfset thisFilter.disclaimer = ARGUMENTS.disclaimer />
    </cfif>
    <cfif IsDefined('ARGUMENTS.subdomain') AND ARGUMENTS.subdomain NEQ "">
      <cfset thisFilter.subdomain = ARGUMENTS.subdomain />
    </cfif>
    <cfif IsDefined('ARGUMENTS.version') AND ARGUMENTS.version NEQ "">
      <cfset thisFilter.version = ARGUMENTS.version />
    </cfif>
    <cfif IsDefined('ARGUMENTS.isActive') AND ARGUMENTS.isActive NEQ "">
      <cfset thisFilter.isActive = ARGUMENTS.isActive />
    </cfif>
    <cfif IsDefined('ARGUMENTS.orderBy') AND ARGUMENTS.orderBy NEQ "">
      <cfset thisFilter.order_by = ARGUMENTS.orderBy />
    </cfif>
    <cfif IsDefined('ARGUMENTS.cache') AND ARGUMENTS.cache NEQ false>
      <cfset thisFilter.cache = ARGUMENTS.cache />
    </cfif>
    <cfif IsDefined('ARGUMENTS.cacheTime') AND ARGUMENTS.cacheTime NEQ "">
      <cfset thisFilter.cacheTime = ARGUMENTS.cacheTime />
    </cfif>
    <cfif IsDefined('ARGUMENTS.useSearch') AND ARGUMENTS.useSearch NEQ false>
      <cfset thisFilter.useSearch = ARGUMENTS.useSearch />
    </cfif>
  <cfif structKeyExists(thisFilter, 'cache') AND thisFilter.cache>
    <cfreturn cacheAllCampaigns(thisFilter) />
  <cfelseif structKeyExists(thisFilter, 'useSearch') AND thisFilter.useSearch>
    <cfreturn searchAllCampaigns(thisFiler) />
  <cfelse>
    <cfreturn filterAllCampaigns(thisFilter) />
  </cfif>
</cffunction>

<!--- PRIVATE METHODS --->
<!--- QUERY - CACHE ALL --->
<cffunction name="cacheAllCampaigns" access="private" output="false" returntype="any" hint="I run a query and will return all campaigns records. If a filter has been applied, I will refine results based on the filter.">
  <cfargument name="filter" type="struct" required="false" default="#StructNew()#" hint="I am a structure used to filter the query." />
  <cfset var cachedQueryName = '' />
  <cfset cachedQueryName = Hash( SerializeJSON( filter ), 'SHA-256') />
  <cfquery name="#cachedQueryName#" datasource="#variables.datasource#" cachedwithin="#ARGUMENTS.filter.cacheTime#">
    SELECT campaignId, companyName, startDateTime, endDateTime, smsMessage, disclaimer, subdomain, logoImage, bgImage, adImage, version, isActive
    FROM campaign.Campaign
    WHERE 1 = 1
  <cfif NOT structIsEmpty(ARGUMENTS.filter)>
    <!--- filter is applied --->
    <cfif structKeyExists(ARGUMENTS.filter, 'companyName')>
    AND companyName = <cfqueryparam value="#ARGUMENTS.filter.companyName#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'startDateTime')>
    AND startDateTime = <cfqueryparam value="#ARGUMENTS.filter.startDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'beginStartDateTime')>
    AND startDateTime >= <cfqueryparam value="#ARGUMENTS.filter.beginStartDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'endStartDateTime')>
    AND startDateTime <= <cfqueryparam value="#ARGUMENTS.filter.endStartDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'endDateTime')>
    AND endDateTime = <cfqueryparam value="#ARGUMENTS.filter.endDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'beginEndDateTime')>
    AND endDateTime >= <cfqueryparam value="#ARGUMENTS.filter.beginEndDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'endEndDateTime')>
    AND endDateTime <= <cfqueryparam value="#ARGUMENTS.filter.endEndDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'smsMessage')>
    AND smsMessage = <cfqueryparam value="#ARGUMENTS.filter.smsMessage#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'disclaimer')>
    AND disclaimer = <cfqueryparam value="#ARGUMENTS.filter.disclaimer#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'subdomain')>
    AND subdomain = <cfqueryparam value="#ARGUMENTS.filter.subdomain#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'version')>
    AND version = <cfqueryparam value="#ARGUMENTS.filter.version#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'isActive')>
    AND isActive = <cfqueryparam value="#ARGUMENTS.filter.isActive#" cfsqltype="cf_sql_bit" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'order_by')>
    ORDER BY #ARGUMENTS.filter.order_by#
    </cfif>
  </cfif>
  </cfquery>
  <cfreturn variables[cachedQueryName] />
</cffunction>

<!--- QUERY - FILTER ALL --->
<cffunction name="filterAllCampaigns" access="private" output="false" returntype="any" hint="I run a query and will return all campaigns records. If a filter has been applied, I will refine results based on the filter.">
  <cfargument name="filter" type="struct" required="false" default="#StructNew()#" hint="I am a structure used to filter the query." />
  <cfset var qGetCampaigns = '' />
  <cfquery name="qGetCampaigns" datasource="#variables.datasource#">
    SELECT campaignId, companyName, startDateTime, endDateTime, smsMessage, disclaimer, subdomain, logoImage, bgImage, adImage, version, isActive
    FROM campaign.Campaign
    WHERE 1 = 1
  <cfif NOT structIsEmpty(ARGUMENTS.filter)>
    <!--- filter is applied --->
    <cfif structKeyExists(ARGUMENTS.filter, 'companyName')>
    AND companyName = <cfqueryparam value="#ARGUMENTS.filter.companyName#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'startDateTime')>
    AND startDateTime = <cfqueryparam value="#ARGUMENTS.filter.startDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'beginStartDateTime')>
    AND startDateTime >= <cfqueryparam value="#ARGUMENTS.filter.beginStartDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'endStartDateTime')>
    AND startDateTime <= <cfqueryparam value="#ARGUMENTS.filter.endStartDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'endDateTime')>
    AND endDateTime = <cfqueryparam value="#ARGUMENTS.filter.endDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'beginEndDateTime')>
    AND endDateTime >= <cfqueryparam value="#ARGUMENTS.filter.beginEndDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'endEndDateTime')>
    AND endDateTime <= <cfqueryparam value="#ARGUMENTS.filter.endEndDateTime#" cfsqltype="cf_sql_timestamp" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'smsMessage')>
    AND smsMessage = <cfqueryparam value="#ARGUMENTS.filter.smsMessage#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'disclaimer')>
    AND disclaimer = <cfqueryparam value="#ARGUMENTS.filter.disclaimer#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'subdomain')>
    AND subdomain = <cfqueryparam value="#ARGUMENTS.filter.subdomain#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'version')>
    AND version = <cfqueryparam value="#ARGUMENTS.filter.version#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'isActive')>
    AND isActive = <cfqueryparam value="#ARGUMENTS.filter.isActive#" cfsqltype="cf_sql_bit" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'order_by')>
    ORDER BY #ARGUMENTS.filter.order_by#
    </cfif>
  </cfif>
  </cfquery>
  <cfreturn qGetCampaigns />
</cffunction>

<!--- QUERY - SEARCH ALL --->
<cffunction name="searchAllCampaigns" access="private" output="false" returntype="any" hint="I run a query and will return all campaigns records. If a filter has been applied, I will refine results based on the filter.">
  <cfargument name="filter" type="struct" required="false" default="#StructNew()#" hint="I am a structure used to filter the query." />
  <cfset var qGetCampaigns = '' />
  <cfquery name="qGetCampaigns" datasource="#variables.datasource#">
    SELECT campaignId, companyName, startDateTime, endDateTime, smsMessage, disclaimer, subdomain, logoImage, bgImage, adImage, version, isActive
    FROM campaign.Campaign
    WHERE 1 = 1
  <cfif NOT structIsEmpty(ARGUMENTS.filter)>
    <!--- filter is applied --->
    <cfif structKeyExists(ARGUMENTS.filter, 'companyName')>
    AND companyName LIKE <cfqueryparam value="%#ARGUMENTS.filter.companyName#%" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'smsMessage')>
    AND smsMessage LIKE <cfqueryparam value="%#ARGUMENTS.filter.smsMessage#%" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'disclaimer')>
    AND disclaimer LIKE <cfqueryparam value="%#ARGUMENTS.filter.disclaimer#%" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'subdomain')>
    AND subdomain LIKE <cfqueryparam value="%#ARGUMENTS.filter.subdomain#%" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'version')>
    AND version LIKE <cfqueryparam value="%#ARGUMENTS.filter.version#%" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'order_by')>
    ORDER BY #ARGUMENTS.filter.order_by#
    </cfif>
  </cfif>
  </cfquery>
  <cfreturn qGetCampaigns />
</cffunction>

<!--- UTILITY FUNCTIONS --->
<!--- SAVE --->
<cffunction name="saveCampaign" access="public" output="false" returntype="any" hint="I handle saving a campaign either by creating a new entry or updating an existing one.">
  <cfargument name="campaign" type="any" required="true" hint="I am the Campaign bean." />
  <cfif exists(ARGUMENTS.campaign)>
  	<cfreturn updateCampaign(ARGUMENTS.campaign) />
  <cfelse>
  	<cfreturn createNewCampaign(ARGUMENTS.campaign) />
  </cfif>
</cffunction>

<!--- EXISTS --->
<cffunction name="exists" access="private" output="false" returntype="boolean" hint="I check to see if a specific Campaign is in the database, using ID as the check.">
  <cfargument name="campaign" type="any" required="true" hint="I am the Campaign bean." />
  <cfset var qGetCampaign = '' />
  <cfquery name="qGetCampaign" datasource="#variables.datasource#">
  	SELECT campaignId 
	  FROM campaign.Campaign
  	WHERE campaignId = <cfqueryparam value="#ARGUMENTS.campaign.getCampaignId()#" cfsqltype="cf_sql_integer" />
  </cfquery>
  <cfif qGetCampaign.RecordCount>
	 <cfreturn true />
  <cfelse>
	 <cfreturn false />
  </cfif>
</cffunction>

<!--- generate a css property struct from a query or null --->
<!--- handles new css property fields for previously defined --->
<!--- campaigns when editing, and new campaigns when adding --->
<cffunction name="getCssPropertyStruct" access="private" output="false" returntype="struct">
  <cfargument name="qGetCssProps" type="any" required="false" default="" hint="I am the css properties for this campaign, or null">
    <cfset var formFieldArr = getFormFields() />
    <cfset var formField = '' />
    <cfset var queryFields = '' />
    <cfset var queryField = 0 />
    <cfset var propStruct = {} />

    <!--- check if the query passed in is valid (is query and has records) --->
    <cfif isQuery( qGetCssProps ) AND qGetCssProps.RecordCount>
        <!--- it is valid, get the list of form fields from the query --->
        <cfset queryFields = valueList( qGetCssProps.formField ) />
    </cfif>
    
    <!--- loop through the css properties for this campaign --->
    <cfloop array="#formFieldArr#" index="formField">
        <!--- set a value to hold the position of the element in the list (or 0 if not found) --->
        <cfset queryField = listFindNoCase( queryFields, formField ) />
        <!--- check if this form field is found in the query --->
        <cfif NOT queryField>
            <!--- not found in query, add a blank css property bean --->
            <cfset propStruct[formField] = createObject('component','model.CssProps').init() />
        <cfelse>
            <!--- found, add the css property bean using the values in the database --->   
            <cfset propStruct[formField] = createObject('component','model.CssProps').init(
              cssPropId   = qGetCssProps.CssPropertyId[queryField],
              formField   = formField,
              value       = qGetCssProps.value[queryField]
            ) />       
        </cfif>
    </cfloop>
    
    <cfreturn propStruct />
</cffunction>

<!--- get an arry of form fields to parse --->
<cffunction name="getFormFields" access="private" output="false" returntype="array">
    <cfset var formFieldArr = arrayNew(1) />
  
    <!--- break down the list of fields into an arry, for easier maintainability during expansion --->
    <cfset arrayAppend( formFieldArr, 'topNavBarBg' ) />
    <cfset arrayAppend( formFieldArr, 'topNavBarText' ) />
    <cfset arrayAppend( formFieldArr, 'topNavBarTextActive' ) />
    <cfset arrayAppend( formFieldArr, 'menuNavText' ) />
    <cfset arrayAppend( formFieldArr, 'menuNavBg' ) />
    <cfset arrayAppend( formFieldArr, 'menuNavTextActive' ) />
    <cfset arrayAppend( formFieldArr, 'menuNavBgActive' ) />
    <cfset arrayAppend( formFieldArr, 'gridHdrText' ) />
    <cfset arrayAppend( formFieldArr, 'gridHoverText' ) />
    <cfset arrayAppend( formFieldArr, 'gridBtnBg' ) />
    <cfset arrayAppend( formFieldArr, 'gridBtnText' ) />
    <cfset arrayAppend( formFieldArr, 'gridBtnBgActive' ) />
    <cfset arrayAppend( formFieldArr, 'gridBtnTextActive' ) />
    <cfset arrayAppend( formFieldArr, 'footerNavBarBg' ) />
    <cfset arrayAppend( formFieldArr, 'footerNavBarText' ) />
    <cfset arrayAppend( formFieldArr, 'bgClr' ) />
    <cfset arrayAppend( formFieldArr, 'cartBg' ) />
    <cfset arrayAppend( formFieldArr, 'cartText' ) />
    <cfset arrayAppend( formFieldArr, 'cartTextActive' ) />

    <!--- return the array --->
    <cfreturn formFieldArr />

</cffunction>

</cfcomponent>

