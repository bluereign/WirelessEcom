<!--- COMPONENT --->
<cfcomponent displayname="CssPropsService" output="false" hint="I am the CssPropsService class.">

<!--- INIT --->
<cffunction name="init" access="public" output="false" returntype="any" hint="I am the constructor method of the CssPropsService class.">
  <cfset variables.datasource = application.getApplicationSettings().datasource />
  <cfset variables.utils = CreateObject('component','model.utils').init() />
  <cfreturn this>
</cffunction>

<!--- PUBLIC METHODS --->
<!--- CREATE --->
<cffunction name="createNewCssProps" access="public" output="false" returntype="numeric" hint="I insert a new cssProps record into the cssProps table in the database.">
  <cfargument name="cssProps" type="any" required="true" hint="I am the CssProps bean." />
  <cfset var qPutCssProps = '' />
  <cfset var insertResult = '' />
  <cftry>
  <cfquery name="qPutCssProps" datasource="#variables.datasource#" result="insertResult">
  	INSERT INTO campaign.CssProperty
  		(
  		  campaignId,
        formField,
  		  value
  		) VALUES (
  		  <cfqueryparam value="#ARGUMENTS.cssProps.getCampaignId()#" cfsqltype="cf_sql_integer" />,
        <cfqueryparam value="#ARGUMENTS.cssProps.getFormField()#" cfsqltype="cf_sql_varchar" />,
  		  <cfqueryparam value="#ARGUMENTS.cssProps.getValue()#" cfsqltype="cf_sql_varchar" />
  		)
  </cfquery>
  <!--- catch any errors --->
  <cfcatch type="any">
  	<cfset variables.utils.errorHandler(cfcatch) />
  	<cfreturn 0 />
  </cfcatch>
  </cftry>
  <!--- return the id generated by the database (SQL Server) --->
  <cfreturn insertResult.IDENTITYCOL />
</cffunction>

<!--- RETRIEVE - BY ID --->
<cffunction name="getCssPropsByID" access="public" output="false" returntype="any" hint="I return a CssProps bean populated with the details of a specific cssProps record.">
  <cfargument name="id" type="numeric" required="true" hint="I am the numeric auto-increment id of the cssProps to search for." />
  <cfset var qGetCssProps = '' />
  <cfset var cssPropsObject = '' />
  <cftry>
    <cfquery name="qGetCssProps" datasource="#variables.datasource#">
    	SELECT CssPropertyId, campaignId, formField, value
    	FROM campaign.CssProperty
    	WHERE cssPropId = <cfqueryparam value="#ARGUMENTS.id#" cfsqltype="cf_sql_integer" />
    </cfquery>
  <!--- catch any errors --->
  <cfcatch type="any">
  	<cfset variables.utils.errorHandler(cfcatch) />
  	<cfreturn createObject('component','model.CssProps').init() />
  </cfcatch>
  </cftry>
  <cfif qGetCssProps.RecordCount>
    <cfreturn createObject('component','model.CssProps').init(
    	cssPropId     = qGetCssProps.cssPropertyId,
    	campaignId 	  = qGetCssProps.campaignId,
      formField     = qGetCssProps.formField,
    	value    	    = qGetCssProps.value
    ) />
  <cfelse>
    <cfreturn createObject('component','model.CssProps').init() />
  </cfif>
</cffunction>

<!--- UPDATE --->
<cffunction name="updateCssProps" access="public" output="false" returntype="numeric" hint="I update this cssProps record in the cssProps table of the database.">
  <cfargument name="cssProps" type="any" required="true" hint="I am the CssProps bean." />
  <cfset var qUpdCssProps = '' />
  <cftry>
    <cfquery name="qUpdCssProps" datasource="#variables.datasource#">
    	UPDATE campaign.CssProperty SET
    	  campaignId = <cfqueryparam value="#ARGUMENTS.cssProps.getCampaignId()#" cfsqltype="cf_sql_integer" />,
        formField = <cfqueryparam value="#ARGUMENTS.cssProps.getFormField()#" cfsqltype="cf_sql_varchar" />,
    	  value = <cfqueryparam value="#ARGUMENTS.cssProps.getValue()#" cfsqltype="cf_sql_varchar" />
    	WHERE CssPropertyId = <cfqueryparam value="#ARGUMENTS.cssProps.getCssPropId()#" cfsqltype="cf_sql_integer" />
    </cfquery>
  <!--- catch any errors --->
  <cfcatch type="any">
  	<cfset variables.utils.errorHandler(cfcatch) />
  	<cfreturn 0 />
  </cfcatch>
  </cftry>
  <cfreturn ARGUMENTS.cssProps.getCssPropId() />
</cffunction>

<!--- DELETE --->
<cffunction name="deleteCssPropsByID" access="public" output="false" returntype="boolean" hint="I delete a cssProps from cssProps table in the database.">
  <cfargument name="id" type="numeric" required="true" hint="I am the numeric auto-increment id of the cssProps to delete." />
  <cfset var qDelCssProps = '' />
  <cftry>
    <cfquery name="qDelCssProps" datasource="#variables.datasource#">
  		DELETE FROM campaign.CssProperty
  		WHERE CssPropertyId = <cfqueryparam value="#ARGUMENTS.id#" cfsqltype="cf_sql_integer" />
	  </cfquery>
  <cfcatch type="database">
    <cfreturn false />
  </cfcatch>
  </cftry>
  <cfreturn true />
</cffunction>

<!--- NO FILTER - GET ALL RECORDS --->
<cffunction name="getAllCssProps" access="public" output="false" returntype="query" hint="I return a query of all records in the cssProps table in the database.">
  <cfargument name="cache" type="any" required="false" default="false" hint="I am a flag to determine if this query should be cached." />
  <cfargument name="cacheTime" type="any" required="false" default="#CreateTimeSpan(0,1,0,0)#" hint="I am timespan to cache this query (Use CreateTimeSpan() or use the default cache time of one hour by not passing this variable." />
  
    <cfset var thisFilter = {
      cache = ARGUMENTS.cache,
      cacheTime = ARGUMENTS.cacheTime
    } />

  <cfreturn filterAllCssProps(thisFilter) />
</cffunction>

<!--- FILTER --->
<cffunction name="filter" access="public" output="false" returntype="any" hint="I run a query of all records within the database table.">
  <cfargument name="campaignId" type="any" required="false" default="" hint="I am the campaignId string to return records for." />
  <cfargument name="formField" type="any" required="false" default="" hint="I am the formField string to return records for." />
  <cfargument name="value" type="any" required="false" default="" hint="I am the value boolean to return records for." />
  <cfargument name="orderBy" type="any" required="false" default="" hint="I am the column (and optional ordinal ASC or DESC) that records should be ordered by." />
  <cfargument name="cache" type="any" required="false" default="false" hint="I am a flag to determine if this query should be cached." />
  <cfargument name="cacheTime" type="any" required="false" default="#CreateTimeSpan(0,1,0,0)#" hint="I am timespan to cache this query (Use CreateTimeSpan() or use the default cache time of one hour by not passing this variable." />
  <cfargument name="useSearch" type="boolean" required="false" default="false" hint="I am a flag to determine if this query should use 'LIKE' to search for records." />
    <cfset var thisFilter = StructNew() />
    <cfif IsDefined('ARGUMENTS.campaignId') AND ARGUMENTS.campaignId NEQ "">
      <cfset thisFilter.campaignId = ARGUMENTS.campaignId />
    </cfif>
    <cfif IsDefined('ARGUMENTS.formField') AND ARGUMENTS.formField NEQ "">
      <cfset thisFilter.formField = ARGUMENTS.formField />
    </cfif>
    <cfif IsDefined('ARGUMENTS.value') AND ARGUMENTS.value NEQ "">
      <cfset thisFilter.value = ARGUMENTS.value />
    </cfif>
    <cfif IsDefined('ARGUMENTS.orderBy') AND ARGUMENTS.orderBy NEQ "">
      <cfset thisFilter.order_by = ARGUMENTS.orderBy />
    </cfif>
    <cfif IsDefined('ARGUMENTS.cache') AND ARGUMENTS.cache NEQ false>
      <cfset thisFilter.cache = ARGUMENTS.cache />
    </cfif>
    <cfif IsDefined('ARGUMENTS.cacheTime') AND ARGUMENTS.cacheTime NEQ "">
      <cfset thisFilter.cacheTime = ARGUMENTS.cacheTime />
    </cfif>
    <cfif IsDefined('ARGUMENTS.useSearch') AND ARGUMENTS.useSearch NEQ "">
      <cfset thisFilter.useSearch = ARGUMENTS.useSearch />
    </cfif>
  <cfif NOT structIsEmpty(thisFilter) AND structKeyExists(thisFilter, 'cache') AND thisFilter.cache>
    <cfreturn cacheAllCssProps(thisFilter) />
  <cfelseif NOT structIsEmpty(thisFilter) AND structKeyExists(thisFilter, 'useSearch') AND thisFilter.useSearch>
    <cfreturn searchAllCssProps(thisFiler) />
  <cfelse>
    <cfreturn filterAllCssProps(thisFilter) />
  </cfif>
</cffunction>

<!--- PRIVATE METHODS --->
<!--- QUERY - CACHE ALL --->
<cffunction name="cacheAllCssProps" access="private" output="false" returntype="any" hint="I run a query and will return all cssProps records. If a filter has been applied, I will refine results based on the filter.">
  <cfargument name="filter" type="struct" required="false" default="#StructNew()#" hint="I am a structure used to filter the query." />
  <cfset var cachedQueryName = '' />
  <cfset cachedQueryName = Hash( SerializeJSON( filter ), 'SHA-256') />
  <cfquery name="#cachedQueryName#" datasource="#variables.datasource#" cachedwithin="#ARGUMENTS.filter.cacheTime#">
    SELECT CssPropertyId, campaignId, formField, value
    FROM campaign.CssProperty
    WHERE 1 = 1
  <cfif NOT structIsEmpty(ARGUMENTS.filter)>
    <!--- filter is applied --->
    <cfif structKeyExists(ARGUMENTS.filter, 'campaignId')>
    AND campaignId = <cfqueryparam value="#ARGUMENTS.filter.campaignId#" cfsqltype="cf_sql_integer" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'formField')>
    AND formField = <cfqueryparam value="#ARGUMENTS.filter.formField#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'value')>
    AND value = <cfqueryparam value="#ARGUMENTS.filter.value#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'order_by')>
    ORDER BY #ARGUMENTS.filter.order_by#
    </cfif>
  </cfif>
  </cfquery>
  <cfreturn variables[cachedQueryName] />
</cffunction>

<!--- QUERY - FILTER ALL --->
<cffunction name="filterAllCssProps" access="private" output="false" returntype="any" hint="I run a query and will return all cssProps records. If a filter has been applied, I will refine results based on the filter.">
  <cfargument name="filter" type="struct" required="false" default="#StructNew()#" hint="I am a structure used to filter the query." />
  <cfset var qGetCssProps = '' />
  <cfquery name="qGetCssProps" datasource="#variables.datasource#">
    SELECT CssPropertyId, campaignId, formField, value
    FROM campaign.CssProperty
    WHERE 1 = 1
  <cfif NOT structIsEmpty(ARGUMENTS.filter)>
    <!--- filter is applied --->
    <cfif structKeyExists(ARGUMENTS.filter, 'campaignId')>
    AND campaignId = <cfqueryparam value="#ARGUMENTS.filter.campaignId#" cfsqltype="cf_sql_integer" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'formField')>
    AND formField = <cfqueryparam value="#ARGUMENTS.filter.formField#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'value')>
    AND value = <cfqueryparam value="#ARGUMENTS.filter.value#" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'order_by')>
    ORDER BY #ARGUMENTS.filter.order_by#
    </cfif>
  </cfif>
  </cfquery>
  <cfreturn qGetCssProps />
</cffunction>

<!--- QUERY - SEARCH ALL --->
<cffunction name="searchAllCssProps" access="private" output="false" returntype="any" hint="I run a query and will return all cssProps records. If a filter has been applied, I will refine results based on the filter.">
  <cfargument name="filter" type="struct" required="false" default="#StructNew()#" hint="I am a structure used to filter the query." />
  <cfset var qGetCssProps = '' />
  <cfquery name="qGetCssProps" datasource="#variables.datasource#">
    SELECT CssPropertyId, campaignId, formField, value
    FROM campaign.CssProperty
    WHERE 1 = 1
  <cfif NOT structIsEmpty(ARGUMENTS.filter)>
    <!--- filter is applied --->
    <cfif structKeyExists(ARGUMENTS.filter, 'campaignId')>
    AND campaignId = <cfqueryparam value="#ARGUMENTS.filter.campaignId#" cfsqltype="cf_sql_integer" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'formField')>
    AND formField LIKE <cfqueryparam value="%#ARGUMENTS.filter.formField#%" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'value')>
    AND value LIKE <cfqueryparam value="%#ARGUMENTS.filter.value#%" cfsqltype="cf_sql_varchar" />
    </cfif>
    <cfif structKeyExists(ARGUMENTS.filter, 'order_by')>
    ORDER BY #ARGUMENTS.filter.order_by#
    </cfif>
  </cfif>
  </cfquery>
  <cfreturn qGetCssProps />
</cffunction>

<!--- UTILITY FUNCTIONS --->
<!--- SAVE --->
<cffunction name="saveCssProps" access="public" output="false" returntype="any" hint="I handle saving a cssProps either by creating a new entry or updating an existing one.">
  <cfargument name="cssProps" type="any" required="true" hint="I am the CssProps bean." />
  <cfif exists(ARGUMENTS.cssProps)>
  	<cfreturn updateCssProps(ARGUMENTS.cssProps) />
  <cfelse>
  	<cfreturn createNewCssProps(ARGUMENTS.cssProps) />
  </cfif>
</cffunction>

<!--- EXISTS --->
<cffunction name="exists" access="private" output="false" returntype="boolean" hint="I check to see if a specific CssProps is in the database, using ID as the check.">
  <cfargument name="cssProps" type="any" required="true" hint="I am the CssProps bean." />
  <cfset var qGetCssProps = '' />
  <cfquery name="qGetCssProps" datasource="#variables.datasource#">
  	SELECT CssPropertyId 
	FROM campaign.CssProperty
  	WHERE CssPropertyId = <cfqueryparam value="#ARGUMENTS.cssProps.getCssPropId()#" cfsqltype="cf_sql_integer" />
  </cfquery>
  <cfif qGetCssProps.RecordCount>
	 <cfreturn true />
  <cfelse>
	 <cfreturn false />
  </cfif>
</cffunction>

</cfcomponent>

